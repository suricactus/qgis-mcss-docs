<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classQgsImageCache" kind="class" language="C++" prot="public">
    <compoundname>QgsImageCache</compoundname>
    <basecompoundref refid="classQgsAbstractContentCache" prot="public" virt="non-virtual">QgsAbstractContentCache&lt; QgsImageCacheEntry &gt;</basecompoundref>
    <includes refid="qgsimagecache_8h" local="no">qgsimagecache.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classQgsImageCache_1a9364bd7cfd4ec5fcb03221cc5c9c9083" prot="private" static="no" mutable="no">
        <type>QByteArray</type>
        <definition>QByteArray QgsImageCache::mFetchingSvg</definition>
        <argsstring></argsstring>
        <name>mFetchingSvg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" line="148" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsImageCache_1a4c1ad89bc6b814d47231bfc2a232cd4c" prot="private" static="no" mutable="no">
        <type>QByteArray</type>
        <definition>QByteArray QgsImageCache::mMissingSvg</definition>
        <argsstring></argsstring>
        <name>mMissingSvg</name>
        <briefdescription>
<para>SVG content to be rendered if SVG file was not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" line="146" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classQgsImageCache_1a36fd1d4d27bedca3cc7cf6e2afe4f1d9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TestQgsImageCache</definition>
        <argsstring></argsstring>
        <name>TestQgsImageCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" line="150" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classQgsImageCache_1a6550a6632e1fe182653c5c90d060b28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsImageCache::QgsImageCache</definition>
        <argsstring>(QObject *parent=nullptr)</argsstring>
        <name>QgsImageCache</name>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="classQgsImageCache" kindref="compound">QgsImageCache</ref>, with the specified <emphasis>parent</emphasis> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" line="99" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.cpp" bodystart="81" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classQgsImageCache_1a72cdd794f77dfc4704a731987e3a5f4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize QgsImageCache::originalSize</definition>
        <argsstring>(const QString &amp;path) const</argsstring>
        <name>originalSize</name>
        <param>
          <type>const QString &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the original size (in pixels) of the image at the specified <emphasis>path</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>path</emphasis> may be a local file, remote (HTTP) url, or a base 64 encoded string (with a &quot;base64:&quot; prefix).</para><para>If <emphasis>path</emphasis> is a remote file, then an invalid size may be returned while the image is in the process of being fetched.</para><para>If the image could not be read then an invalid QSize is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" line="132" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.cpp" bodystart="147" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classQgsImageCache_1aa8167de2dd5b59090e86c90dbe336583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QImage</type>
        <definition>QImage QgsImageCache::pathAsImage</definition>
        <argsstring>(const QString &amp;path, const QSize size, const bool keepAspectRatio, const double opacity, bool &amp;fitsInCache)</argsstring>
        <name>pathAsImage</name>
        <param>
          <type>const QString &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const QSize</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>keepAspectRatio</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>opacity</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>fitsInCache</declname>
        </param>
        <briefdescription>
<para>Returns the specified <emphasis>path</emphasis> rendered as an image. </para>        </briefdescription>
        <detaileddescription>
<para>If possible, a pre-existing cached version of the image will be used. If not, the image is fetched and resampled to the desired size, and then the result cached for subsequent lookups.</para><para><emphasis>path</emphasis> may be a local file, remote (HTTP) url, or a base 64 encoded string (with a &quot;base64:&quot; prefix).</para><para>The <emphasis>size</emphasis> parameter dictates the target size of the image. An invalid size indicates the original raster image size (with no resampling). A size in which the width or height is set to zero will have the zeroed value automatically computed when keepAspectRatio is true.</para><para>If <emphasis>keepAspectRatio</emphasis> is true, then the original raster aspect ratio will be maintained during any resampling operations.</para><para>An <emphasis>opacity</emphasis> parameter dictates the opacity of the image.</para><para>If the resultant raster was of a sufficiently small size to store in the cache, then <emphasis>fitsInCache</emphasis> will be set to true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" line="120" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.cpp" bodystart="104" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="signal">
      <memberdef kind="signal" id="classQgsImageCache_1aa7575f69c8048720405969e12318590f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsImageCache::remoteImageFetched</definition>
        <argsstring>(const QString &amp;url)</argsstring>
        <name>remoteImageFetched</name>
        <param>
          <type>const QString &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Emitted when the cache has finished retrieving an image file from a remote <emphasis>url</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" line="139" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classQgsImageCache_1ace8fe7d179a7542cd550e2eb2ed4eb23" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QImage</type>
        <definition>QImage QgsImageCache::renderImage</definition>
        <argsstring>(const QString &amp;path, QSize size, const bool keepAspectRatio, const double opacity) const</argsstring>
        <name>renderImage</name>
        <param>
          <type>const QString &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>QSize</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>keepAspectRatio</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>opacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" line="143" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.cpp" bodystart="183" bodyend="261"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cache for images derived from raster files. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classQgsImageCache" kindref="compound">QgsImageCache</ref> stores pre-rendered resampled versions of raster image files, allowing efficient reuse without incurring the cost of resampling on every render.</para><para><ref refid="classQgsImageCache" kindref="compound">QgsImageCache</ref> is not usually directly created, but rather accessed through <ref refid="classQgsApplication_1a71bd437cd87959a7b44b5ddd1783ea62" kindref="member">QgsApplication::imageCache()</ref>.</para><para><simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="4024">
        <label>QObject</label>
      </node>
      <node id="4021">
        <label>QgsImageCache</label>
        <link refid="classQgsImageCache"/>
        <childnode refid="4022" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4022">
        <label>QgsAbstractContentCache&lt; QgsImageCacheEntry &gt;</label>
        <link refid="classQgsAbstractContentCache"/>
        <childnode refid="4023" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4023">
        <label>QgsAbstractContentCacheBase</label>
        <link refid="classQgsAbstractContentCacheBase"/>
        <childnode refid="4024" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4028">
        <label>QObject</label>
      </node>
      <node id="4025">
        <label>QgsImageCache</label>
        <link refid="classQgsImageCache"/>
        <childnode refid="4026" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4026">
        <label>QgsAbstractContentCache&lt; QgsImageCacheEntry &gt;</label>
        <link refid="classQgsAbstractContentCache"/>
        <childnode refid="4027" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4027">
        <label>QgsAbstractContentCacheBase</label>
        <link refid="classQgsAbstractContentCacheBase"/>
        <childnode refid="4028" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" line="90" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsimagecache.h" bodystart="89" bodyend="151"/>
    <listofallmembers>
      <member refid="classQgsAbstractContentCacheBase_1a59291b956cbd573b846d1bf58fce2050" prot="protected" virt="virtual"><scope>QgsImageCache</scope><name>checkReply</name></member>
      <member refid="classQgsAbstractContentCache_1a0f7f46aaeb38fa212bbbcb79713babcd" prot="protected" virt="non-virtual"><scope>QgsImageCache</scope><name>findExistingEntry</name></member>
      <member refid="classQgsAbstractContentCache_1ae759708e1a09ef888bfb0672238aaffb" prot="protected" virt="non-virtual"><scope>QgsImageCache</scope><name>getContent</name></member>
      <member refid="classQgsImageCache_1a9364bd7cfd4ec5fcb03221cc5c9c9083" prot="private" virt="non-virtual"><scope>QgsImageCache</scope><name>mFetchingSvg</name></member>
      <member refid="classQgsAbstractContentCache_1a18e966f7c5c31ffbf97e1ddf4d2d9aca" prot="protected" virt="non-virtual"><scope>QgsImageCache</scope><name>mMaxCacheSize</name></member>
      <member refid="classQgsImageCache_1a4c1ad89bc6b814d47231bfc2a232cd4c" prot="private" virt="non-virtual"><scope>QgsImageCache</scope><name>mMissingSvg</name></member>
      <member refid="classQgsAbstractContentCache_1aaf09d85762a13df57b8bfa26e574c6e5" prot="protected" virt="non-virtual"><scope>QgsImageCache</scope><name>mMutex</name></member>
      <member refid="classQgsAbstractContentCache_1a6703853a23c0d227136d0b6a30043637" prot="protected" virt="non-virtual"><scope>QgsImageCache</scope><name>mTotalSize</name></member>
      <member refid="classQgsAbstractContentCache_1a52a1d38ed9104b8eda759f6d647d4f6b" prot="protected" virt="virtual"><scope>QgsImageCache</scope><name>onRemoteContentFetched</name></member>
      <member refid="classQgsImageCache_1a72cdd794f77dfc4704a731987e3a5f4c" prot="public" virt="non-virtual"><scope>QgsImageCache</scope><name>originalSize</name></member>
      <member refid="classQgsImageCache_1aa8167de2dd5b59090e86c90dbe336583" prot="public" virt="non-virtual"><scope>QgsImageCache</scope><name>pathAsImage</name></member>
      <member refid="classQgsAbstractContentCache_1a5d4fc48a2b5b9ca5efec3a5e9f2c8ca6" prot="public" virt="non-virtual"><scope>QgsImageCache</scope><name>QgsAbstractContentCache</name></member>
      <member refid="classQgsAbstractContentCacheBase_1abc4f90a71c3df675e8d7b82b6829aefc" prot="public" virt="non-virtual"><scope>QgsImageCache</scope><name>QgsAbstractContentCacheBase</name></member>
      <member refid="classQgsImageCache_1a6550a6632e1fe182653c5c90d060b28e" prot="public" virt="non-virtual"><scope>QgsImageCache</scope><name>QgsImageCache</name></member>
      <member refid="classQgsAbstractContentCacheBase_1a0466d84c9bbe8749c671a05245fff78e" prot="public" virt="non-virtual"><scope>QgsImageCache</scope><name>remoteContentFetched</name></member>
      <member refid="classQgsImageCache_1aa7575f69c8048720405969e12318590f" prot="public" virt="non-virtual"><scope>QgsImageCache</scope><name>remoteImageFetched</name></member>
      <member refid="classQgsImageCache_1ace8fe7d179a7542cd550e2eb2ed4eb23" prot="private" virt="non-virtual"><scope>QgsImageCache</scope><name>renderImage</name></member>
      <member refid="classQgsImageCache_1a36fd1d4d27bedca3cc7cf6e2afe4f1d9" prot="private" virt="non-virtual"><scope>QgsImageCache</scope><name>TestQgsImageCache</name></member>
      <member refid="classQgsAbstractContentCache_1a7826c63eec1b04d2777ca784bd5ed458" prot="protected" virt="non-virtual"><scope>QgsImageCache</scope><name>trimToMaximumSize</name></member>
      <member refid="classQgsAbstractContentCache_1a4e597e7d5e081ecb0760cfd856fbce42" prot="public" virt="non-virtual"><scope>QgsImageCache</scope><name>~QgsAbstractContentCache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
