<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classQgsVectorLayerCache" kind="class" language="C++" prot="public">
    <compoundname>QgsVectorLayerCache</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="qgsvectorlayercache_8h" local="no">qgsvectorlayercache.h</includes>
    <innerclass refid="classQgsVectorLayerCache_1_1QgsCachedFeature" prot="private">QgsVectorLayerCache::QgsCachedFeature</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classQgsVectorLayerCache_1aeaf80fc82bd360cccc3a4944b485bd37" prot="private" static="no" mutable="no">
        <type>QCache&lt; <ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref>, <ref refid="classQgsVectorLayerCache_1a1f26cdbca135653753e750a1368b6190" kindref="member">QgsCachedFeature</ref> &gt;</type>
        <definition>QCache&lt; QgsFeatureId, QgsCachedFeature &gt; QgsVectorLayerCache::mCache</definition>
        <argsstring></argsstring>
        <name>mCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="400" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsVectorLayerCache_1a22e68346ecb204b9b64db82fb3c151d6" prot="private" static="no" mutable="no">
        <type><ref refid="qgsfield_8h_1a00f27df80eac3fb534923fefaed2181d" kindref="member">QgsAttributeList</ref></type>
        <definition>QgsAttributeList QgsVectorLayerCache::mCachedAttributes</definition>
        <argsstring></argsstring>
        <name>mCachedAttributes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="406" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsVectorLayerCache_1ae056f09e196ab9811d6d6d0bf7f6a935" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QgsVectorLayerCache::mCacheGeometry</definition>
        <argsstring></argsstring>
        <name>mCacheGeometry</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="402" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsVectorLayerCache_1a0ad606deef8c03a4fa9ef476b82e1b7e" prot="private" static="no" mutable="no">
        <type>QList&lt; <ref refid="classQgsAbstractCacheIndex" kindref="compound">QgsAbstractCacheIndex</ref> * &gt;</type>
        <definition>QList&lt;QgsAbstractCacheIndex *&gt; QgsVectorLayerCache::mCacheIndices</definition>
        <argsstring></argsstring>
        <name>mCacheIndices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="404" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsVectorLayerCache_1a59adadddf031ead4d58a2eeb0e3b1f86" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QgsVectorLayerCache::mFullCache</definition>
        <argsstring></argsstring>
        <name>mFullCache</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="403" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsVectorLayerCache_1acbd050ef701b3e6f21951e4a7a9c82da" prot="private" static="no" mutable="no">
        <type><ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
        <definition>QgsVectorLayer* QgsVectorLayerCache::mLayer</definition>
        <argsstring></argsstring>
        <name>mLayer</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="399" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classQgsVectorLayerCache_1a1f26cdbca135653753e750a1368b6190" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class QgsCachedFeature</definition>
        <argsstring></argsstring>
        <name>QgsCachedFeature</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="410" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classQgsVectorLayerCache_1ab92bf0526ebeb3cfb59432f2a4fd9400" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class QgsCachedFeatureIterator</definition>
        <argsstring></argsstring>
        <name>QgsCachedFeatureIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="408" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classQgsVectorLayerCache_1a5dde0bce140d2fbeecf5d3d5ea9bfcdf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class QgsCachedFeatureWriterIterator</definition>
        <argsstring></argsstring>
        <name>QgsCachedFeatureWriterIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="409" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classQgsVectorLayerCache_1a71ec646ee2b7fb2a300fb2f0598acffe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TestVectorLayerCache</definition>
        <argsstring></argsstring>
        <name>TestVectorLayerCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="422" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classQgsVectorLayerCache_1ad46345cfbb9070f73373070c66bf058e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsVectorLayerCache::QgsVectorLayerCache</definition>
        <argsstring>(QgsVectorLayer *layer, int cacheSize, QObject *parent=nullptr)</argsstring>
        <name>QgsVectorLayerCache</name>
        <param>
          <type><ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cacheSize</declname>
        </param>
        <param>
          <type>QObject *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="92" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="25" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1af353ea99b24c498136207f30fb932323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsVectorLayerCache::~QgsVectorLayerCache</definition>
        <argsstring>() override</argsstring>
        <name>~QgsVectorLayerCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="93" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1ac6e2933e8344dcf386b732b43890ba0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::addCacheIndex</definition>
        <argsstring>(QgsAbstractCacheIndex *cacheIndex)</argsstring>
        <name>addCacheIndex</name>
        <param>
          <type><ref refid="classQgsAbstractCacheIndex" kindref="compound">QgsAbstractCacheIndex</ref> *</type>
          <declname>cacheIndex</declname>
        </param>
        <briefdescription>
<para>Adds a <ref refid="classQgsAbstractCacheIndex" kindref="compound">QgsAbstractCacheIndex</ref> to this cache. </para>        </briefdescription>
        <detaileddescription>
<para>Cache indices know about features present in this cache and decide, if enough information is present in the cache to respond to a <ref refid="classQgsFeatureRequest" kindref="compound">QgsFeatureRequest</ref>. The layer cache will take ownership of the index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cacheIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The cache index to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="174" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a99fc4cf9e055c29a95b9088ade4bd154" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="qgsfeatureid_8h_1a443917048a2ef75006fdeba30f1549f3" kindref="member">QgsFeatureIds</ref></type>
        <definition>QgsFeatureIds QgsVectorLayerCache::cachedFeatureIds</definition>
        <argsstring>() const</argsstring>
        <name>cachedFeatureIds</name>
        <briefdescription>
<para>Returns the set of feature IDs for features which are cached. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsVectorLayerCache_1a02b1322593db08350614dcd548d4861a" kindref="member">isFidCached()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="235" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1aa950c48659c496a678c4b2e6a3baf198" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsVectorLayerCache::cacheGeometry</definition>
        <argsstring>() const</argsstring>
        <name>cacheGeometry</name>
        <briefdescription>
<para>Returns true if the cache will fetch and cache feature geometries. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsVectorLayerCache_1ae3be09b6f82b89d10bd31ac3ea43e827" kindref="member">setCacheGeometry()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="125" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1aaa3b290d534c5801115b7e5dbef44c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsVectorLayerCache::cacheSize</definition>
        <argsstring>()</argsstring>
        <name>cacheSize</name>
        <briefdescription>
<para>Returns the maximum number of features this cache will hold. </para>        </briefdescription>
        <detaileddescription>
<para>In case full caching is enabled, this number can change, as new features get added.</para><para><simplesect kind="return"><para>int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="110" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1affc9061685c254f8df6cf8d7d5b53fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsVectorLayerCache::featureAtId</definition>
        <argsstring>(QgsFeatureId featureId, QgsFeature &amp;feature, bool skipCache=false)</argsstring>
        <name>featureAtId</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>featureId</declname>
        </param>
        <param>
          <type><ref refid="classQgsFeature" kindref="compound">QgsFeature</ref> &amp;</type>
          <declname>feature</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skipCache</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Gets the feature at the given feature id. </para>        </briefdescription>
        <detaileddescription>
<para>Considers the changed, added, deleted and permanent features <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>featureId</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the feature to query </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feature</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the operation will be written to this feature </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skipCache</parametername>
</parameternamelist>
<parameterdescription>
<para>Will query the layer regardless if the feature is in the cache already </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="244" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="145" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1aca1ac9b8ea6d52a8f65b4f265c3c1052" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long QgsVectorLayerCache::featureCount</definition>
        <argsstring>() const</argsstring>
        <name>featureCount</name>
        <briefdescription>
<para>Returns the number of features contained in the source, or -1 if the feature count is unknown. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="295" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a4b3e34cc7fb2b8e9a328ec38ff1b0646" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsFields" kindref="compound">QgsFields</ref></type>
        <definition>QgsFields QgsVectorLayerCache::fields</definition>
        <argsstring>() const</argsstring>
        <name>fields</name>
        <briefdescription>
<para>Returns the fields associated with features in the cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="266" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a4dfae3cc859ec6ca428145a4d1e96bff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsFeature" kindref="compound">QgsFeature</ref></type>
        <definition>QgsFeature QgsVectorLayerCache::getFeature</definition>
        <argsstring>(QgsFeatureId fid)</argsstring>
        <name>getFeature</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <briefdescription>
<para>Query the layer for the feature with the given id. </para>        </briefdescription>
        <detaileddescription>
<para>If there is no such feature, the returned feature will be invalid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="199" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1ae8bb2c22c803d430cdcb57c88e3abb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsFeatureIterator" kindref="compound">QgsFeatureIterator</ref></type>
        <definition>QgsFeatureIterator QgsVectorLayerCache::getFeatures</definition>
        <argsstring>(const QgsFeatureRequest &amp;featureRequest=QgsFeatureRequest())</argsstring>
        <name>getFeatures</name>
        <param>
          <type>const <ref refid="classQgsFeatureRequest" kindref="compound">QgsFeatureRequest</ref> &amp;</type>
          <declname>featureRequest</declname>
          <defval><ref refid="classQgsFeatureRequest" kindref="compound">QgsFeatureRequest</ref>()</defval>
        </param>
        <briefdescription>
<para>Query this VectorLayerCache for features. </para>        </briefdescription>
        <detaileddescription>
<para>If the VectorLayerCache (and moreover any of its indices) is able to satisfy the request, the returned <ref refid="classQgsFeatureIterator" kindref="compound">QgsFeatureIterator</ref> will iterate over cached features. If it&apos;s not possible to fully satisfy the request from the cache, part or all of the features will be requested from the data provider. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>featureRequest</parametername>
</parameternamelist>
<parameterdescription>
<para>The request specifying filter and required data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator over the requested data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="185" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="374" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a171455fc5ca4dbadef23248ddafb4a8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsFeatureIterator" kindref="compound">QgsFeatureIterator</ref></type>
        <definition>QgsFeatureIterator QgsVectorLayerCache::getFeatures</definition>
        <argsstring>(const QString &amp;expression)</argsstring>
        <name>getFeatures</name>
        <param>
          <type>const QString &amp;</type>
          <declname>expression</declname>
        </param>
        <briefdescription>
<para>Query the layer for features matching a given expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="190" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a4d7ff8a2b5ba086cbc7cfd69b8f553c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsFeatureIterator" kindref="compound">QgsFeatureIterator</ref></type>
        <definition>QgsFeatureIterator QgsVectorLayerCache::getFeatures</definition>
        <argsstring>(const QgsFeatureIds &amp;fids)</argsstring>
        <name>getFeatures</name>
        <param>
          <type>const <ref refid="qgsfeatureid_8h_1a443917048a2ef75006fdeba30f1549f3" kindref="member">QgsFeatureIds</ref> &amp;</type>
          <declname>fids</declname>
        </param>
        <briefdescription>
<para>Query the layer for the features with the given ids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="209" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a31e2b0253e174f57235d5fb56a03fa47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsFeatureIterator" kindref="compound">QgsFeatureIterator</ref></type>
        <definition>QgsFeatureIterator QgsVectorLayerCache::getFeatures</definition>
        <argsstring>(const QgsRectangle &amp;rectangle)</argsstring>
        <name>getFeatures</name>
        <param>
          <type>const <ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref> &amp;</type>
          <declname>rectangle</declname>
        </param>
        <briefdescription>
<para>Query the layer for the features which intersect the specified rectangle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="217" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a170b75ee0e767fae9433ca6ea8ba3653" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsVectorLayerCache::hasFullCache</definition>
        <argsstring>() const</argsstring>
        <name>hasFullCache</name>
        <briefdescription>
<para>Returns true if the cache is complete, ie it contains all features. </para>        </briefdescription>
        <detaileddescription>
<para>This may happen as a result of a call to <ref refid="classQgsVectorLayerCache_1a0e90f126e4a15bff662ce4c4f842fb75" kindref="member">setFullCache()</ref> or by through a feature request which resulted in all available features being cached. <simplesect kind="see"><para><ref refid="classQgsVectorLayerCache_1a0e90f126e4a15bff662ce4c4f842fb75" kindref="member">setFullCache()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="164" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a02b1322593db08350614dcd548d4861a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsVectorLayerCache::isFidCached</definition>
        <argsstring>(QgsFeatureId fid) const</argsstring>
        <name>isFidCached</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <briefdescription>
<para>Check if a certain feature id is cached. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fid</parametername>
</parameternamelist>
<parameterdescription>
<para>The feature id to look for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if this id is in the cache </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsVectorLayerCache_1a99fc4cf9e055c29a95b9088ade4bd154" kindref="member">cachedFeatureIds()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="228" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a84cd021103ad6108865d1bfa673b19a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
        <definition>QgsVectorLayer * QgsVectorLayerCache::layer</definition>
        <argsstring>()</argsstring>
        <name>layer</name>
        <briefdescription>
<para>Returns the layer to which this cache belongs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="256" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a69534a1470b29ad13aea3e509313109e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsVectorLayerCache::removeCachedFeature</definition>
        <argsstring>(QgsFeatureId fid)</argsstring>
        <name>removeCachedFeature</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <briefdescription>
<para>Removes the feature identified by fid from the cache if present. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fid</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the feature to delete </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the feature was removed, false if the feature id was not found in the cache </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="251" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a1c5f3e6e93ff9dbaba8343569052cc18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::setCacheAddedAttributes</definition>
        <argsstring>(bool cacheAddedAttributes)</argsstring>
        <name>setCacheAddedAttributes</name>
        <param>
          <type>bool</type>
          <declname>cacheAddedAttributes</declname>
        </param>
        <briefdescription>
<para>If this is enabled, the subset of cached attributes will automatically be extended to also include newly added attributes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cacheAddedAttributes</parametername>
</parameternamelist>
<parameterdescription>
<para>Automatically cache new attributes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="140" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1ae3be09b6f82b89d10bd31ac3ea43e827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::setCacheGeometry</definition>
        <argsstring>(bool cacheGeometry)</argsstring>
        <name>setCacheGeometry</name>
        <param>
          <type>bool</type>
          <declname>cacheGeometry</declname>
        </param>
        <briefdescription>
<para>Enable or disable the caching of geometries. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cacheGeometry</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable or disable the caching of geometries </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classQgsVectorLayerCache_1aa950c48659c496a678c4b2e6a3baf198" kindref="member">cacheGeometry()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="118" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="63" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a235e4d388bbd12519c23f2c4b7d14db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::setCacheSize</definition>
        <argsstring>(int cacheSize)</argsstring>
        <name>setCacheSize</name>
        <param>
          <type>int</type>
          <declname>cacheSize</declname>
        </param>
        <briefdescription>
<para>Sets the maximum number of features to keep in the cache. </para>        </briefdescription>
        <detaileddescription>
<para>Some features will be removed from the cache if the number is smaller than the previous size of the cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cacheSize</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates the maximum number of features to keep in the cache </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="101" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a2384f5133d60a1228170f926d4b62fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::setCacheSubsetOfAttributes</definition>
        <argsstring>(const QgsAttributeList &amp;attributes)</argsstring>
        <name>setCacheSubsetOfAttributes</name>
        <param>
          <type>const <ref refid="qgsfield_8h_1a00f27df80eac3fb534923fefaed2181d" kindref="member">QgsAttributeList</ref> &amp;</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Set the subset of attributes to be cached. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>The attributes to be cached </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="132" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a0e90f126e4a15bff662ce4c4f842fb75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::setFullCache</definition>
        <argsstring>(bool fullCache)</argsstring>
        <name>setFullCache</name>
        <param>
          <type>bool</type>
          <declname>fullCache</declname>
        </param>
        <briefdescription>
<para>This enables or disables full caching. </para>        </briefdescription>
        <detaileddescription>
<para>If enabled, all features will be held in the cache. The cache size will incrementally be increased to offer space for all features. When enabled, all features will be read into cache. As this feature will most likely be used for slow data sources, be aware, that the call to this method might take a long time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fullCache</parametername>
</parameternamelist>
<parameterdescription>
<para>True: enable full caching, False: disable full caching </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>when a cache is <ref refid="classQgsVectorLayerCache_1a2264fbfbcdf0b6b14cfc899ca9653871" kindref="member">invalidated()</ref> (e.g. by adding an attribute to a layer) this setting is reset. A full cache rebuild must be performed by calling setFullCache( true ) again. </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsVectorLayerCache_1a170b75ee0e767fae9433ca6ea8ba3653" kindref="member">hasFullCache()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="155" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="87" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a93a5ef6f655588ebca0c08d86b82ee8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsCoordinateReferenceSystem" kindref="compound">QgsCoordinateReferenceSystem</ref></type>
        <definition>QgsCoordinateReferenceSystem QgsVectorLayerCache::sourceCrs</definition>
        <argsstring>() const</argsstring>
        <name>sourceCrs</name>
        <briefdescription>
<para>Returns the coordinate reference system for features in the cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="261" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a5e3bfc7f36914d0860e28bffb3655e91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsWkbTypes_1a70dff7aceefd4b16909f038e32aece11" kindref="member">QgsWkbTypes::Type</ref></type>
        <definition>QgsWkbTypes::Type QgsVectorLayerCache::wkbType</definition>
        <argsstring>() const</argsstring>
        <name>wkbType</name>
        <briefdescription>
<para>Returns the geometry type for features in the cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="271" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="189" bodyend="192"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classQgsVectorLayerCache_1a99237ab074d6e3e5137c877dc57e83a6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsVectorLayerCache::checkInformationCovered</definition>
        <argsstring>(const QgsFeatureRequest &amp;featureRequest)</argsstring>
        <name>checkInformationCovered</name>
        <param>
          <type>const <ref refid="classQgsFeatureRequest" kindref="compound">QgsFeatureRequest</ref> &amp;</type>
          <declname>featureRequest</declname>
        </param>
        <briefdescription>
<para>Checks if the information required to complete the request is cached. </para>        </briefdescription>
        <detaileddescription>
<para>i.e. If all attributes required and the geometry is held in the cache. Please note, that this does not check, if the requested features are cached.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>featureRequest</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classQgsFeatureRequest" kindref="compound">QgsFeatureRequest</ref> to be answered </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the information is being cached, false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="328" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="425" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a1be323b40a5b3ce08a9a8dee3e1c70fb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::featureRemoved</definition>
        <argsstring>(QgsFeatureId fid)</argsstring>
        <name>featureRemoved</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <briefdescription>
<para>Gets called, whenever a feature has been removed. </para>        </briefdescription>
        <detaileddescription>
<para>Broadcasts this information to indices, so they can invalidate their cache if required.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fid</parametername>
</parameternamelist>
<parameterdescription>
<para>The feature id of the removed feature. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="316" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="221" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a632e0a2521e7286fd54c9f0f06b89ddc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::requestCompleted</definition>
        <argsstring>(const QgsFeatureRequest &amp;featureRequest, const QgsFeatureIds &amp;fids)</argsstring>
        <name>requestCompleted</name>
        <param>
          <type>const <ref refid="classQgsFeatureRequest" kindref="compound">QgsFeatureRequest</ref> &amp;</type>
          <declname>featureRequest</declname>
        </param>
        <param>
          <type>const <ref refid="qgsfeatureid_8h_1a443917048a2ef75006fdeba30f1549f3" kindref="member">QgsFeatureIds</ref> &amp;</type>
          <declname>fids</declname>
        </param>
        <briefdescription>
<para>Gets called, whenever the full list of feature ids for a certain request is known. </para>        </briefdescription>
        <detaileddescription>
<para>Broadcasts this information to indices, so they can update their tables.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>featureRequest</parametername>
</parameternamelist>
<parameterdescription>
<para>The feature request that was answered </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fids</parametername>
</parameternamelist>
<parameterdescription>
<para>The feature ids that have been returned </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="307" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="204" bodyend="219"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="signal">
      <memberdef kind="signal" id="classQgsVectorLayerCache_1a646d0c81b7ce8aaf4182153e2a6cec5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::attributeValueChanged</definition>
        <argsstring>(QgsFeatureId fid, int field, const QVariant &amp;value)</argsstring>
        <name>attributeValueChanged</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Is emitted when an attribute is changed. </para>        </briefdescription>
        <detaileddescription>
<para>Is re-emitted after the layer itself emits this signal. You should connect to this signal, to be sure, to not get a cached value if querying the cache. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="signal" id="classQgsVectorLayerCache_1a5c7df0e6390474871d09f8cd2e5f149d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::cachedLayerDeleted</definition>
        <argsstring>()</argsstring>
        <name>cachedLayerDeleted</name>
        <briefdescription>
<para>Is emitted when the cached layer is deleted. </para>        </briefdescription>
        <detaileddescription>
<para>Is emitted when the cached layers layerDelete() signal is being emitted, but before the local reference to it has been set to NULL. So call to <ref refid="classQgsVectorLayerCache_1a84cd021103ad6108865d1bfa673b19a3" kindref="member">layer()</ref> will still return a valid pointer for cleanup purpose. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="signal" id="classQgsVectorLayerCache_1a39a6147bd68cd9ba3b619d0848011c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::featureAdded</definition>
        <argsstring>(QgsFeatureId fid)</argsstring>
        <name>featureAdded</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <briefdescription>
<para>Is emitted, when a new feature has been added to the layer and this cache. </para>        </briefdescription>
        <detaileddescription>
<para>You should connect to this signal instead of the layers&apos;, if you want to be sure that this cache has updated information for the new feature</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fid</parametername>
</parameternamelist>
<parameterdescription>
<para>The featureid of the changed feature </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="signal" id="classQgsVectorLayerCache_1a19a8fd661eb0b0df5f8c9b648fcb00a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::finished</definition>
        <argsstring>()</argsstring>
        <name>finished</name>
        <briefdescription>
<para>When filling the cache, this signal gets emitted once the cache is fully initialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="signal" id="classQgsVectorLayerCache_1a2264fbfbcdf0b6b14cfc899ca9653871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::invalidated</definition>
        <argsstring>()</argsstring>
        <name>invalidated</name>
        <briefdescription>
<para>The cache has been invalidated and cleared. </para>        </briefdescription>
        <detaileddescription>
<para>Note that when a cache is invalidated the fullCache() setting will be cleared, and a full cache rebuild via setFullCache( true ) will need to be performed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="signal" id="classQgsVectorLayerCache_1a6aeec3f829c14ce716b645dc3bff869e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::progress</definition>
        <argsstring>(int i, bool &amp;cancel)</argsstring>
        <name>progress</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>cancel</declname>
        </param>
        <briefdescription>
<para>When filling the cache, this signal gets emitted periodically to notify about the progress and to be able to cancel an operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of already fetched features </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cancel</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a boolean variable. Set to true and the operation will be canceled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="342" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-slot">
      <memberdef kind="slot" id="classQgsVectorLayerCache_1a5221581ab866fff2176a098dd289b8a8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::attributeAdded</definition>
        <argsstring>(int field)</argsstring>
        <name>attributeAdded</name>
        <param>
          <type>int</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="383" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="283" bodyend="288"/>
      </memberdef>
      <memberdef kind="slot" id="classQgsVectorLayerCache_1ae80b23e66e1fe5395002b34ea2bf049d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::attributeDeleted</definition>
        <argsstring>(int field)</argsstring>
        <name>attributeDeleted</name>
        <param>
          <type>int</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="384" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="290" bodyend="302"/>
      </memberdef>
      <memberdef kind="slot" id="classQgsVectorLayerCache_1a4a9f6967d0a8ed964cdf5b60e515f421" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::featureDeleted</definition>
        <argsstring>(QgsFeatureId fid)</argsstring>
        <name>featureDeleted</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="381" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="slot" id="classQgsVectorLayerCache_1ac1eab9b0f6f7a5e69e9e4b106e976971" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::geometryChanged</definition>
        <argsstring>(QgsFeatureId fid, const QgsGeometry &amp;geom)</argsstring>
        <name>geometryChanged</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="385" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="304" bodyend="312"/>
      </memberdef>
      <memberdef kind="slot" id="classQgsVectorLayerCache_1ac6ade6ba6622ecdd9553edfefda67cf4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::invalidate</definition>
        <argsstring>()</argsstring>
        <name>invalidate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="387" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="320" bodyend="325"/>
      </memberdef>
      <memberdef kind="slot" id="classQgsVectorLayerCache_1ab8e96ca5370322374b21687b96c81036" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::layerDeleted</definition>
        <argsstring>()</argsstring>
        <name>layerDeleted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="386" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="314" bodyend="318"/>
      </memberdef>
      <memberdef kind="slot" id="classQgsVectorLayerCache_1a193e9aa4c0aae91b9185e59e0289a2c6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::onAttributeValueChanged</definition>
        <argsstring>(QgsFeatureId fid, int field, const QVariant &amp;value)</argsstring>
        <name>onAttributeValueChanged</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="379" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="229" bodyend="239"/>
      </memberdef>
      <memberdef kind="slot" id="classQgsVectorLayerCache_1a797d9a07618097eb5c5c85d0482de7d4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::onFeatureAdded</definition>
        <argsstring>(QgsFeatureId fid)</argsstring>
        <name>onFeatureAdded</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="382" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="268" bodyend="281"/>
      </memberdef>
      <memberdef kind="slot" id="classQgsVectorLayerCache_1a5b6337b0db46a5c76111c901cfbc39b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::onJoinAttributeValueChanged</definition>
        <argsstring>(QgsFeatureId fid, int field, const QVariant &amp;value)</argsstring>
        <name>onJoinAttributeValueChanged</name>
        <param>
          <type><ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref></type>
          <declname>fid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="380" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="241" bodyend="261"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classQgsVectorLayerCache_1ac561654760089c5ae19f04a2255040da" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::cacheFeature</definition>
        <argsstring>(QgsFeature &amp;feat)</argsstring>
        <name>cacheFeature</name>
        <param>
          <type><ref refid="classQgsFeature" kindref="compound">QgsFeature</ref> &amp;</type>
          <declname>feat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="393" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="393" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a435b49e0be512258ec0dcb77d2de29e0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsVectorLayerCache::canUseCacheForRequest</definition>
        <argsstring>(const QgsFeatureRequest &amp;featureRequest, QgsFeatureIterator &amp;it)</argsstring>
        <name>canUseCacheForRequest</name>
        <param>
          <type>const <ref refid="classQgsFeatureRequest" kindref="compound">QgsFeatureRequest</ref> &amp;</type>
          <declname>featureRequest</declname>
        </param>
        <param>
          <type><ref refid="classQgsFeatureIterator" kindref="compound">QgsFeatureIterator</ref> &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Returns true if the cache contains all the features required for a specified request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>featureRequest</parametername>
</parameternamelist>
<parameterdescription>
<para>feature request </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to iterator for matching features </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if cache can satisfy request </para></simplesect>
<simplesect kind="note"><para>this method only checks for available features, not whether the cache contains required attributes or geometry. For that, use <ref refid="classQgsVectorLayerCache_1a99237ab074d6e3e5137c877dc57e83a6" kindref="member">checkInformationCovered()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="420" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="327" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerCache_1a2b7e905bcbb1ca004aa4bce4c8b55844" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerCache::connectJoinedLayers</definition>
        <argsstring>() const</argsstring>
        <name>connectJoinedLayers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="391" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.cpp" bodystart="452" bodyend="460"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class caches features of a given <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>The cached features can be indexed by <ref refid="classQgsAbstractCacheIndex" kindref="compound">QgsAbstractCacheIndex</ref>.</para><para>Proper indexing for a given use-case may speed up performance substantially. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="9402">
        <label>QObject</label>
      </node>
      <node id="9401">
        <label>QgsVectorLayerCache</label>
        <link refid="classQgsVectorLayerCache"/>
        <childnode refid="9402" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9404">
        <label>QObject</label>
      </node>
      <node id="9403">
        <label>QgsVectorLayerCache</label>
        <link refid="classQgsVectorLayerCache"/>
        <childnode refid="9404" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" line="47" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayercache.h" bodystart="46" bodyend="423"/>
    <listofallmembers>
      <member refid="classQgsVectorLayerCache_1ac6e2933e8344dcf386b732b43890ba0c" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>addCacheIndex</name></member>
      <member refid="classQgsVectorLayerCache_1a5221581ab866fff2176a098dd289b8a8" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>attributeAdded</name></member>
      <member refid="classQgsVectorLayerCache_1ae80b23e66e1fe5395002b34ea2bf049d" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>attributeDeleted</name></member>
      <member refid="classQgsVectorLayerCache_1a646d0c81b7ce8aaf4182153e2a6cec5f" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>attributeValueChanged</name></member>
      <member refid="classQgsVectorLayerCache_1a99fc4cf9e055c29a95b9088ade4bd154" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>cachedFeatureIds</name></member>
      <member refid="classQgsVectorLayerCache_1a5c7df0e6390474871d09f8cd2e5f149d" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>cachedLayerDeleted</name></member>
      <member refid="classQgsVectorLayerCache_1ac561654760089c5ae19f04a2255040da" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>cacheFeature</name></member>
      <member refid="classQgsVectorLayerCache_1aa950c48659c496a678c4b2e6a3baf198" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>cacheGeometry</name></member>
      <member refid="classQgsVectorLayerCache_1aaa3b290d534c5801115b7e5dbef44c1a" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>cacheSize</name></member>
      <member refid="classQgsVectorLayerCache_1a435b49e0be512258ec0dcb77d2de29e0" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>canUseCacheForRequest</name></member>
      <member refid="classQgsVectorLayerCache_1a99237ab074d6e3e5137c877dc57e83a6" prot="protected" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>checkInformationCovered</name></member>
      <member refid="classQgsVectorLayerCache_1a2b7e905bcbb1ca004aa4bce4c8b55844" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>connectJoinedLayers</name></member>
      <member refid="classQgsVectorLayerCache_1a39a6147bd68cd9ba3b619d0848011c0b" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>featureAdded</name></member>
      <member refid="classQgsVectorLayerCache_1affc9061685c254f8df6cf8d7d5b53fbf" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>featureAtId</name></member>
      <member refid="classQgsVectorLayerCache_1aca1ac9b8ea6d52a8f65b4f265c3c1052" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>featureCount</name></member>
      <member refid="classQgsVectorLayerCache_1a4a9f6967d0a8ed964cdf5b60e515f421" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>featureDeleted</name></member>
      <member refid="classQgsVectorLayerCache_1a1be323b40a5b3ce08a9a8dee3e1c70fb" prot="protected" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>featureRemoved</name></member>
      <member refid="classQgsVectorLayerCache_1a4b3e34cc7fb2b8e9a328ec38ff1b0646" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>fields</name></member>
      <member refid="classQgsVectorLayerCache_1a19a8fd661eb0b0df5f8c9b648fcb00a6" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>finished</name></member>
      <member refid="classQgsVectorLayerCache_1ac1eab9b0f6f7a5e69e9e4b106e976971" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>geometryChanged</name></member>
      <member refid="classQgsVectorLayerCache_1a4dfae3cc859ec6ca428145a4d1e96bff" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>getFeature</name></member>
      <member refid="classQgsVectorLayerCache_1ae8bb2c22c803d430cdcb57c88e3abb84" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>getFeatures</name></member>
      <member refid="classQgsVectorLayerCache_1a171455fc5ca4dbadef23248ddafb4a8e" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>getFeatures</name></member>
      <member refid="classQgsVectorLayerCache_1a4d7ff8a2b5ba086cbc7cfd69b8f553c8" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>getFeatures</name></member>
      <member refid="classQgsVectorLayerCache_1a31e2b0253e174f57235d5fb56a03fa47" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>getFeatures</name></member>
      <member refid="classQgsVectorLayerCache_1a170b75ee0e767fae9433ca6ea8ba3653" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>hasFullCache</name></member>
      <member refid="classQgsVectorLayerCache_1ac6ade6ba6622ecdd9553edfefda67cf4" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>invalidate</name></member>
      <member refid="classQgsVectorLayerCache_1a2264fbfbcdf0b6b14cfc899ca9653871" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>invalidated</name></member>
      <member refid="classQgsVectorLayerCache_1a02b1322593db08350614dcd548d4861a" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>isFidCached</name></member>
      <member refid="classQgsVectorLayerCache_1a84cd021103ad6108865d1bfa673b19a3" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>layer</name></member>
      <member refid="classQgsVectorLayerCache_1ab8e96ca5370322374b21687b96c81036" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>layerDeleted</name></member>
      <member refid="classQgsVectorLayerCache_1aeaf80fc82bd360cccc3a4944b485bd37" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>mCache</name></member>
      <member refid="classQgsVectorLayerCache_1a22e68346ecb204b9b64db82fb3c151d6" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>mCachedAttributes</name></member>
      <member refid="classQgsVectorLayerCache_1ae056f09e196ab9811d6d6d0bf7f6a935" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>mCacheGeometry</name></member>
      <member refid="classQgsVectorLayerCache_1a0ad606deef8c03a4fa9ef476b82e1b7e" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>mCacheIndices</name></member>
      <member refid="classQgsVectorLayerCache_1a59adadddf031ead4d58a2eeb0e3b1f86" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>mFullCache</name></member>
      <member refid="classQgsVectorLayerCache_1acbd050ef701b3e6f21951e4a7a9c82da" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>mLayer</name></member>
      <member refid="classQgsVectorLayerCache_1a193e9aa4c0aae91b9185e59e0289a2c6" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>onAttributeValueChanged</name></member>
      <member refid="classQgsVectorLayerCache_1a797d9a07618097eb5c5c85d0482de7d4" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>onFeatureAdded</name></member>
      <member refid="classQgsVectorLayerCache_1a5b6337b0db46a5c76111c901cfbc39b7" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>onJoinAttributeValueChanged</name></member>
      <member refid="classQgsVectorLayerCache_1a6aeec3f829c14ce716b645dc3bff869e" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>progress</name></member>
      <member refid="classQgsVectorLayerCache_1a1f26cdbca135653753e750a1368b6190" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>QgsCachedFeature</name></member>
      <member refid="classQgsVectorLayerCache_1ab92bf0526ebeb3cfb59432f2a4fd9400" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>QgsCachedFeatureIterator</name></member>
      <member refid="classQgsVectorLayerCache_1a5dde0bce140d2fbeecf5d3d5ea9bfcdf" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>QgsCachedFeatureWriterIterator</name></member>
      <member refid="classQgsVectorLayerCache_1ad46345cfbb9070f73373070c66bf058e" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>QgsVectorLayerCache</name></member>
      <member refid="classQgsVectorLayerCache_1a69534a1470b29ad13aea3e509313109e" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>removeCachedFeature</name></member>
      <member refid="classQgsVectorLayerCache_1a632e0a2521e7286fd54c9f0f06b89ddc" prot="protected" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>requestCompleted</name></member>
      <member refid="classQgsVectorLayerCache_1a1c5f3e6e93ff9dbaba8343569052cc18" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>setCacheAddedAttributes</name></member>
      <member refid="classQgsVectorLayerCache_1ae3be09b6f82b89d10bd31ac3ea43e827" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>setCacheGeometry</name></member>
      <member refid="classQgsVectorLayerCache_1a235e4d388bbd12519c23f2c4b7d14db5" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>setCacheSize</name></member>
      <member refid="classQgsVectorLayerCache_1a2384f5133d60a1228170f926d4b62fd2" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>setCacheSubsetOfAttributes</name></member>
      <member refid="classQgsVectorLayerCache_1a0e90f126e4a15bff662ce4c4f842fb75" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>setFullCache</name></member>
      <member refid="classQgsVectorLayerCache_1a93a5ef6f655588ebca0c08d86b82ee8c" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>sourceCrs</name></member>
      <member refid="classQgsVectorLayerCache_1a71ec646ee2b7fb2a300fb2f0598acffe" prot="private" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>TestVectorLayerCache</name></member>
      <member refid="classQgsVectorLayerCache_1a5e3bfc7f36914d0860e28bffb3655e91" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>wkbType</name></member>
      <member refid="classQgsVectorLayerCache_1af353ea99b24c498136207f30fb932323" prot="public" virt="non-virtual"><scope>QgsVectorLayerCache</scope><name>~QgsVectorLayerCache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
