<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classQgsVectorLayerUtils" kind="class" language="C++" prot="public">
    <compoundname>QgsVectorLayerUtils</compoundname>
    <includes refid="qgsvectorlayerutils_8h" local="no">qgsvectorlayerutils.h</includes>
    <innerclass refid="classQgsVectorLayerUtils_1_1QgsDuplicateFeatureContext" prot="public">QgsVectorLayerUtils::QgsDuplicateFeatureContext</innerclass>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classQgsVectorLayerUtils_1a8049ffa5e5b57fad94b09280e943f235" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsFeature" kindref="compound">QgsFeature</ref></type>
        <definition>QgsFeature QgsVectorLayerUtils::createFeature</definition>
        <argsstring>(const QgsVectorLayer *layer, const QgsGeometry &amp;geometry=QgsGeometry(), const QgsAttributeMap &amp;attributes=QgsAttributeMap(), QgsExpressionContext *context=nullptr)</argsstring>
        <name>createFeature</name>
        <param>
          <type>const <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
          <defval><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="qgsattributes_8h_1a54fb9a5ab4cfae301a0415ce490f08c8" kindref="member">QgsAttributeMap</ref> &amp;</type>
          <declname>attributes</declname>
          <defval><ref refid="qgsattributes_8h_1a54fb9a5ab4cfae301a0415ce490f08c8" kindref="member">QgsAttributeMap</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classQgsExpressionContext" kindref="compound">QgsExpressionContext</ref> *</type>
          <declname>context</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Creates a new feature ready for insertion into a layer. </para>        </briefdescription>
        <detaileddescription>
<para>Default values and constraints (e.g., unique constraints) will automatically be handled. An optional attribute map can be passed for the new feature to copy as many attribute values as possible from the map, assuming that they respect the layer&apos;s constraints. Note that the created feature is not automatically inserted into the layer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="143" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="352" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1ac4c62baac85a9b7143dafb9c95d251b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QVariant</type>
        <definition>QVariant QgsVectorLayerUtils::createUniqueValue</definition>
        <argsstring>(const QgsVectorLayer *layer, int fieldIndex, const QVariant &amp;seed=QVariant())</argsstring>
        <name>createUniqueValue</name>
        <param>
          <type>const <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fieldIndex</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>seed</declname>
          <defval>QVariant()</defval>
        </param>
        <briefdescription>
<para>Returns a new attribute value for the specified field index which is guaranteed to be unique. </para>        </briefdescription>
        <detaileddescription>
<para>The optional seed value can be used as a basis for generated values. <simplesect kind="see"><para><ref refid="classQgsVectorLayerUtils_1a38f919646469f304c6ff0092db63ab6c" kindref="member">valueExists()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="125" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="180" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1a7992504619d2a600e119145772d6e0b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsFeature" kindref="compound">QgsFeature</ref></type>
        <definition>QgsFeature QgsVectorLayerUtils::duplicateFeature</definition>
        <argsstring>(QgsVectorLayer *layer, const QgsFeature &amp;feature, QgsProject *project, int depth, QgsDuplicateFeatureContext &amp;duplicateFeatureContext)</argsstring>
        <name>duplicateFeature</name>
        <param>
          <type><ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsFeature" kindref="compound">QgsFeature</ref> &amp;</type>
          <declname>feature</declname>
        </param>
        <param>
          <type><ref refid="classQgsProject" kindref="compound">QgsProject</ref> *</type>
          <declname>project</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type><ref refid="classQgsVectorLayerUtils_1_1QgsDuplicateFeatureContext" kindref="compound">QgsDuplicateFeatureContext</ref> &amp;</type>
          <declname>duplicateFeatureContext</declname>
        </param>
        <briefdescription>
<para>Duplicates a feature and it&apos;s children (one level deep). </para>        </briefdescription>
        <detaileddescription>
<para>It calls CreateFeature, so default values and constraints (e.g., unique constraints) will automatically be handled. The duplicated feature will be automatically inserted into the layer. <emphasis>depth</emphasis> the higher this number the deeper the level - With depth &gt; 0 the children of the feature are not duplicated <emphasis>duplicateFeatureContext</emphasis> stores all the layers and the featureids of the duplicated features (incl. children) <simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="156" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="455" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1aa5c5385be093a21faca7ea297da9eb04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; double &gt;</type>
        <definition>QList&lt; double &gt; QgsVectorLayerUtils::getDoubleValues</definition>
        <argsstring>(const QgsVectorLayer *layer, const QString &amp;fieldOrExpression, bool &amp;ok, bool selectedOnly=false, int *nullCount=nullptr, QgsFeedback *feedback=nullptr)</argsstring>
        <name>getDoubleValues</name>
        <param>
          <type>const <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>fieldOrExpression</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>ok</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>selectedOnly</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int *</type>
          <declname>nullCount</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classQgsFeedback" kindref="compound">QgsFeedback</ref> *</type>
          <declname>feedback</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Fetches all double values from a specified field name or expression. </para>        </briefdescription>
        <detaileddescription>
<para>Null values or invalid expression results are skipped. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>vector layer to retrieve values from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldOrExpression</parametername>
</parameternamelist>
<parameterdescription>
<para>field name or an expression string evaluating to a double value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to false if field or expression is invalid, otherwise true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedOnly</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true to get values from selected features only </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nullCount</parametername>
</parameternamelist>
<parameterdescription>
<para>optional pointer to integer to store number of null values encountered in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feedback</parametername>
</parameternamelist>
<parameterdescription>
<para>optional feedback object to allow cancelation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list of fetched values </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsVectorLayerUtils_1acced1507b9fc9eded69d785f05349b5d" kindref="member">getValues</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="110" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="112" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1a70b86ec2106d3ab6579e76b21a1ab1c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classQgsVectorLayerFeatureSource" kindref="compound">QgsVectorLayerFeatureSource</ref> &gt;</type>
        <definition>std::unique_ptr&lt; QgsVectorLayerFeatureSource &gt; QgsVectorLayerUtils::getFeatureSource</definition>
        <argsstring>(QPointer&lt; QgsVectorLayer &gt; layer, QgsFeedback *feedback=nullptr)</argsstring>
        <name>getFeatureSource</name>
        <param>
          <type>QPointer&lt; <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> &gt;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type><ref refid="classQgsFeedback" kindref="compound">QgsFeedback</ref> *</type>
          <declname>feedback</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Gets the feature source from a <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> pointer. </para>        </briefdescription>
        <detaileddescription>
<para>This method is thread-safe but will block the main thread for execution. Executing it from the main thread is safe too. This should be used in scenarios, where a <computeroutput>QWeakPointer&lt;<ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref>&gt;</computeroutput> is kept in a thread and features should be fetched from this layer. Using the layer directly is not safe to do. The result will be <computeroutput>nullptr</computeroutput> if the layer has been deleted. If <emphasis>feedback</emphasis> is specified, the call will return if the feedback is canceled. Returns a new feature source for the <emphasis>layer</emphasis>. The source may be a nullptr if the layer no longer exists or if the feedback is canceled.</para><para><simplesect kind="note"><para>Requires Qt &gt;= 5.10 to make use of the thread-safe implementation </para></simplesect>
<simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="172" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="505" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1acced1507b9fc9eded69d785f05349b5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QVariant &gt;</type>
        <definition>QList&lt; QVariant &gt; QgsVectorLayerUtils::getValues</definition>
        <argsstring>(const QgsVectorLayer *layer, const QString &amp;fieldOrExpression, bool &amp;ok, bool selectedOnly=false, QgsFeedback *feedback=nullptr)</argsstring>
        <name>getValues</name>
        <param>
          <type>const <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>fieldOrExpression</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>ok</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>selectedOnly</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classQgsFeedback" kindref="compound">QgsFeedback</ref> *</type>
          <declname>feedback</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Fetches all values from a specified field name or expression. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>vector layer to retrieve values from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldOrExpression</parametername>
</parameternamelist>
<parameterdescription>
<para>field name or an expression string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to false if field or expression is invalid, otherwise true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedOnly</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true to get values from selected features only </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feedback</parametername>
</parameternamelist>
<parameterdescription>
<para>optional feedback object to allow cancelation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list of fetched values </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsVectorLayerUtils_1aa5c5385be093a21faca7ea297da9eb04" kindref="member">getDoubleValues</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="95" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="72" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1a6485e1bd9c2fd15759c09673e5bcec81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsFeatureIterator" kindref="compound">QgsFeatureIterator</ref></type>
        <definition>QgsFeatureIterator QgsVectorLayerUtils::getValuesIterator</definition>
        <argsstring>(const QgsVectorLayer *layer, const QString &amp;fieldOrExpression, bool &amp;ok, bool selectedOnly)</argsstring>
        <name>getValuesIterator</name>
        <param>
          <type>const <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>fieldOrExpression</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>ok</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>selectedOnly</declname>
        </param>
        <briefdescription>
<para>Create a feature iterator for a specified field name or expression. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>vector layer to retrieve values from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldOrExpression</parametername>
</parameternamelist>
<parameterdescription>
<para>field name or an expression string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to false if field or expression is invalid, otherwise true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedOnly</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true to get values from selected features only </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>feature iterator </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="82" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="30" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1a503c0c3143ea337c49687dc389701646" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsfeature_8h_1ae0f922f3469155bc17dfc96729f1c1cc" kindref="member">QgsFeatureList</ref></type>
        <definition>QgsFeatureList QgsVectorLayerUtils::makeFeatureCompatible</definition>
        <argsstring>(const QgsFeature &amp;feature, const QgsVectorLayer *layer)</argsstring>
        <name>makeFeatureCompatible</name>
        <param>
          <type>const <ref refid="classQgsFeature" kindref="compound">QgsFeature</ref> &amp;</type>
          <declname>feature</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Converts input <emphasis>feature</emphasis> to be compatible with the given <emphasis>layer</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a new list of transformed features compatible with the input layer, note that the number of features returned might be greater than one when converting a multi part geometry to single part</para><para>The following operations will be performed to convert the input features:<itemizedlist>
<listitem><para>convert single geometries to multi part</para></listitem><listitem><para>drop additional attributes</para></listitem><listitem><para>drop geometry if layer is geometry-less</para></listitem><listitem><para>add missing attribute fields</para></listitem><listitem><para>add back M/Z values (initialized to 0)</para></listitem><listitem><para>drop Z/M</para></listitem><listitem><para>convert multi part geometries to single part</para></listitem></itemizedlist>
</para><para><simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="212" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="567" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1a2b6c8305e1d595d9ec962493d72e8651" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsfeature_8h_1ae0f922f3469155bc17dfc96729f1c1cc" kindref="member">QgsFeatureList</ref></type>
        <definition>QgsFeatureList QgsVectorLayerUtils::makeFeaturesCompatible</definition>
        <argsstring>(const QgsFeatureList &amp;features, const QgsVectorLayer *layer)</argsstring>
        <name>makeFeaturesCompatible</name>
        <param>
          <type>const <ref refid="qgsfeature_8h_1ae0f922f3469155bc17dfc96729f1c1cc" kindref="member">QgsFeatureList</ref> &amp;</type>
          <declname>features</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Converts input <emphasis>features</emphasis> to be compatible with the given <emphasis>layer</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a new list of transformed features compatible with the input layer, note that the number of features returned might be greater than the number of input features.</para><para>The following operations will be performed to convert the input features:<itemizedlist>
<listitem><para>convert single geometries to multi part</para></listitem><listitem><para>drop additional attributes</para></listitem><listitem><para>drop geometry if layer is geometry-less</para></listitem><listitem><para>add missing attribute fields</para></listitem><listitem><para>add back M/Z values (initialized to 0)</para></listitem><listitem><para>drop Z/M</para></listitem><listitem><para>convert multi part geometries to single part</para></listitem></itemizedlist>
</para><para><simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="232" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="657" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1ae4b39d34345d605cabf89a9a27c2c697" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsVectorLayerUtils::matchAttributesToFields</definition>
        <argsstring>(QgsFeature &amp;feature, const QgsFields &amp;fields)</argsstring>
        <name>matchAttributesToFields</name>
        <param>
          <type><ref refid="classQgsFeature" kindref="compound">QgsFeature</ref> &amp;</type>
          <declname>feature</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsFields" kindref="compound">QgsFields</ref> &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
<para>Matches the attributes in <emphasis>feature</emphasis> to the specified <emphasis>fields</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This causes the attributes contained within the given <emphasis>feature</emphasis> to be rearranged (or in some cases dropped) in order to match the fields and order indicated by <emphasis>fields</emphasis>.</para><para>The exact behavior depends on whether or not <emphasis>feature</emphasis> has a valid fields container set (see <ref refid="classQgsFeature_1a331068f619fa9a4b85dee464a6b0f8dd" kindref="member">QgsFeature::fields()</ref>). If a fields container is set, then the names of the feature&apos;s fields are matched to <emphasis>fields</emphasis>. In this case attributes from <emphasis>feature</emphasis> will be rearranged or dropped in order to match the field names from <emphasis>fields</emphasis>.</para><para>If the <emphasis>feature</emphasis> does not have a valid fields container set, then the feature&apos;s attributes are simply truncated to match the number of fields present in <emphasis>fields</emphasis> (or if less attributes are present in <emphasis>feature</emphasis> than in <emphasis>fields</emphasis>, the feature&apos;s attributes are padded with NULL values to match the required length).</para><para><simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="192" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="529" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1ae48786b14c87f16dc1c77d33c05421ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsVectorLayerUtils::validateAttribute</definition>
        <argsstring>(const QgsVectorLayer *layer, const QgsFeature &amp;feature, int attributeIndex, QStringList &amp;errors, QgsFieldConstraints::ConstraintStrength strength=QgsFieldConstraints::ConstraintStrengthNotSet, QgsFieldConstraints::ConstraintOrigin origin=QgsFieldConstraints::ConstraintOriginNotSet)</argsstring>
        <name>validateAttribute</name>
        <param>
          <type>const <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsFeature" kindref="compound">QgsFeature</ref> &amp;</type>
          <declname>feature</declname>
        </param>
        <param>
          <type>int</type>
          <declname>attributeIndex</declname>
        </param>
        <param>
          <type>QStringList &amp;</type>
          <declname>errors</declname>
        </param>
        <param>
          <type><ref refid="classQgsFieldConstraints_1a1c3f236d5bdf714a3ba819e8b6b50dca" kindref="member">QgsFieldConstraints::ConstraintStrength</ref></type>
          <declname>strength</declname>
          <defval><ref refid="classQgsFieldConstraints_1a1c3f236d5bdf714a3ba819e8b6b50dcaa3363576bcb35da808eb7cfa672dadf2c" kindref="member">QgsFieldConstraints::ConstraintStrengthNotSet</ref></defval>
        </param>
        <param>
          <type><ref refid="classQgsFieldConstraints_1a583a3a85ec7aa50fceadd3f56da6b8b3" kindref="member">QgsFieldConstraints::ConstraintOrigin</ref></type>
          <declname>origin</declname>
          <defval><ref refid="classQgsFieldConstraints_1a583a3a85ec7aa50fceadd3f56da6b8b3a8befae9864c309ce37ed84b2282ba79b" kindref="member">QgsFieldConstraints::ConstraintOriginNotSet</ref></defval>
        </param>
        <briefdescription>
<para>Tests an attribute value to check whether it passes all constraints which are present on the corresponding field. </para>        </briefdescription>
        <detaileddescription>
<para>Returns true if the attribute value is valid for the field. Any constraint failures will be reported in the errors argument. If the strength or origin parameter is set then only constraints with a matching strength/origin will be checked. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="132" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="260" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classQgsVectorLayerUtils_1a38f919646469f304c6ff0092db63ab6c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsVectorLayerUtils::valueExists</definition>
        <argsstring>(const QgsVectorLayer *layer, int fieldIndex, const QVariant &amp;value, const QgsFeatureIds &amp;ignoreIds=QgsFeatureIds())</argsstring>
        <name>valueExists</name>
        <param>
          <type>const <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fieldIndex</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="qgsfeatureid_8h_1a443917048a2ef75006fdeba30f1549f3" kindref="member">QgsFeatureIds</ref> &amp;</type>
          <declname>ignoreIds</declname>
          <defval><ref refid="qgsfeatureid_8h_1a443917048a2ef75006fdeba30f1549f3" kindref="member">QgsFeatureIds</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns true if the specified value already exists within a field. </para>        </briefdescription>
        <detaileddescription>
<para>This method can be used to test for uniqueness of values inside a layer&apos;s attributes. An optional list of ignored feature IDs can be provided, if so, any features with IDs within this list are ignored when testing for existence of the value. <simplesect kind="see"><para><ref refid="classQgsVectorLayerUtils_1ac4c62baac85a9b7143dafb9c95d251b6" kindref="member">createUniqueValue()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="118" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.cpp" bodystart="143" bodyend="178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains utility methods for working with QgsVectorLayers. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" line="32" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/qgsvectorlayerutils.h" bodystart="31" bodyend="234"/>
    <listofallmembers>
      <member refid="classQgsVectorLayerUtils_1a8049ffa5e5b57fad94b09280e943f235" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>createFeature</name></member>
      <member refid="classQgsVectorLayerUtils_1ac4c62baac85a9b7143dafb9c95d251b6" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>createUniqueValue</name></member>
      <member refid="classQgsVectorLayerUtils_1a7992504619d2a600e119145772d6e0b8" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>duplicateFeature</name></member>
      <member refid="classQgsVectorLayerUtils_1aa5c5385be093a21faca7ea297da9eb04" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>getDoubleValues</name></member>
      <member refid="classQgsVectorLayerUtils_1a70b86ec2106d3ab6579e76b21a1ab1c7" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>getFeatureSource</name></member>
      <member refid="classQgsVectorLayerUtils_1acced1507b9fc9eded69d785f05349b5d" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>getValues</name></member>
      <member refid="classQgsVectorLayerUtils_1a6485e1bd9c2fd15759c09673e5bcec81" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>getValuesIterator</name></member>
      <member refid="classQgsVectorLayerUtils_1a503c0c3143ea337c49687dc389701646" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>makeFeatureCompatible</name></member>
      <member refid="classQgsVectorLayerUtils_1a2b6c8305e1d595d9ec962493d72e8651" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>makeFeaturesCompatible</name></member>
      <member refid="classQgsVectorLayerUtils_1ae4b39d34345d605cabf89a9a27c2c697" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>matchAttributesToFields</name></member>
      <member refid="classQgsVectorLayerUtils_1ae48786b14c87f16dc1c77d33c05421ef" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>validateAttribute</name></member>
      <member refid="classQgsVectorLayerUtils_1a38f919646469f304c6ff0092db63ab6c" prot="public" virt="non-virtual"><scope>QgsVectorLayerUtils</scope><name>valueExists</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
