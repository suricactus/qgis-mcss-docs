<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classQgsGeometry" kind="class" language="C++" prot="public">
    <compoundname>QgsGeometry</compoundname>
    <includes refid="qgsgeometry_8h" local="no">qgsgeometry.h</includes>
    <innerclass refid="classQgsGeometry_1_1Error" prot="public">QgsGeometry::Error</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classQgsGeometry_1a50e825745210d6f83f4467fe828213c3" prot="public" static="no">
        <name>BufferSide</name>
        <enumvalue id="classQgsGeometry_1a50e825745210d6f83f4467fe828213c3af4679988b5f50319dbd3b52077e17031" prot="public">
          <name>SideLeft</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Buffer to left of line. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a50e825745210d6f83f4467fe828213c3a61528cdd94980df7b5f121bed1fd25b6" prot="public">
          <name>SideRight</name>
          <briefdescription>
<para>Buffer to right of line. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Side of line to buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1022" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="1021" bodyend="1025"/>
      </memberdef>
      <memberdef kind="enum" id="classQgsGeometry_1a881ee79f7a97c53826f351265db07801" prot="public" static="no">
        <name>EndCapStyle</name>
        <enumvalue id="classQgsGeometry_1a881ee79f7a97c53826f351265db07801a7462e567bfbd636a3231e4c0825914dd" prot="public">
          <name>CapRound</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Round cap. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a881ee79f7a97c53826f351265db07801aece40a9cadd90b0b7da704cf781166f5" prot="public">
          <name>CapFlat</name>
          <briefdescription>
<para>Flat cap (in line with start/end of line) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a881ee79f7a97c53826f351265db07801a5dc543d50ad74a56b169b523ab2ffb9a" prot="public">
          <name>CapSquare</name>
          <briefdescription>
<para>Square cap (extends past start/end of line by buffer distance) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>End cap styles for buffers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1030" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="1029" bodyend="1034"/>
      </memberdef>
      <memberdef kind="enum" id="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926" prot="public" static="no">
        <name>JoinStyle</name>
        <enumvalue id="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926a9075b626fb08f9519e220465b434c020" prot="public">
          <name>JoinStyleRound</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Use rounded joins. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926a1d0827cb26f32e07fbb524897d8bda18" prot="public">
          <name>JoinStyleMiter</name>
          <briefdescription>
<para>Use mitered joins. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926a5a101cc3d7bc9daf7aaa7ca28d4481e1" prot="public">
          <name>JoinStyleBevel</name>
          <briefdescription>
<para>Use beveled joins. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Join styles for buffers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1039" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="1038" bodyend="1043"/>
      </memberdef>
      <memberdef kind="enum" id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" prot="public" static="no">
        <name>OperationResult</name>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ab9c61aa569953179956a4c9e19be0da4" prot="public">
          <name>Success</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Operation succeeded. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ad8f0d371214be65abdc49d288f36ca29" prot="public">
          <name>NothingHappened</name>
          <initializer>= 1000</initializer>
          <briefdescription>
<para>Nothing happened, without any error. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a035d5fc06a3d29a19027b3d5a7e8fb6b" prot="public">
          <name>InvalidBaseGeometry</name>
          <briefdescription>
<para>The base geometry on which the operation is done is invalid or empty. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a994f8de96576666445b4801a663aaee0" prot="public">
          <name>InvalidInputGeometryType</name>
          <briefdescription>
<para>The input geometry (ring, part, split line, etc.) has not the correct geometry type. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7aa10c17d26d45bc58f2067ebb5d3253ad" prot="public">
          <name>SelectionIsEmpty</name>
          <briefdescription>
<para>No features were selected. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ad4c4ec16b39b4fbfc7136da440c8f8c2" prot="public">
          <name>SelectionIsGreaterThanOne</name>
          <briefdescription>
<para>More than one features were selected. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a8429e6072d0ab23bad16befe08bc343c" prot="public">
          <name>GeometryEngineError</name>
          <briefdescription>
<para>Geometry engine misses a method implemented or an error occurred in the geometry engine. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ad640895db3eead7a857511e4fa013ea8" prot="public">
          <name>LayerNotEditable</name>
          <briefdescription>
<para>Cannot edit layer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a7b61f09e9e0067c041002ceaa3b8ecc1" prot="public">
          <name>AddPartSelectedGeometryNotFound</name>
          <briefdescription>
<para>The selected geometry cannot be found. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a91cad1fdc950bdb835c863dbb3785252" prot="public">
          <name>AddPartNotMultiGeometry</name>
          <briefdescription>
<para>The source geometry is not multi. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a70d7e3a09828cb8f8b83cf720407ce38" prot="public">
          <name>AddRingNotClosed</name>
          <briefdescription>
<para>The input ring is not closed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7af1ef66205e58f1194a8bbc341f98de2c" prot="public">
          <name>AddRingNotValid</name>
          <briefdescription>
<para>The input ring is not valid. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ac5f7e8303c05524e640642e66f345a29" prot="public">
          <name>AddRingCrossesExistingRings</name>
          <briefdescription>
<para>The input ring crosses existing rings (it is not disjoint) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a455c3ff8134f8acdb7f46d91aa0f2b40" prot="public">
          <name>AddRingNotInExistingFeature</name>
          <briefdescription>
<para>The input ring doesn&apos;t have any existing ring to fit into. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a2379e57dbdbbc5fd7827afdb69ec3da0" prot="public">
          <name>SplitCannotSplitPoint</name>
          <briefdescription>
<para>Cannot split points. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Success or failure of a geometry operation. </para>        </briefdescription>
        <detaileddescription>
<para>This gives details about cause of failure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="116" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="115" bodyend="135"/>
      </memberdef>
      <memberdef kind="enum" id="classQgsGeometry_1aff2cde1dd216fd769479445672b8c734" prot="public" static="no">
        <name>ValidationMethod</name>
        <enumvalue id="classQgsGeometry_1aff2cde1dd216fd769479445672b8c734a1736648ac1a03c6bbe04e0768fcde42f" prot="public">
          <name>ValidatorQgisInternal</name>
          <briefdescription>
<para>Use internal <ref refid="classQgsGeometryValidator" kindref="compound">QgsGeometryValidator</ref> method. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometry_1aff2cde1dd216fd769479445672b8c734a955066d753ba96304dc468af84bbed4f" prot="public">
          <name>ValidatorGeos</name>
          <briefdescription>
<para>Use GEOS validation methods. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Available methods for validating geometries. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1848" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="1847" bodyend="1851"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classQgsGeometry_1a15b1998b7c39a01b9a0c42916de7563b" prot="private" static="no" mutable="no">
        <type><ref refid="structQgsGeometryPrivate" kindref="compound">QgsGeometryPrivate</ref> *</type>
        <definition>QgsGeometryPrivate* QgsGeometry::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2205" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="2205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsGeometry_1a560f1a208cb9ba7f43ea51b7670d7a59" prot="private" static="no" mutable="yes">
        <type>QString</type>
        <definition>QString QgsGeometry::mLastError</definition>
        <argsstring></argsstring>
        <name>mLastError</name>
        <briefdescription>
<para>Last error encountered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2208" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="2208" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classQgsGeometry_1a6af0927389ba39b51c72963640483803" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class QgsInternalGeometryEngine</definition>
        <argsstring></argsstring>
        <name>QgsInternalGeometryEngine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2261" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="2261" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classQgsGeometry_1af636a2f61ba752f4cbc5c4c97705167f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsGeometry::QgsGeometry</definition>
        <argsstring>()</argsstring>
        <name>QgsGeometry</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="138" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1af1affc0be36e99c9c469f6f78e86c45b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsGeometry::QgsGeometry</definition>
        <argsstring>(const QgsGeometry &amp;)</argsstring>
        <name>QgsGeometry</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <defname>other</defname>
        </param>
        <briefdescription>
<para>Copy constructor will prompt a deep copy of the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="141" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a8c31d8d8b2a847c52e794d6db88a5485" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsGeometry::QgsGeometry</definition>
        <argsstring>(QgsAbstractGeometry *geom)</argsstring>
        <name>QgsGeometry</name>
        <param>
          <type><ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> *</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Creates a geometry from an abstract geometry object. </para>        </briefdescription>
        <detaileddescription>
<para>Ownership of geom is transferred. <simplesect kind="since"><para>QGIS 2.10 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="154" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="68" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a61afd02d97f79f2b1de534f33375e928" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsGeometry::QgsGeometry</definition>
        <argsstring>(std::unique_ptr&lt; QgsAbstractGeometry &gt; geom)</argsstring>
        <name>QgsGeometry</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> &gt;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Creates a geometry from an abstract geometry object. </para>        </briefdescription>
        <detaileddescription>
<para>Ownership of geom is transferred. <simplesect kind="note"><para>Not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="161" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aacaf2856a136d270dcf274649439adf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsGeometry::~QgsGeometry</definition>
        <argsstring>()</argsstring>
        <name>~QgsGeometry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="163" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a04fca92ab3389e9d3935778aa61ad3ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::addPart</definition>
        <argsstring>(const QVector&lt; QgsPointXY &gt; &amp;points, QgsWkbTypes::GeometryType geomType=QgsWkbTypes::UnknownGeometry)</argsstring>
        <name>addPart</name>
        <param>
          <type>const QVector&lt; <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9c" kindref="member">QgsWkbTypes::GeometryType</ref></type>
          <declname>geomType</declname>
          <defval><ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9ca18226cfb487dc768c4b74d00c1939ea0" kindref="member">QgsWkbTypes::UnknownGeometry</ref></defval>
        </param>
        <briefdescription>
<para>Adds a new part to a the geometry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points describing part to add </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geomType</parametername>
</parameternamelist>
<parameterdescription>
<para>default geometry type to create if no existing geometry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="747" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="673" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a5f15f50c306e6aa9f11c883ce63bb56d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::addPart</definition>
        <argsstring>(const QgsPointSequence &amp;points, QgsWkbTypes::GeometryType geomType=QgsWkbTypes::UnknownGeometry)</argsstring>
        <name>addPart</name>
        <param>
          <type>const <ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9c" kindref="member">QgsWkbTypes::GeometryType</ref></type>
          <declname>geomType</declname>
          <defval><ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9ca18226cfb487dc768c4b74d00c1939ea0" kindref="member">QgsWkbTypes::UnknownGeometry</ref></defval>
        </param>
        <briefdescription>
<para>Adds a new part to a the geometry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>points describing part to add </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geomType</parametername>
</parameternamelist>
<parameterdescription>
<para>default geometry type to create if no existing geometry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="755" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="680" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a62d4f254f1dac944cedcacfdc3f78238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::addPart</definition>
        <argsstring>(QgsAbstractGeometry *part, QgsWkbTypes::GeometryType geomType=QgsWkbTypes::UnknownGeometry)</argsstring>
        <name>addPart</name>
        <param>
          <type><ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> *</type>
          <declname>part</declname>
        </param>
        <param>
          <type><ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9c" kindref="member">QgsWkbTypes::GeometryType</ref></type>
          <declname>geomType</declname>
          <defval><ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9ca18226cfb487dc768c4b74d00c1939ea0" kindref="member">QgsWkbTypes::UnknownGeometry</ref></defval>
        </param>
        <briefdescription>
<para>Adds a new part to this geometry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>part to add (ownership is transferred) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geomType</parametername>
</parameternamelist>
<parameterdescription>
<para>default geometry type to create if no existing geometry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="763" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="696" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a4fc810e884af27632b8252708fbb829e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::addPart</definition>
        <argsstring>(const QgsGeometry &amp;newPart)</argsstring>
        <name>addPart</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>newPart</declname>
        </param>
        <briefdescription>
<para>Adds a new island polygon to a multipolygon feature. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
<simplesect kind="note"><para>available in python bindings as addPartGeometry </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="770" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="726" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a60cc0406f3917ce2d7a5c8d9294e388f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::addRing</definition>
        <argsstring>(const QVector&lt; QgsPointXY &gt; &amp;ring)</argsstring>
        <name>addRing</name>
        <param>
          <type>const QVector&lt; <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &gt; &amp;</type>
          <declname>ring</declname>
        </param>
        <briefdescription>
<para>Adds a new ring to this geometry. </para>        </briefdescription>
        <detaileddescription>
<para>This makes only sense for polygon and multipolygons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ring</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring to be added </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="732" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="654" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9ea039d914ba290b70bcfdc9631d7b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::addRing</definition>
        <argsstring>(QgsCurve *ring)</argsstring>
        <name>addRing</name>
        <param>
          <type><ref refid="classQgsCurve" kindref="compound">QgsCurve</ref> *</type>
          <declname>ring</declname>
        </param>
        <briefdescription>
<para>Adds a new ring to this geometry. </para>        </briefdescription>
        <detaileddescription>
<para>This makes only sense for polygon and multipolygons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ring</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring to be added </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="739" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="660" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a1699b205d01c365a50ead2d0bf2bbcfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::adjacentVertices</definition>
        <argsstring>(int atVertex, int &amp;beforeVertex, int &amp;afterVertex) const</argsstring>
        <name>adjacentVertices</name>
        <param>
          <type>int</type>
          <declname>atVertex</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>beforeVertex</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>afterVertex</declname>
        </param>
        <briefdescription>
<para>Returns the indexes of the vertices before and after the given vertex index. </para>        </briefdescription>
        <detaileddescription>
<para>This function takes into account the following factors:</para><para><orderedlist>
<listitem><para>If the given vertex index is at the end of a linestring, the adjacent index will be -1 (for &quot;no adjacent vertex&quot;)</para></listitem><listitem><para>If the given vertex index is at the end of a linear ring (such as in a polygon), the adjacent index will take into account the first vertex is equal to the last vertex (and will skip equal vertex positions). </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="617" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="432" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ae4bccd7538d8653844e372f102cbbb7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::angleAtVertex</definition>
        <argsstring>(int vertex) const</argsstring>
        <name>angleAtVertex</name>
        <param>
          <type>int</type>
          <declname>vertex</declname>
        </param>
        <briefdescription>
<para>Returns the bisector angle for this geometry at the specified vertex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>vertex index to calculate bisector angle at </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bisector angle, in radians clockwise from north </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1ae4a4d4529237328bbb57d81300e52eed" kindref="member">interpolateAngle()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="603" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="416" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a99fb82ee78892d4d52f748dbf8880822" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::area</definition>
        <argsstring>() const</argsstring>
        <name>area</name>
        <briefdescription>
<para>Returns the area of the geometry using GEOS. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="362" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1582" bodyend="1603"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a5801ab30650e161147d28a2e7220d3d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QVector&lt; <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &gt;</type>
        <definition>QVector&lt; QgsGeometry &gt; QgsGeometry::asGeometryCollection</definition>
        <argsstring>() const</argsstring>
        <name>asGeometryCollection</name>
        <briefdescription>
<para>Returns contents of the geometry as a list of geometries. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1689" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2298" bodyend="2322"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac86c01b71289527046eda8f1299aa520" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString QgsGeometry::asJson</definition>
        <argsstring>(int precision=17) const</argsstring>
        <name>asJson</name>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>17</defval>
        </param>
        <briefdescription>
<para>Exports the geometry to a GeoJSON string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1413" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1262" bodyend="1269"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a4d72046a766512e47543be6579f0d1e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsgeometry_8h_1a9cfedf77fdc8df5917f214afe763eb0b" kindref="member">QgsMultiPointXY</ref></type>
        <definition>QgsMultiPointXY QgsGeometry::asMultiPoint</definition>
        <argsstring>() const</argsstring>
        <name>asMultiPoint</name>
        <briefdescription>
<para>Returns the contents of the geometry as a multi-point. </para>        </briefdescription>
        <detaileddescription>
<para>Any z or m values present in the geometry will be discarded.</para><para><simplesect kind="warning"><para>If the geometry is not a multi-point type, an empty list will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1564" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1471" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a179006479c6ddd60d493be3234cffedc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsgeometry_8h_1aedb145a58392587c67f1c23d24b7a3de" kindref="member">QgsMultiPolygonXY</ref></type>
        <definition>QgsMultiPolygonXY QgsGeometry::asMultiPolygon</definition>
        <argsstring>() const</argsstring>
        <name>asMultiPolygon</name>
        <briefdescription>
<para>Returns the contents of the geometry as a multi-polygon. </para>        </briefdescription>
        <detaileddescription>
<para>Any z or m values present in the geometry will be discarded. If the geometry is a curved polygon type (such as a MultiSurface), it will be automatically segmentized.</para><para><simplesect kind="warning"><para>If the geometry is not a multi-polygon (or multi-curve polygon) type, an empty list will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1651" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1539" bodyend="1580"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a927b0c648d5d0b56acd2a3924981d509" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsgeometry_8h_1a6451e2e014d2984af57e090a10b1e16f" kindref="member">QgsMultiPolylineXY</ref></type>
        <definition>QgsMultiPolylineXY QgsGeometry::asMultiPolyline</definition>
        <argsstring>() const</argsstring>
        <name>asMultiPolyline</name>
        <briefdescription>
<para>Returns the contents of the geometry as a multi-linestring. </para>        </briefdescription>
        <detaileddescription>
<para>Any z or m values present in the geometry will be discarded. If the geometry is a curved line type (such as a MultiCurve), it will be automatically segmentized.</para><para><simplesect kind="warning"><para>If the geometry is not a multi-linestring (or multi-curve linestring) type, an empty list will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1607" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1495" bodyend="1537"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a77bddd38cd041a4e2988fa8e014c060f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref></type>
        <definition>QgsPointXY QgsGeometry::asPoint</definition>
        <argsstring>() const</argsstring>
        <name>asPoint</name>
        <briefdescription>
<para>Returns the contents of the geometry as a 2-dimensional point. </para>        </briefdescription>
        <detaileddescription>
<para>Any z or m values present in the geometry will be discarded.</para><para><simplesect kind="warning"><para>If the geometry is not a single-point type, a <ref refid="classQgsPoint" kindref="compound">QgsPoint( 0, 0 )</ref> will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1435" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1379" bodyend="1392"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a52924f4027ceac360a42048181f34849" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsgeometry_8h_1a271a798c4388adbfcfda3f8b3ec289df" kindref="member">QgsPolygonXY</ref></type>
        <definition>QgsPolygonXY QgsGeometry::asPolygon</definition>
        <argsstring>() const</argsstring>
        <name>asPolygon</name>
        <briefdescription>
<para>Returns the contents of the geometry as a polygon. </para>        </briefdescription>
        <detaileddescription>
<para>Any z or m values present in the geometry will be discarded. If the geometry is a curved polygon type (such as a CurvePolygon), it will be automatically segmentized.</para><para><simplesect kind="warning"><para>If the geometry is not a single-polygon (or single-curve polygon) type, an empty list will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1521" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1436" bodyend="1469"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a74acd98e1161e7aaee00e6ba521700e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsgeometry_8h_1aa509befb347910684b1a14f10c62cc89" kindref="member">QgsPolylineXY</ref></type>
        <definition>QgsPolylineXY QgsGeometry::asPolyline</definition>
        <argsstring>() const</argsstring>
        <name>asPolyline</name>
        <briefdescription>
<para>Returns the contents of the geometry as a polyline. </para>        </briefdescription>
        <detaileddescription>
<para>Any z or m values present in the geometry will be discarded. If the geometry is a curved line type (such as a CircularString), it will be automatically segmentized.</para><para><simplesect kind="warning"><para>If the geometry is not a single-line (or single-curve) type, an empty list will be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1477" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1394" bodyend="1434"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9569bebc8ef2866605146b86fcf90b69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF QgsGeometry::asQPointF</definition>
        <argsstring>() const</argsstring>
        <name>asQPointF</name>
        <briefdescription>
<para>Returns contents of the geometry as a QPointF if wkbType is WKBPoint, otherwise returns a null QPointF. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 2.7 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1696" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2324" bodyend="2328"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a01d0f7bc8a9f46d5f7d0bf349f72a0de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPolygonF</type>
        <definition>QPolygonF QgsGeometry::asQPolygonF</definition>
        <argsstring>() const</argsstring>
        <name>asQPolygonF</name>
        <briefdescription>
<para>Returns contents of the geometry as a QPolygonF. </para>        </briefdescription>
        <detaileddescription>
<para>If geometry is a linestring, then the result will be an open QPolygonF. If the geometry is a polygon, then the result will be a closed QPolygonF of the geometry&apos;s exterior ring. <simplesect kind="since"><para>QGIS 2.7 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1704" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2330" bodyend="2357"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ae70380313a23d7f652d89a29327035c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QByteArray</type>
        <definition>QByteArray QgsGeometry::asWkb</definition>
        <argsstring>() const</argsstring>
        <name>asWkb</name>
        <briefdescription>
<para>Export the geometry to WKB. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1384" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2293" bodyend="2296"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1af049bb336e5fc77145be4b4eab9bdbba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString QgsGeometry::asWkt</definition>
        <argsstring>(int precision=17) const</argsstring>
        <name>asWkt</name>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>17</defval>
        </param>
        <briefdescription>
<para>Exports the geometry to WKT. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true in case of success and false else </para></simplesect>
<simplesect kind="note"><para>precision parameter added in QGIS 2.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1391" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1253" bodyend="1260"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ae6ff20f0a14c87ef4c3576eb6a7a1b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGeometry::avoidIntersections</definition>
        <argsstring>(const QList&lt; QgsVectorLayer *&gt; &amp;avoidIntersectionsLayers, const QHash&lt; QgsVectorLayer *, QSet&lt; QgsFeatureId &gt; &gt; &amp;ignoreFeatures=(QHash&lt; QgsVectorLayer *, QSet&lt; QgsFeatureId &gt; &gt;()))</argsstring>
        <name>avoidIntersections</name>
        <param>
          <type>const QList&lt; <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *&gt; &amp;</type>
          <declname>avoidIntersectionsLayers</declname>
        </param>
        <param>
          <type>const QHash&lt; <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *, QSet&lt; <ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref> &gt; &gt; &amp;</type>
          <declname>ignoreFeatures</declname>
          <defval>(QHash&lt; <ref refid="classQgsVectorLayer" kindref="compound">QgsVectorLayer</ref> *, QSet&lt; <ref refid="qgsfeatureid_8h_1a857d022277fb1026d921b0ec9bdb7ce5" kindref="member">QgsFeatureId</ref> &gt; &gt;())</defval>
        </param>
        <briefdescription>
<para>Modifies geometry to avoid intersections with the layers specified in project properties. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>avoidIntersectionsLayers</parametername>
</parameternamelist>
<parameterdescription>
<para>list of layers to check for intersections </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignoreFeatures</parametername>
</parameternamelist>
<parameterdescription>
<para>possibility to give a list of features where intersections should be ignored (not available in Python bindings) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success, 1 if geometry is not of polygon type, 2 if avoid intersection would change the geometry type, 3 other error during intersection removal </para></simplesect>
<simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1763" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2389" bodyend="2402"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1adfc04c94b51cdeb55942b699fdd4d564" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref></type>
        <definition>QgsRectangle QgsGeometry::boundingBox</definition>
        <argsstring>() const</argsstring>
        <name>boundingBox</name>
        <briefdescription>
<para>Returns the bounding box of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a9572d5cf0714fa5fc377b36ed71335d8" kindref="member">orientedMinimumBoundingBox()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="856" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="933" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a38524333d988977edd8826e0dbc76ceb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::boundingBoxIntersects</definition>
        <argsstring>(const QgsRectangle &amp;rectangle) const</argsstring>
        <name>boundingBoxIntersects</name>
        <param>
          <type>const <ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref> &amp;</type>
          <declname>rectangle</declname>
        </param>
        <briefdescription>
<para>Returns true if the bounding box of this geometry intersects with a <emphasis>rectangle</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Since this test only considers the bounding box of the geometry, is is very fast to calculate and handles invalid geometries.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1afa1b1c262828a12048178934be302b81" kindref="member">intersects()</ref></para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="968" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1133" bodyend="1141"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac542cdd9aada7f952867b6920e52c38a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::boundingBoxIntersects</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>boundingBoxIntersects</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Returns true if the bounding box of this geometry intersects with the bounding box of another <emphasis>geometry</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Since this test only considers the bounding box of the geometries, is is very fast to calculate and handles invalid geometries.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1afa1b1c262828a12048178934be302b81" kindref="member">intersects()</ref></para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="979" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1143" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ab7302c054a2c5514222b4bd71df71ab8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::buffer</definition>
        <argsstring>(double distance, int segments) const</argsstring>
        <name>buffer</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>int</type>
          <declname>segments</declname>
        </param>
        <briefdescription>
<para>Returns a buffer region around this geometry having the given width and with a specified number of segments used to approximate curves. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsGeometry_1ac323e4531e8b55789b6593e4769cf80b" kindref="member">singleSidedBuffer()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a934e7da694627af2a95944cb327f7b20" kindref="member">taperedBuffer()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1053" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1726" bodyend="1743"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a33731232cc47cd571b8b1f99ada52328" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::buffer</definition>
        <argsstring>(double distance, int segments, EndCapStyle endCapStyle, JoinStyle joinStyle, double miterLimit) const</argsstring>
        <name>buffer</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>int</type>
          <declname>segments</declname>
        </param>
        <param>
          <type><ref refid="classQgsGeometry_1a881ee79f7a97c53826f351265db07801" kindref="member">EndCapStyle</ref></type>
          <declname>endCapStyle</declname>
        </param>
        <param>
          <type><ref refid="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926" kindref="member">JoinStyle</ref></type>
          <declname>joinStyle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>miterLimit</declname>
        </param>
        <briefdescription>
<para>Returns a buffer region around the geometry, with additional style options. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer distance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segments</parametername>
</parameternamelist>
<parameterdescription>
<para>for round joins, number of segments to approximate quarter-circle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCapStyle</parametername>
</parameternamelist>
<parameterdescription>
<para>end cap style </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>joinStyle</parametername>
</parameternamelist>
<parameterdescription>
<para>join style for corners in geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>miterLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>limit on the miter ratio used for very sharp corners (JoinStyleMiter only)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1ac323e4531e8b55789b6593e4769cf80b" kindref="member">singleSidedBuffer()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a934e7da694627af2a95944cb327f7b20" kindref="member">taperedBuffer()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 2.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1067" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1745" bodyend="1762"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9af6067caef47d380d45c32569abc10b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::centroid</definition>
        <argsstring>() const</argsstring>
        <name>centroid</name>
        <briefdescription>
<para>Returns the center of mass of a geometry. </para>        </briefdescription>
        <detaileddescription>
<para>If the input is a NULL geometry, the output will also be a NULL geometry.</para><para>If an error was encountered while creating the result, more information can be retrieved by calling <computeroutput>error()</computeroutput> on the returned geometry.</para><para><simplesect kind="note"><para>for line based geometries, the center point of the line is returned, and for point based geometries, the point itself is returned </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a3975e1ac16832371854703dfe699d5f2" kindref="member">pointOnSurface()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a2142d7d576a91fc8c3775fc10d6a4e26" kindref="member">poleOfInaccessibility()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1184" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1953" bodyend="1975"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a10f637ba711e78a3fbb706c93c88b49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::clipped</definition>
        <argsstring>(const QgsRectangle &amp;rectangle)</argsstring>
        <name>clipped</name>
        <param>
          <type>const <ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref> &amp;</type>
          <declname>rectangle</declname>
        </param>
        <briefdescription>
<para>Clips the geometry using the specified <emphasis>rectangle</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Performs a fast, non-robust intersection between the geometry and a <emphasis>rectangle</emphasis>. The returned geometry may be invalid. <simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1332" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2589" bodyend="2606"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aaa0c911cb37cc33dd024662ec314fdae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::closestSegmentWithContext</definition>
        <argsstring>(const QgsPointXY &amp;point, QgsPointXY &amp;minDistPoint, int &amp;afterVertex, int *leftOf=nullptr, double epsilon=DEFAULT_SEGMENT_EPSILON) const</argsstring>
        <name>closestSegmentWithContext</name>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>minDistPoint</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>afterVertex</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>leftOf</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval><ref refid="qgis_8h_1aaa5bc30d33a49f3a38e8a5d7664f870c" kindref="member">DEFAULT_SEGMENT_EPSILON</ref></defval>
        </param>
        <briefdescription>
<para>Searches for the closest segment of geometry to the given point. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the point for search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minDistPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the nearest point on the segment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>afterVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives index of the vertex after the closest segment. The vertex before the closest segment is always afterVertex - 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leftOf</parametername>
</parameternamelist>
<parameterdescription>
<para>Out: Returns if the point lies on the left of left side of the geometry ( &lt; 0 means left, &gt; 0 means right, 0 indicates that the test was unsuccessful, e.g. for a point exactly on the line) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>epsilon for segment snapping </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The squared Cartesian distance is also returned in sqrDist, negative number on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="725" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="630" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a1ef580601d1af466c978b51013fceebc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref></type>
        <definition>QgsPointXY QgsGeometry::closestVertex</definition>
        <argsstring>(const QgsPointXY &amp;point, int &amp;atVertex, int &amp;beforeVertex, int &amp;afterVertex, double &amp;sqrDist) const</argsstring>
        <name>closestVertex</name>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>atVertex</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>beforeVertex</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>afterVertex</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>sqrDist</declname>
        </param>
        <briefdescription>
<para>Returns the vertex closest to the given point, the corresponding vertex index, squared distance snap point / target point and the indices of the vertices before and after the closest vertex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>point to search for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to the vertex index of the closest found vertex </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beforeVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to the vertex index of the previous vertex from the closest one. Will be set to -1 if not present. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>afterVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to the vertex index of the next vertex after the closest one. Will be set to -1 if not present. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sqrDist</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to the square distance between the closest vertex and the specified point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>closest point in geometry. If not found (empty geometry), returns null point nad sqrDist is negative. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="586" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="372" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ae883933fcb91a8338335f545e4e7241e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::closestVertexWithContext</definition>
        <argsstring>(const QgsPointXY &amp;point, int &amp;atVertex) const</argsstring>
        <name>closestVertexWithContext</name>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>atVertex</declname>
        </param>
        <briefdescription>
<para>Searches for the closest vertex in this geometry to the given point. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifiest the point for search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives index of the closest vertex </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The squared Cartesian distance is also returned in sqrDist, negative number on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="712" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="614" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a5770b01aac776ee2ba56cc48c708231b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::combine</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>combine</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Returns a geometry representing all the points in this geometry and other (a union geometry operation). </para>        </briefdescription>
        <detaileddescription>
<para>If the input is a NULL geometry, the output will also be a NULL geometry.</para><para>If an error was encountered while creating the result, more information can be retrieved by calling <computeroutput>error()</computeroutput> on the returned geometry.</para><para><simplesect kind="note"><para>this operation is not called union since its a reserved word in C++. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1345" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2207" bodyend="2224"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a2b424b8d12e145f9d9b4f51ced93ebf5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsAbstractGeometry_1_1const__part__iterator" kindref="compound">QgsAbstractGeometry::const_part_iterator</ref></type>
        <definition>QgsAbstractGeometry::const_part_iterator QgsGeometry::const_parts_begin</definition>
        <argsstring>() const</argsstring>
        <name>const_parts_begin</name>
        <briefdescription>
<para>Returns STL-style const iterator pointing to the first part of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>This method avoids a detach and is more efficient then <ref refid="classQgsGeometry_1a74f9e88f75e729a2f6af1bef7894ba4a" kindref="member">parts_begin()</ref> for read only iteration.</para><para><simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="450" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1695" bodyend="1700"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1abe4866d9aeae238ae2c1587c44ab9a3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsAbstractGeometry_1_1const__part__iterator" kindref="compound">QgsAbstractGeometry::const_part_iterator</ref></type>
        <definition>QgsAbstractGeometry::const_part_iterator QgsGeometry::const_parts_end</definition>
        <argsstring>() const</argsstring>
        <name>const_parts_end</name>
        <briefdescription>
<para>Returns STL-style iterator pointing to the imaginary part after the last part of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>This method avoids a detach and is more efficient then <ref refid="classQgsGeometry_1ac181da894563701f014e944c1a200e14" kindref="member">parts_end()</ref> for read only iteration.</para><para><simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="460" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1702" bodyend="1707"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a6d80b6a9b799d6be0a3dd1d4f932db1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> *</type>
        <definition>const QgsAbstractGeometry * QgsGeometry::constGet</definition>
        <argsstring>() const</argsstring>
        <name>constGet</name>
        <briefdescription>
<para>Returns a non-modifiable (const) reference to the underlying abstract geometry primitive. </para>        </briefdescription>
        <detaileddescription>
<para>This is much faster then calling the non-const <ref refid="classQgsGeometry_1a6418c395776ccc5a13466a5d28039225" kindref="member">get()</ref> method.</para><para><simplesect kind="note"><para>In QGIS 2.x this method was named geometry().</para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1aa9309455d08598378f06fa758e64cd3e" kindref="member">set()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a6418c395776ccc5a13466a5d28039225" kindref="member">get()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="176" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1add3d0333c571da4fc557a36dce0a863e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometryConstPartIterator" kindref="compound">QgsGeometryConstPartIterator</ref></type>
        <definition>QgsGeometryConstPartIterator QgsGeometry::constParts</definition>
        <argsstring>() const</argsstring>
        <name>constParts</name>
        <briefdescription>
<para>Returns Java-style iterator for traversal of parts of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>This iterator returns read-only references to parts and cannot be used to modify the parts.</para><para>Unlike <ref refid="classQgsGeometry_1aa610ca7d3b15813d634ca3ea7910950b" kindref="member">parts()</ref>, this method does not force a detach and is more efficient if read-only iteration only is required.</para><para><itemizedlist>
<listitem><para>Example: <programlisting><codeline><highlight class="comment">#<sp/>print<sp/>the<sp/>WKT<sp/>representation<sp/>of<sp/>each<sp/>part<sp/>in<sp/>a<sp/>multi-point<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">geometry<sp/>=<sp/><ref refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" kindref="member">QgsGeometry.fromWkt</ref>(<sp/></highlight><highlight class="stringliteral">&apos;MultiPoint(<sp/>0<sp/>0,<sp/>1<sp/>1,<sp/>2<sp/>2)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>part<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geometry.parts():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(part.asWkt())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>single<sp/>part<sp/>geometries<sp/>only<sp/>have<sp/>one<sp/>part<sp/>-<sp/>this<sp/>loop<sp/>will<sp/>iterate<sp/>once<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">geometry<sp/>=<sp/><ref refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" kindref="member">QgsGeometry.fromWkt</ref>(<sp/></highlight><highlight class="stringliteral">&apos;LineString(<sp/>0<sp/>0,<sp/>10<sp/>10<sp/>)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>part<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geometry.parts():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(part.asWkt())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>part<sp/>iteration<sp/>can<sp/>also<sp/>be<sp/>combined<sp/>with<sp/>vertex<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">geometry<sp/>=<sp/><ref refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" kindref="member">QgsGeometry.fromWkt</ref>(<sp/></highlight><highlight class="stringliteral">&apos;MultiPolygon(((<sp/>0<sp/>0,<sp/>0<sp/>10,<sp/>10<sp/>10,<sp/>10<sp/>0,<sp/>0<sp/>0<sp/>),(<sp/>5<sp/>5,<sp/>5<sp/>6,<sp/>6<sp/>6,<sp/>6<sp/>5,<sp/>5<sp/>5)),((20<sp/>2,<sp/>22<sp/>2,<sp/>22<sp/>4,<sp/>20<sp/>4,<sp/>20<sp/>2)))&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>part<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geometry.parts():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>part.vertices():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(v.x(),<sp/>v.y())</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1aa610ca7d3b15813d634ca3ea7910950b" kindref="member">parts()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a1e45b50fdc64bbc942398eeed7bdc6ca" kindref="member">vertices()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="532" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1718" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a7461d3a2c4e9d62256e58e7d15446f90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::contains</definition>
        <argsstring>(const QgsPointXY *p) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Tests for containment of a point (uses GEOS) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="982" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1153" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ada1f739547c775b266f8728c426176ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::contains</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Tests for if geometry is contained in another (uses GEOS) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="988" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1166" bodyend="1176"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aec7c20eac8379be9ad17fc7fcb54575c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::convertGeometryCollectionToSubclass</definition>
        <argsstring>(QgsWkbTypes::GeometryType geomType)</argsstring>
        <name>convertGeometryCollectionToSubclass</name>
        <param>
          <type><ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9c" kindref="member">QgsWkbTypes::GeometryType</ref></type>
          <declname>geomType</declname>
        </param>
        <briefdescription>
<para>Converts geometry collection to a the desired geometry type subclass (multi-point, multi-linestring or multi-polygon). </para>        </briefdescription>
        <detaileddescription>
<para>Child geometries of different type are filtered out. Does nothing the geometry is not a geometry collection. May leave the geometry empty if none of the child geometries match the desired type.</para><para><simplesect kind="return"><para>true in case of success and false else </para></simplesect>
<simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1751" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1343" bodyend="1376"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac841fa2969e960ef7f6e94769d574e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::convertToMultiType</definition>
        <argsstring>()</argsstring>
        <name>convertToMultiType</name>
        <briefdescription>
<para>Converts single type geometry into multitype geometry e.g. </para>        </briefdescription>
        <detaileddescription>
<para>a polygon into a multipolygon geometry with one polygon If it is already a multipart geometry, it will return true and not change the geometry.</para><para><simplesect kind="return"><para>true in case of success and false else </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1729" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1289" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a81e44ab5a928b19ba7141b27e021fb65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::convertToSingleType</definition>
        <argsstring>()</argsstring>
        <name>convertToSingleType</name>
        <briefdescription>
<para>Converts multi type geometry into single type geometry e.g. </para>        </briefdescription>
        <detaileddescription>
<para>a multipolygon into a polygon geometry. Only the first part of the multi geometry will be retained. If it is already a single part geometry, it will return true and not change the geometry.</para><para><simplesect kind="return"><para>true in case of success and false else </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1740" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1321" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a96eb87e99cb73c50f35537a1a06d0a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::convertToStraightSegment</definition>
        <argsstring>(double tolerance=M_PI/180., QgsAbstractGeometry::SegmentationToleranceType toleranceType=QgsAbstractGeometry::MaximumAngle)</argsstring>
        <name>convertToStraightSegment</name>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>M_PI/180.</defval>
        </param>
        <param>
          <type><ref refid="classQgsAbstractGeometry_1a0ad4bdf6c9a37daa3be14cb41fc38d96" kindref="member">QgsAbstractGeometry::SegmentationToleranceType</ref></type>
          <declname>toleranceType</declname>
          <defval><ref refid="classQgsAbstractGeometry_1a0ad4bdf6c9a37daa3be14cb41fc38d96ae179641e9ac6aafe1005da4b6f7c7618" kindref="member">QgsAbstractGeometry::MaximumAngle</ref></defval>
        </param>
        <briefdescription>
<para>Converts the geometry to straight line segments, if it is a curved geometry type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>segmentation tolerance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toleranceType</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum segmentation angle or maximum difference between approximation and curve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a8b2dd31d4ef71bf07e29e9f76e20c8c5" kindref="member">requiresConversionToStraightSegments</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 2.10 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1885" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2535" bodyend="2544"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a74a3aaabd6fd7117669a57ac84a6774b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::convertToType</definition>
        <argsstring>(QgsWkbTypes::GeometryType destType, bool destMultipart=false) const</argsstring>
        <name>convertToType</name>
        <param>
          <type><ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9c" kindref="member">QgsWkbTypes::GeometryType</ref></type>
          <declname>destType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>destMultipart</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Try to convert the geometry to the requested type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destType</parametername>
</parameternamelist>
<parameterdescription>
<para>the geometry type to be converted to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destMultipart</parametername>
</parameternamelist>
<parameterdescription>
<para>determines if the output geometry will be multipart or not </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the converted geometry or nullptr if the conversion fails. </para></simplesect>
<simplesect kind="since"><para>QGIS 2.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1422" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1271" bodyend="1287"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aaabf49319715c48c175a0391959ea27b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::convexHull</definition>
        <argsstring>() const</argsstring>
        <name>convexHull</name>
        <briefdescription>
<para>Returns the smallest convex polygon that contains all the points in the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>If the input is a NULL geometry, the output will also be a NULL geometry.</para><para>If an error was encountered while creating the result, more information can be retrieved by calling <computeroutput>error()</computeroutput> on the returned geometry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1223" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1999" bodyend="2015"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9c606981232ba9b8b99bf827123b017e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::crosses</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>crosses</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Test for if geometry crosses another (uses GEOS) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1018" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1241" bodyend="1251"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ae8e3e97aec07229669d75739b18e61da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::delaunayTriangulation</definition>
        <argsstring>(double tolerance=0.0, bool edgesOnly=false) const</argsstring>
        <name>delaunayTriangulation</name>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>edgesOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns the Delaunay triangulation for the vertices of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>tolerance</emphasis> parameter specifies an optional snapping tolerance which can be used to improve the robustness of the triangulation. If <emphasis>edgesOnly</emphasis> is true than line string boundary geometries will be returned instead of polygons. An empty geometry will be returned if the diagram could not be calculated. <simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1251" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2031" bodyend="2043"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1afc5b3cac56cd03b4e69c56137d611418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::deletePart</definition>
        <argsstring>(int partNum)</argsstring>
        <name>deletePart</name>
        <param>
          <type>int</type>
          <declname>partNum</declname>
        </param>
        <briefdescription>
<para>Deletes part identified by the part number. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true on success </para></simplesect>
<simplesect kind="since"><para>QGIS 1.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1719" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2371" bodyend="2387"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a0710a6c5b594a97f9a499d26af7a0268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::deleteRing</definition>
        <argsstring>(int ringNum, int partNum=0)</argsstring>
        <name>deleteRing</name>
        <param>
          <type>int</type>
          <declname>ringNum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>partNum</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Deletes a ring in polygon or multipolygon. </para>        </briefdescription>
        <detaileddescription>
<para>Ring 0 is outer ring and can&apos;t be deleted. <simplesect kind="return"><para>true on success </para></simplesect>
<simplesect kind="since"><para>QGIS 1.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1712" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2359" bodyend="2369"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a1b5ebcb56dc5e7b2f4c591eb16545c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::deleteVertex</definition>
        <argsstring>(int atVertex)</argsstring>
        <name>deleteVertex</name>
        <param>
          <type>int</type>
          <declname>atVertex</declname>
        </param>
        <briefdescription>
<para>Deletes the vertex at the given position number and item (first number is index 0) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>false if atVertex does not correspond to a valid vertex on this geometry (including if this geometry is a Point), or if the number of remaining vertices in the linestring would be less than two. It is up to the caller to distinguish between these error conditions. (Or maybe we add another method to this object to help make the distinction?) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="676" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="489" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a0cf7569f8748536ccacac0817f877b2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::densifyByCount</definition>
        <argsstring>(int extraNodesPerSegment) const</argsstring>
        <name>densifyByCount</name>
        <param>
          <type>int</type>
          <declname>extraNodesPerSegment</declname>
        </param>
        <briefdescription>
<para>Returns a copy of the geometry which has been densified by adding the specified number of extra nodes within each segment of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>If the geometry has z or m values present then these will be linearly interpolated at the added nodes. Curved geometry types are automatically segmentized by this routine. <simplesect kind="see"><para><ref refid="classQgsGeometry_1a1f85fe89ed10678d5782c8cc7622dd45" kindref="member">densifyByDistance()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1153" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1939" bodyend="1944"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a1f85fe89ed10678d5782c8cc7622dd45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::densifyByDistance</definition>
        <argsstring>(double distance) const</argsstring>
        <name>densifyByDistance</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Densifies the geometry by adding regularly placed extra nodes inside each segment so that the maximum distance between any two nodes does not exceed the specified <emphasis>distance</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>E.g. specifying a distance 3 would cause the segment [0 0] -&gt; [10 0] to be converted to [0 0] -&gt; [2.5 0] -&gt; [5 0] -&gt; [7.5 0] -&gt; [10 0], since 3 extra nodes are required on the segment and spacing these at 2.5 increments allows them to be evenly spaced over the segment. If the geometry has z or m values present then these will be linearly interpolated at the added nodes. Curved geometry types are automatically segmentized by this routine. <simplesect kind="see"><para><ref refid="classQgsGeometry_1a0cf7569f8748536ccacac0817f877b2b" kindref="member">densifyByCount()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1169" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1946" bodyend="1951"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a2ba95f8ade7d34ce506f3929342d0611" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::difference</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>difference</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Returns a geometry representing the points making up this geometry that do not make up other. </para>        </briefdescription>
        <detaileddescription>
<para>If the input is a NULL geometry, the output will also be a NULL geometry.</para><para>If an error was encountered while creating the result, more information can be retrieved by calling <computeroutput>error()</computeroutput> on the returned geometry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1365" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2246" bodyend="2264"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a55266c2687f72e654da1cb696a5cab2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::disjoint</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>disjoint</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Tests for if geometry is disjoint of another (uses GEOS) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="994" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1178" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a58ac1ca0787f2091121a3ce07fb4e495" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::distance</definition>
        <argsstring>(const QgsGeometry &amp;geom) const</argsstring>
        <name>distance</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Returns the minimum distance between this geometry and another geometry, using GEOS. </para>        </briefdescription>
        <detaileddescription>
<para>Will return a negative value if a geometry is missing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>geometry to find minimum distance to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="376" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1616" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1abc1a159d6a2c78f5b1c154997dfe428c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::distanceToVertex</definition>
        <argsstring>(int vertex) const</argsstring>
        <name>distanceToVertex</name>
        <param>
          <type>int</type>
          <declname>vertex</declname>
        </param>
        <briefdescription>
<para>Returns the distance along this geometry from its first vertex to the specified vertex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex</parametername>
</parameternamelist>
<parameterdescription>
<para>vertex index to calculate distance to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>distance to vertex (following geometry), or -1 for invalid vertex numbers </para></simplesect>
<simplesect kind="since"><para>QGIS 2.16 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="594" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="400" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aeabde30788b59041cc15a7fc5665cb1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::draw</definition>
        <argsstring>(QPainter &amp;p) const</argsstring>
        <name>draw</name>
        <param>
          <type>QPainter &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Draws the geometry onto a QPainter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>destination QPainter </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>QGIS 2.10 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1907" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2608" bodyend="2614"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a7c3069e744dbca4c9605d78454d01841" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::equals</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>equals</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Test if this geometry is exactly equal to another <emphasis>geometry</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This is a strict equality check, where the underlying geometries must have exactly the same type, component vertices and vertex order.</para><para>Calling this method is dramatically faster than the topological equality test performed by <ref refid="classQgsGeometry_1af79599916272c429fa98f6d8f2ac0de6" kindref="member">isGeosEqual()</ref>.</para><para><simplesect kind="note"><para>Comparing two null geometries will return false.</para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1af79599916272c429fa98f6d8f2ac0de6" kindref="member">isGeosEqual()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="322" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1190" bodyend="1203"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aceb42dac30112f801e729d4ef922d8bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::extendLine</definition>
        <argsstring>(double startDistance, double endDistance) const</argsstring>
        <name>extendLine</name>
        <param>
          <type>double</type>
          <declname>startDistance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>endDistance</declname>
        </param>
        <briefdescription>
<para>Extends a (multi)line geometry by extrapolating out the start or end of the line by a specified distance. </para>        </briefdescription>
        <detaileddescription>
<para>Lines are extended using the bearing of the first or last segment in the line. <simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1139" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1880" bodyend="1918"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a5a3d3d637a12eee38117ac4463651b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::extrude</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>extrude</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Returns an extruded version of this geometry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1378" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2286" bodyend="2291"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a7bb5e7303e64b1f481b549720a710755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::filterVertices</definition>
        <argsstring>(const std::function&lt; bool(const QgsPoint &amp;) &gt; &amp;filter)</argsstring>
        <name>filterVertices</name>
        <param>
          <type>const std::function&lt; bool(const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;) &gt; &amp;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
<para>Filters the vertices from the geometry in place, removing any which do not return true for the <emphasis>filter</emphasis> function check. </para>        </briefdescription>
        <detaileddescription>
<para>Has no effect when called on a single point geometry.</para><para>Depending on the <emphasis>filter</emphasis> used, this may result in an invalid geometry.</para><para><simplesect kind="note"><para>Not available in Python bindings </para></simplesect>
<simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1952" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2743" bodyend="2751"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a77b081a049d8a78811867da10104fa10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::forceRHR</definition>
        <argsstring>() const</argsstring>
        <name>forceRHR</name>
        <briefdescription>
<para>Forces geometries to respect the Right-Hand-Rule, in which the area that is bounded by a polygon is to the right of the boundary. </para>        </briefdescription>
        <detaileddescription>
<para>In particular, the exterior ring is oriented in a clockwise direction and the interior rings in a counter-clockwise direction.</para><para><simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1793" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2418" bodyend="2457"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ab0e572d06fef008c619651f5a55944f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::fromWkb</definition>
        <argsstring>(unsigned char *wkb, int length)</argsstring>
        <name>fromWkb</name>
        <param>
          <type>unsigned char *</type>
          <declname>wkb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the geometry, feeding in the buffer containing OGC Well-Known Binary and the buffer&apos;s length. </para>        </briefdescription>
        <detaileddescription>
<para>This class will take ownership of the buffer. <simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="277" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="318" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a706f2674d245eefdc0b95038a54ec304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::fromWkb</definition>
        <argsstring>(const QByteArray &amp;wkb)</argsstring>
        <name>fromWkb</name>
        <param>
          <type>const QByteArray &amp;</type>
          <declname>wkb</declname>
        </param>
        <briefdescription>
<para>Set the geometry, feeding in the buffer containing OGC Well-Known Binary. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="283" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="325" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a6418c395776ccc5a13466a5d28039225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> *</type>
        <definition>QgsAbstractGeometry * QgsGeometry::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>Returns a modifiable (non-const) reference to the underlying abstract geometry primitive. </para>        </briefdescription>
        <detaileddescription>
<para>This method can be slow to call, as it may trigger a detachment of the geometry and a deep copy. Where possible, use <ref refid="classQgsGeometry_1a6d80b6a9b799d6be0a3dd1d4f932db1b" kindref="member">constGet()</ref> instead.</para><para><simplesect kind="note"><para>In QGIS 2.x this method was named geometry().</para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a6d80b6a9b799d6be0a3dd1d4f932db1b" kindref="member">constGet()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1aa9309455d08598378f06fa758e64cd3e" kindref="member">set()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="190" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="129" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9edd5322a99feb806445eb3892901c50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::hausdorffDistance</definition>
        <argsstring>(const QgsGeometry &amp;geom) const</argsstring>
        <name>hausdorffDistance</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Returns the Hausdorff distance between this geometry and <emphasis>geom</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This is basically a measure of how similar or dissimilar 2 geometries are.</para><para>This algorithm is an approximation to the standard Hausdorff distance. This approximation is exact or close enough for a large subset of useful cases. Examples of these are:</para><para><itemizedlist>
<listitem><para>computing distance between Linestrings that are roughly parallel to each other, and roughly equal in length. This occurs in matching linear networks.</para></listitem><listitem><para>Testing similarity of geometries.</para></listitem></itemizedlist>
</para><para>If the default approximate provided by this method is insufficient, use <ref refid="classQgsGeometry_1a09ac3dc35ef4a1241d2dba23dcbf678b" kindref="member">hausdorffDistanceDensify()</ref> instead.</para><para>In case of error -1 will be returned.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a09ac3dc35ef4a1241d2dba23dcbf678b" kindref="member">hausdorffDistanceDensify()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="551" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1634" bodyend="1644"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a09ac3dc35ef4a1241d2dba23dcbf678b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::hausdorffDistanceDensify</definition>
        <argsstring>(const QgsGeometry &amp;geom, double densifyFraction) const</argsstring>
        <name>hausdorffDistanceDensify</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>double</type>
          <declname>densifyFraction</declname>
        </param>
        <briefdescription>
<para>Returns the Hausdorff distance between this geometry and <emphasis>geom</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This is basically a measure of how similar or dissimilar 2 geometries are.</para><para>This function accepts a <emphasis>densifyFraction</emphasis> argument. The function performs a segment densification before computing the discrete Hausdorff distance. The <emphasis>densifyFraction</emphasis> parameter sets the fraction by which to densify each segment. Each segment will be split into a number of equal-length subsegments, whose fraction of the total length is closest to the given fraction.</para><para>This method can be used when the default approximation provided by <ref refid="classQgsGeometry_1a9edd5322a99feb806445eb3892901c50" kindref="member">hausdorffDistance()</ref> is not sufficient. Decreasing the <emphasis>densifyFraction</emphasis> parameter will make the distance returned approach the true Hausdorff distance for the geometries.</para><para>In case of error -1 will be returned.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a9edd5322a99feb806445eb3892901c50" kindref="member">hausdorffDistance()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="571" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1646" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a7ffc1e0cdf9ed8b51048bdc7c5da605b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::insertVertex</definition>
        <argsstring>(double x, double y, int beforeVertex)</argsstring>
        <name>insertVertex</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beforeVertex</declname>
        </param>
        <briefdescription>
<para>Insert a new vertex before the given vertex index, ring and item (first number is index 0) If the requested vertex number (beforeVertex.back()) is greater than the last actual vertex on the requested ring and item, it is assumed that the vertex is to be appended instead of inserted. </para>        </briefdescription>
        <detaileddescription>
<para>Returns false if atVertex does not correspond to a valid vertex on this geometry (including if this geometry is a Point). It is up to the caller to distinguish between these error conditions. (Or maybe we add another method to this object to help make the distinction?) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="631" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="522" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a53a30c84cfdf81aaf06fe33626aa14e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::insertVertex</definition>
        <argsstring>(const QgsPoint &amp;point, int beforeVertex)</argsstring>
        <name>insertVertex</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>int</type>
          <declname>beforeVertex</declname>
        </param>
        <briefdescription>
<para>Insert a new vertex before the given vertex index, ring and item (first number is index 0) If the requested vertex number (beforeVertex.back()) is greater than the last actual vertex on the requested ring and item, it is assumed that the vertex is to be appended instead of inserted. </para>        </briefdescription>
        <detaileddescription>
<para>Returns false if atVertex does not correspond to a valid vertex on this geometry (including if this geometry is a Point). It is up to the caller to distinguish between these error conditions. (Or maybe we add another method to this object to help make the distinction?) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="645" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="548" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a58b57cc606fabaf4e26c97092cba345b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::interpolate</definition>
        <argsstring>(double distance) const</argsstring>
        <name>interpolate</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Returns an interpolated point on the geometry at the specified <emphasis>distance</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If the original geometry is a polygon type, the boundary of the polygon will be used during interpolation. If the original geometry is a point type, a null geometry will be returned.</para><para>If z or m values are present, the output z and m will be interpolated using the existing vertices&apos; z or m values.</para><para>If the input is a NULL geometry, the output will also be a NULL geometry.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a11af1b509c2948401e0bceb005f673ca" kindref="member">lineLocatePoint()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 2.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1289" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2072" bodyend="2110"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ae4a4d4529237328bbb57d81300e52eed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::interpolateAngle</definition>
        <argsstring>(double distance) const</argsstring>
        <name>interpolateAngle</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Returns the angle parallel to the linestring or polygon boundary at the specified distance along the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>Angles are in radians, clockwise from north. If the distance coincides precisely at a node then the average angle from the segment either side of the node is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>distance along geometry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1ae4bccd7538d8653844e372f102cbbb7a" kindref="member">angleAtVertex()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1313" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2131" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a6ca0f918c7c67aff8ac9e0094707c99e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::intersection</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>intersection</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Returns a geometry representing the points shared by this geometry and other. </para>        </briefdescription>
        <detaileddescription>
<para>If the input is a NULL geometry, the output will also be a NULL geometry.</para><para>If an error was encountered while creating the result, more information can be retrieved by calling <computeroutput>error()</computeroutput> on the returned geometry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1323" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2185" bodyend="2205"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1afa1b1c262828a12048178934be302b81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::intersects</definition>
        <argsstring>(const QgsRectangle &amp;rectangle) const</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref> &amp;</type>
          <declname>rectangle</declname>
        </param>
        <briefdescription>
<para>Returns true if this geometry exactly intersects with a <emphasis>rectangle</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This test is exact and can be slow for complex geometries.</para><para>The GEOS library is used to perform the intersection test. Geometries which are not valid may return incorrect results.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a38524333d988977edd8826e0dbc76ceb" kindref="member">boundingBoxIntersects()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="946" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1115" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1adef699cedf47b6a337f82a62c7f04877" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::intersects</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Returns true if this geometry exactly intersects with another <emphasis>geometry</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>This test is exact and can be slow for complex geometries.</para><para>The GEOS library is used to perform the intersection test. Geometries which are not valid may return incorrect results.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a38524333d988977edd8826e0dbc76ceb" kindref="member">boundingBoxIntersects()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="957" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1121" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1abac9728296e99ce814a081a55e39c385" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>Returns true if the geometry is empty (eg a linestring with no vertices, or a collection with no geometries). </para>        </briefdescription>
        <detaileddescription>
<para>A null geometry will always return true for <ref refid="classQgsGeometry_1abac9728296e99ce814a081a55e39c385" kindref="member">isEmpty()</ref>. <simplesect kind="see"><para><ref refid="classQgsGeometry_1ac895eb59a21eab8d9337e0b5c866a8c3" kindref="member">isNull()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="303" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="353" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1af79599916272c429fa98f6d8f2ac0de6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::isGeosEqual</definition>
        <argsstring>(const QgsGeometry &amp;) const</argsstring>
        <name>isGeosEqual</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <defname>g</defname>
        </param>
        <briefdescription>
<para>Compares the geometry with another geometry using GEOS. </para>        </briefdescription>
        <detaileddescription>
<para>This method performs a slow, topological check, where geometries are considered equal if all of the their component edges overlap. E.g. lines with the same vertex locations but opposite direction will be considered equal by this method.</para><para>Consider using the much faster, stricter equality test performed by <ref refid="classQgsGeometry_1a7c3069e744dbca4c9605d78454d01841" kindref="member">equals()</ref> instead.</para><para><simplesect kind="note"><para>Comparing two null geometries will return false.</para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a7c3069e744dbca4c9605d78454d01841" kindref="member">equals()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="340" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2493" bodyend="2503"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a13546b5769a787996a61276e1939f38b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::isGeosValid</definition>
        <argsstring>() const</argsstring>
        <name>isGeosValid</name>
        <briefdescription>
<para>Checks validity of the geometry using GEOS. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="346" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2465" bodyend="2481"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9a8893b066d73918f8fcfe95d439b652" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::isMultipart</definition>
        <argsstring>() const</argsstring>
        <name>isMultipart</name>
        <briefdescription>
<para>Returns true if WKB of the geometry is of WKBMulti* type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="306" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="363" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac895eb59a21eab8d9337e0b5c866a8c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Q_INVOKABLE bool</type>
        <definition>bool QgsGeometry::isNull</definition>
        <argsstring>() const</argsstring>
        <name>isNull</name>
        <briefdescription>
<para>Returns true if the geometry is null (ie, contains no underlying geometry accessible via geometry() ). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a6418c395776ccc5a13466a5d28039225" kindref="member">get</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1abac9728296e99ce814a081a55e39c385" kindref="member">isEmpty()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 2.10 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="210" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a8c29dc5c58eb3c5e7277a62fcda3e61d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::isSimple</definition>
        <argsstring>() const</argsstring>
        <name>isSimple</name>
        <briefdescription>
<para>Determines whether the geometry is simple (according to OGC definition), i.e. </para>        </briefdescription>
        <detaileddescription>
<para>it has no anomalous geometric points, such as self-intersection or self-tangency. Uses GEOS library for the test. <simplesect kind="note"><para>This is useful mainly for linestrings and linear rings. Polygons are simple by definition, for checking anomalies in polygon geometries one can use <ref refid="classQgsGeometry_1a13546b5769a787996a61276e1939f38b" kindref="member">isGeosValid()</ref>. </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="356" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2483" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a462cf6e8c1ade59fccc784f532ffdb73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString QgsGeometry::lastError</definition>
        <argsstring>() const</argsstring>
        <name>lastError</name>
        <briefdescription>
<para>Returns an error string referring to the last error encountered either when this geometry was created or when an operation was performed on the geometry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1941" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2738" bodyend="2741"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a1c40b0c5919ba64f8ffef6b257d6b758" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <briefdescription>
<para>Returns the length of geometry using GEOS. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="368" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1605" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a11af1b509c2948401e0bceb005f673ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::lineLocatePoint</definition>
        <argsstring>(const QgsGeometry &amp;point) const</argsstring>
        <name>lineLocatePoint</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns a distance representing the location along this linestring of the closest point on this linestring geometry to the specified point. </para>        </briefdescription>
        <detaileddescription>
<para>Ie, the returned value indicates how far along this linestring you need to traverse to get to the closest location where this linestring comes to the specified point. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>point to seek proximity to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>distance along line, or -1 on error </para></simplesect>
<simplesect kind="note"><para>only valid for linestring geometries </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a58b57cc606fabaf4e26c97092cba345b" kindref="member">interpolate()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1302" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2112" bodyend="2129"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a4137e7e7d97ba56b1e268678784de82b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::makeDifference</definition>
        <argsstring>(const QgsGeometry &amp;other) const</argsstring>
        <name>makeDifference</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the geometry formed by modifying this geometry such that it does not intersect the other geometry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>geometry that should not be intersect </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>difference geometry, or empty geometry if difference could not be calculated </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="850" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="912" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a14769ef8e2e912ca9638346e61746303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGeometry::makeDifferenceInPlace</definition>
        <argsstring>(const QgsGeometry &amp;other)</argsstring>
        <name>makeDifferenceInPlace</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Changes this geometry such that it does not intersect the other geometry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>geometry that should not be intersect </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Not available in Python </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="841" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="892" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9e91518c5ea16bc24ff60e6ba8d7ae66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::makeValid</definition>
        <argsstring>() const</argsstring>
        <name>makeValid</name>
        <briefdescription>
<para>Attempts to make an invalid geometry valid without losing vertices. </para>        </briefdescription>
        <detaileddescription>
<para>Already-valid geometries are returned without further intervention. In case of full or partial dimensional collapses, the output geometry may be a collection of lower-to-equal dimension geometries or a geometry of lower dimension. Single polygons may become multi-geometries in case of self-intersections. It preserves Z values, but M values will be dropped.</para><para>If an error was encountered during the process, more information can be retrieved by calling <computeroutput>error()</computeroutput> on the returned geometry.</para><para><simplesect kind="return"><para>new valid <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> or null geometry on error</para></simplesect>
<simplesect kind="note"><para>Ported from PostGIS ST_MakeValid() and it should return equivalent results.</para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1784" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2405" bodyend="2416"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a5cb6f1a518f2e40773b5d01dcadc75f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::mapToPixel</definition>
        <argsstring>(const QgsMapToPixel &amp;mtp)</argsstring>
        <name>mapToPixel</name>
        <param>
          <type>const <ref refid="classQgsMapToPixel" kindref="compound">QgsMapToPixel</ref> &amp;</type>
          <declname>mtp</declname>
        </param>
        <briefdescription>
<para>Transforms the geometry from map units to pixels in place. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtp</parametername>
</parameternamelist>
<parameterdescription>
<para>map to pixel transform </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>QGIS 2.10 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1900" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2580" bodyend="2587"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ab5dc4252feda907072bf79a8f36bb2fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::mergeLines</definition>
        <argsstring>() const</argsstring>
        <name>mergeLines</name>
        <briefdescription>
<para>Merges any connected lines in a LineString/MultiLineString geometry and converts them to single line strings. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a LineString or MultiLineString geometry, with any connected lines joined. An empty geometry will be returned if the input geometry was not a MultiLineString geometry. </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1355" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2226" bodyend="2244"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ab49702823fca3fc28e1f4547788a0953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::minimalEnclosingCircle</definition>
        <argsstring>(QgsPointXY &amp;center, double &amp;radius, unsigned int segments=36) const</argsstring>
        <name>minimalEnclosingCircle</name>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>segments</declname>
          <defval>36</defval>
        </param>
        <briefdescription>
<para>Returns the minimal enclosing circle for the geometry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the minimal enclosing circle returneds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the minimal enclosing circle returned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segments</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of segments used to segment geometry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classQgsEllipse_1a26ac6c5443ef0a78451dc25e5a22724b" kindref="member">QgsEllipse::toPolygon()</ref> </para></simplesect>
<simplesect kind="return"><para>the minimal enclosing circle as a QGIS geometry </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="882" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1055" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a902ef28c9969be84b2d9e77f040cb6bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::minimalEnclosingCircle</definition>
        <argsstring>(unsigned int segments=36) const</argsstring>
        <name>minimalEnclosingCircle</name>
        <param>
          <type>unsigned int</type>
          <declname>segments</declname>
          <defval>36</defval>
        </param>
        <briefdescription>
<para>Returns the minimal enclosing circle for the geometry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segments</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of segments used to segment geometry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classQgsEllipse_1a26ac6c5443ef0a78451dc25e5a22724b" kindref="member">QgsEllipse::toPolygon()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="889" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1082" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1af54b5584cad191919f1916ea78cebb28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::moveVertex</definition>
        <argsstring>(double x, double y, int atVertex)</argsstring>
        <name>moveVertex</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>atVertex</declname>
        </param>
        <briefdescription>
<para>Moves the vertex at the given position number and item (first number is index 0) to the given coordinates. </para>        </briefdescription>
        <detaileddescription>
<para>Returns false if atVertex does not correspond to a valid vertex on this geometry </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="654" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="453" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a18b2a5a02296938518bbf8ee8b270854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::moveVertex</definition>
        <argsstring>(const QgsPoint &amp;p, int atVertex)</argsstring>
        <name>moveVertex</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>atVertex</declname>
        </param>
        <briefdescription>
<para>Moves the vertex at the given position number and item (first number is index 0) to the given coordinates. </para>        </briefdescription>
        <detaileddescription>
<para>Returns false if atVertex does not correspond to a valid vertex on this geometry </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="663" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="471" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a412e55ba03454baa52ec3dc49901baaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::nearestPoint</definition>
        <argsstring>(const QgsGeometry &amp;other) const</argsstring>
        <name>nearestPoint</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the nearest point on this geometry to another geometry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsGeometry_1aff684223d66cf3f4f7c15dcd1a8ab27b" kindref="member">shortestLine()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 2.14 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="697" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="596" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ad9508e6f1c6247ce6347f46740d61818" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::offsetCurve</definition>
        <argsstring>(double distance, int segments, JoinStyle joinStyle, double miterLimit) const</argsstring>
        <name>offsetCurve</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>int</type>
          <declname>segments</declname>
        </param>
        <param>
          <type><ref refid="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926" kindref="member">JoinStyle</ref></type>
          <declname>joinStyle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>miterLimit</declname>
        </param>
        <briefdescription>
<para>Returns an offset line at a given distance and side from an input line. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer distance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segments</parametername>
</parameternamelist>
<parameterdescription>
<para>for round joins, number of segments to approximate quarter-circle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>joinStyle</parametername>
</parameternamelist>
<parameterdescription>
<para>join style for corners in geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>miterLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>limit on the miter ratio used for very sharp corners (JoinStyleMiter only) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>QGIS 2.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1077" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1764" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a8e44cd6e94d616c3e5e33dc458bba0f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QgsGeometry::operator QVariant</definition>
        <argsstring>() const</argsstring>
        <name>operator QVariant</name>
        <briefdescription>
<para>Allows direct construction of QVariants from geometry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2198" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="2198" bodyend="2201"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9c9767f5dc9c364c2ef3cef92d6533f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
        <definition>QgsGeometry &amp; QgsGeometry::operator=</definition>
        <argsstring>(QgsGeometry const &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Creates a deep copy of the object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="147" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="89" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9572d5cf0714fa5fc377b36ed71335d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::orientedMinimumBoundingBox</definition>
        <argsstring>(double &amp;area, double &amp;angle, double &amp;width, double &amp;height) const</argsstring>
        <name>orientedMinimumBoundingBox</name>
        <param>
          <type>double &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Returns the oriented minimum bounding box for the geometry, which is the smallest (by area) rotated rectangle which fully encompasses the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>The area, angle (clockwise in degrees from North), width and height of the rotated bounding box will also be returned. <simplesect kind="see"><para><ref refid="classQgsGeometry_1adfc04c94b51cdeb55942b699fdd4d564" kindref="member">boundingBox()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="865" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="942" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ada2cff69089f0184e6455aeeca05a19a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::orientedMinimumBoundingBox</definition>
        <argsstring>() const</argsstring>
        <name>orientedMinimumBoundingBox</name>
        <briefdescription>
<para>Returns the oriented minimum bounding box for the geometry, which is the smallest (by area) rotated rectangle which fully encompasses the geometry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="872" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1001" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9dafc1e80cfaeb59f12ea9671b71fce7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::orthogonalize</definition>
        <argsstring>(double tolerance=1.0E-8, int maxIterations=1000, double angleThreshold=15.0) const</argsstring>
        <name>orthogonalize</name>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>1.0E-8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>maxIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>double</type>
          <declname>angleThreshold</declname>
          <defval>15.0</defval>
        </param>
        <briefdescription>
<para>Attempts to orthogonalize a line or polygon geometry by shifting vertices to make the geometries angles either right angles or flat lines. </para>        </briefdescription>
        <detaileddescription>
<para>This is an iterative algorithm which will loop until either the vertices are within a specified tolerance of right angles or a set number of maximum iterations is reached. The angle threshold parameter specifies how close to a right angle or straight line an angle must be before it is attempted to be straightened. <simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="899" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1090" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1afdea2fdb1a12abc07024a6698136dea3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::overlaps</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>overlaps</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Test for if geometry overlaps another (uses GEOS) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1006" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1217" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aa610ca7d3b15813d634ca3ea7910950b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometryPartIterator" kindref="compound">QgsGeometryPartIterator</ref></type>
        <definition>QgsGeometryPartIterator QgsGeometry::parts</definition>
        <argsstring>()</argsstring>
        <name>parts</name>
        <briefdescription>
<para>Returns Java-style iterator for traversal of parts of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>This iterator can safely be used to modify parts of the geometry.</para><para>This method forces a detach. Use <ref refid="classQgsGeometry_1add3d0333c571da4fc557a36dce0a863e" kindref="member">constParts()</ref> to avoid the detach if the parts are not going to be modified.</para><para><itemizedlist>
<listitem><para>Example: <programlisting><codeline><highlight class="comment">#<sp/>print<sp/>the<sp/>WKT<sp/>representation<sp/>of<sp/>each<sp/>part<sp/>in<sp/>a<sp/>multi-point<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">geometry<sp/>=<sp/><ref refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" kindref="member">QgsGeometry.fromWkt</ref>(<sp/></highlight><highlight class="stringliteral">&apos;MultiPoint(<sp/>0<sp/>0,<sp/>1<sp/>1,<sp/>2<sp/>2)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>part<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geometry.parts():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(part.asWkt())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>single<sp/>part<sp/>geometries<sp/>only<sp/>have<sp/>one<sp/>part<sp/>-<sp/>this<sp/>loop<sp/>will<sp/>iterate<sp/>once<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">geometry<sp/>=<sp/><ref refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" kindref="member">QgsGeometry.fromWkt</ref>(<sp/></highlight><highlight class="stringliteral">&apos;LineString(<sp/>0<sp/>0,<sp/>10<sp/>10<sp/>)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>part<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geometry.parts():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(part.asWkt())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>parts<sp/>can<sp/>be<sp/>modified<sp/>during<sp/>the<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">geometry<sp/>=<sp/><ref refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" kindref="member">QgsGeometry.fromWkt</ref>(<sp/></highlight><highlight class="stringliteral">&apos;MultiPoint(<sp/>0<sp/>0,<sp/>1<sp/>1,<sp/>2<sp/>2)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>part<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geometry.parts():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>part.transform(ct)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>part<sp/>iteration<sp/>can<sp/>also<sp/>be<sp/>combined<sp/>with<sp/>vertex<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">geometry<sp/>=<sp/><ref refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" kindref="member">QgsGeometry.fromWkt</ref>(<sp/></highlight><highlight class="stringliteral">&apos;MultiPolygon(((<sp/>0<sp/>0,<sp/>0<sp/>10,<sp/>10<sp/>10,<sp/>10<sp/>0,<sp/>0<sp/>0<sp/>),(<sp/>5<sp/>5,<sp/>5<sp/>6,<sp/>6<sp/>6,<sp/>6<sp/>5,<sp/>5<sp/>5)),((20<sp/>2,<sp/>22<sp/>2,<sp/>22<sp/>4,<sp/>20<sp/>4,<sp/>20<sp/>2)))&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>part<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geometry.parts():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>part.vertices():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(v.x(),<sp/>v.y())</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1add3d0333c571da4fc557a36dce0a863e" kindref="member">constParts()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a1e45b50fdc64bbc942398eeed7bdc6ca" kindref="member">vertices()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="499" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1709" bodyend="1716"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a74f9e88f75e729a2f6af1bef7894ba4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsAbstractGeometry_1_1part__iterator" kindref="compound">QgsAbstractGeometry::part_iterator</ref></type>
        <definition>QgsAbstractGeometry::part_iterator QgsGeometry::parts_begin</definition>
        <argsstring>()</argsstring>
        <name>parts_begin</name>
        <briefdescription>
<para>Returns STL-style iterator pointing to the first part of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>This method forces a detach. Use <ref refid="classQgsGeometry_1a2b424b8d12e145f9d9b4f51ced93ebf5" kindref="member">const_parts_begin()</ref> to avoid the detach if the parts are not going to be modified.</para><para><simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="430" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1679" bodyend="1686"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac181da894563701f014e944c1a200e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsAbstractGeometry_1_1part__iterator" kindref="compound">QgsAbstractGeometry::part_iterator</ref></type>
        <definition>QgsAbstractGeometry::part_iterator QgsGeometry::parts_end</definition>
        <argsstring>()</argsstring>
        <name>parts_end</name>
        <briefdescription>
<para>Returns STL-style iterator pointing to the imaginary part after the last part of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>This method forces a detach. Use <ref refid="classQgsGeometry_1a2b424b8d12e145f9d9b4f51ced93ebf5" kindref="member">const_parts_begin()</ref> to avoid the detach if the parts are not going to be modified.</para><para><simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="440" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1688" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a3975e1ac16832371854703dfe699d5f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::pointOnSurface</definition>
        <argsstring>() const</argsstring>
        <name>pointOnSurface</name>
        <briefdescription>
<para>Returns a point guaranteed to lie on the surface of a geometry. </para>        </briefdescription>
        <detaileddescription>
<para>While the <ref refid="classQgsGeometry_1a9af6067caef47d380d45c32569abc10b" kindref="member">centroid()</ref> of a geometry may be located outside of the geometry itself (e.g., for concave shapes), the point on surface will always be inside the geometry.</para><para>If the input is a NULL geometry, the output will also be a NULL geometry.</para><para>If an error was encountered while creating the result, more information can be retrieved by calling <computeroutput>error()</computeroutput> on the returned geometry.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a9af6067caef47d380d45c32569abc10b" kindref="member">centroid()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a2142d7d576a91fc8c3775fc10d6a4e26" kindref="member">poleOfInaccessibility()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1199" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1977" bodyend="1990"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a2142d7d576a91fc8c3775fc10d6a4e26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::poleOfInaccessibility</definition>
        <argsstring>(double precision, double *distanceToBoundary=nullptr) const</argsstring>
        <name>poleOfInaccessibility</name>
        <param>
          <type>double</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distanceToBoundary</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Calculates the approximate pole of inaccessibility for a surface, which is the most distant internal point from the boundary of the surface. </para>        </briefdescription>
        <detaileddescription>
<para>This function uses the &apos;polylabel&apos; algorithm (Vladimir Agafonkin, 2016), which is an iterative approach guaranteed to find the true pole of inaccessibility within a specified tolerance. More precise tolerances require more iterations and will take longer to calculate. Optionally, the distance to the polygon boundary from the pole can be stored. <simplesect kind="see"><para><ref refid="classQgsGeometry_1a9af6067caef47d380d45c32569abc10b" kindref="member">centroid()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a3975e1ac16832371854703dfe699d5f2" kindref="member">pointOnSurface()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1213" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1992" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1abea731230e1528ec0316553d2175fca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::removeDuplicateNodes</definition>
        <argsstring>(double epsilon=4 *std::numeric_limits&lt; double &gt;::epsilon(), bool useZValues=false)</argsstring>
        <name>removeDuplicateNodes</name>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>4 *std::numeric_limits&lt; double &gt;::epsilon()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useZValues</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Removes duplicate nodes from the geometry, wherever removing the nodes does not result in a degenerate geometry. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>epsilon</emphasis> parameter specifies the tolerance for coordinates when determining that vertices are identical.</para><para>By default, z values are not considered when detecting duplicate nodes. E.g. two nodes with the same x and y coordinate but different z values will still be considered duplicate and one will be removed. If <emphasis>useZValues</emphasis> is true, then the z values are also tested and nodes with the same x and y but different z will be maintained.</para><para>Note that duplicate nodes are not tested between different parts of a multipart geometry. E.g. a multipoint geometry with overlapping points will not be changed by this method.</para><para>The function will return true if nodes were removed, or false if no duplicate nodes were found.</para><para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="935" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1106" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1afc97580ed7289056bc58e1fb467314cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::removeInteriorRings</definition>
        <argsstring>(double minimumAllowedArea=-1) const</argsstring>
        <name>removeInteriorRings</name>
        <param>
          <type>double</type>
          <declname>minimumAllowedArea</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Removes the interior rings from a (multi)polygon geometry. </para>        </briefdescription>
        <detaileddescription>
<para>If the minimumAllowedArea parameter is specified then only rings smaller than this minimum area will be removed. <simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="778" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="740" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a8b2dd31d4ef71bf07e29e9f76e20c8c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::requiresConversionToStraightSegments</definition>
        <argsstring>() const</argsstring>
        <name>requiresConversionToStraightSegments</name>
        <briefdescription>
<para>Returns true if the geometry is a curved geometry type which requires conversion to display as straight line segments. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a96eb87e99cb73c50f35537a1a06d0a37" kindref="member">convertToStraightSegment</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 2.10 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1893" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2546" bodyend="2554"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a52b3cdac7cb7c5ee8212507ff1caddf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::reshapeGeometry</definition>
        <argsstring>(const QgsLineString &amp;reshapeLineString)</argsstring>
        <name>reshapeGeometry</name>
        <param>
          <type>const <ref refid="classQgsLineString" kindref="compound">QgsLineString</ref> &amp;</type>
          <declname>reshapeLineString</declname>
        </param>
        <briefdescription>
<para>Replaces a part of this geometry with another line. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="834" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="853" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a3a1b5d2cb62d5e26c51f168cea909aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::rotate</definition>
        <argsstring>(double rotation, const QgsPointXY &amp;center)</argsstring>
        <name>rotate</name>
        <param>
          <type>double</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <briefdescription>
<para>Rotate this geometry around the Z axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>clockwise rotation in degrees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>rotation center </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="818" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="789" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aa9309455d08598378f06fa758e64cd3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::set</definition>
        <argsstring>(QgsAbstractGeometry *geometry)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> *</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Sets the underlying geometry store. </para>        </briefdescription>
        <detaileddescription>
<para>Ownership of geometry is transferred.</para><para><simplesect kind="note"><para>In QGIS 2.x this method was named setGeometry().</para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a6418c395776ccc5a13466a5d28039225" kindref="member">get()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a6d80b6a9b799d6be0a3dd1d4f932db1b" kindref="member">constGet()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="201" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="135" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aff684223d66cf3f4f7c15dcd1a8ab27b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::shortestLine</definition>
        <argsstring>(const QgsGeometry &amp;other) const</argsstring>
        <name>shortestLine</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Returns the shortest line joining this geometry to another geometry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a412e55ba03454baa52ec3dc49901baaa" kindref="member">nearestPoint()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 2.14 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="704" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="605" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ade6a5a7c243b7649bf58d5ed44f41e6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::simplify</definition>
        <argsstring>(double tolerance) const</argsstring>
        <name>simplify</name>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Returns a simplified version of this geometry using a specified tolerance value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1142" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1920" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac323e4531e8b55789b6593e4769cf80b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::singleSidedBuffer</definition>
        <argsstring>(double distance, int segments, BufferSide side, JoinStyle joinStyle=JoinStyleRound, double miterLimit=2.0) const</argsstring>
        <name>singleSidedBuffer</name>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>int</type>
          <declname>segments</declname>
        </param>
        <param>
          <type><ref refid="classQgsGeometry_1a50e825745210d6f83f4467fe828213c3" kindref="member">BufferSide</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926" kindref="member">JoinStyle</ref></type>
          <declname>joinStyle</declname>
          <defval><ref refid="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926a9075b626fb08f9519e220465b434c020" kindref="member">JoinStyleRound</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>miterLimit</declname>
          <defval>2.0</defval>
        </param>
        <briefdescription>
<para>Returns a single sided buffer for a (multi)line geometry. </para>        </briefdescription>
        <detaileddescription>
<para>The buffer is only applied to one side of the line. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer distance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segments</parametername>
</parameternamelist>
<parameterdescription>
<para>for round joins, number of segments to approximate quarter-circle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>side</parametername>
</parameternamelist>
<parameterdescription>
<para>side of geometry to buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>joinStyle</parametername>
</parameternamelist>
<parameterdescription>
<para>join style for corners </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>miterLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>limit on the miter ratio used for very sharp corners </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>buffered geometry, or an empty geometry if buffer could not be calculated</para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1ab7302c054a2c5514222b4bd71df71ab8" kindref="member">buffer()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a934e7da694627af2a95944cb327f7b20" kindref="member">taperedBuffer()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1094" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1822" bodyend="1864"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aeeb87ca00241a6e4e8ca7a168c30e8be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::smooth</definition>
        <argsstring>(unsigned int iterations=1, double offset=0.25, double minimumDistance=-1.0, double maxAngle=180.0) const</argsstring>
        <name>smooth</name>
        <param>
          <type>unsigned int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>offset</declname>
          <defval>0.25</defval>
        </param>
        <param>
          <type>double</type>
          <declname>minimumDistance</declname>
          <defval>-1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>maxAngle</declname>
          <defval>180.0</defval>
        </param>
        <briefdescription>
<para>Smooths a geometry by rounding off corners using the Chaikin algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>This operation roughly doubles the number of vertices in a geometry.</para><para>If input geometries contain Z or M values, these will also be smoothed and the output geometry will retain the same dimensionality as the input geometry.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>number of smoothing iterations to run. More iterations results in a smoother geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>fraction of line to create new vertices along, between 0 and 1.0, e.g., the default value of 0.25 will create new vertices 25% and 75% along each line segment of the geometry for each iteration. Smaller values result in &quot;tighter&quot; smoothing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum segment length to apply smoothing to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum angle at node (0-180) at which smoothing will be applied </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>QGIS 2.9 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2175" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2885" bodyend="2941"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a78fbff228151e606b43b84814a1bde64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::snappedToGrid</definition>
        <argsstring>(double hSpacing, double vSpacing, double dSpacing=0, double mSpacing=0) const</argsstring>
        <name>snappedToGrid</name>
        <param>
          <type>double</type>
          <declname>hSpacing</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vSpacing</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dSpacing</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>mSpacing</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns a new geometry with all points or vertices snapped to the closest point of the grid. </para>        </briefdescription>
        <detaileddescription>
<para>If the gridified geometry could not be calculated (or was totally collapsed) an empty geometry will be returned. Note that snapping to grid may generate an invalid geometry in some corner cases. It can also be thought as rounding the edges and it may be useful for removing errors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hSpacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Horizontal spacing of the grid (x axis). 0 to disable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vSpacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertical spacing of the grid (y axis). 0 to disable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dSpacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Depth spacing of the grid (z axis). 0 (default) to disable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mSpacing</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom dimension spacing of the grid (m axis). 0 (default) to disable. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="913" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1097" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1afbe7bd6d0db0cff2b1c3ac151bf7681b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::splitGeometry</definition>
        <argsstring>(const QVector&lt; QgsPointXY &gt; &amp;splitLine, QVector&lt; QgsGeometry &gt; &amp;newGeometries, bool topological, QVector&lt; QgsPointXY &gt; &amp;topologyTestPoints)</argsstring>
        <name>splitGeometry</name>
        <param>
          <type>const QVector&lt; <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &gt; &amp;</type>
          <declname>splitLine</declname>
        </param>
        <param>
          <type>QVector&lt; <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &gt; &amp;</type>
          <declname>newGeometries</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>topological</declname>
        </param>
        <param>
          <type>QVector&lt; <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &gt; &amp;</type>
          <declname>topologyTestPoints</declname>
        </param>
        <briefdescription>
<para>Splits this geometry according to a given line. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>splitLine</parametername>
</parameternamelist>
<parameterdescription>
<para>the line that splits the geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">newGeometries</parametername>
</parameternamelist>
<parameterdescription>
<para>list of new geometries that have been created with the split </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topological</parametername>
</parameternamelist>
<parameterdescription>
<para>true if topological editing is enabled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">topologyTestPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>points that need to be tested for topological completeness in the dataset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="828" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="805" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a69634cb3054a619126d604a186f3690d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometry::sqrDistToVertexAt</definition>
        <argsstring>(QgsPointXY &amp;point SIP_IN, int atVertex) const</argsstring>
        <name>sqrDistToVertexAt</name>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;point</type>
          <declname>SIP_IN</declname>
        </param>
        <param>
          <type>int</type>
          <declname>atVertex</declname>
        </param>
        <briefdescription>
<para>Returns the squared Cartesian distance between the given point to the given vertex index (vertex at the given position number, ring and item (first number is index 0)) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="690" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="590" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1af9bd71438ba5aea8295a67fb8f64e6cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::subdivide</definition>
        <argsstring>(int maxNodes=256) const</argsstring>
        <name>subdivide</name>
        <param>
          <type>int</type>
          <declname>maxNodes</declname>
          <defval>256</defval>
        </param>
        <briefdescription>
<para>Subdivides the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>The returned geometry will be a collection containing subdivided parts from the original geometry, where no part has more then the specified maximum number of nodes (<emphasis>maxNodes</emphasis>).</para><para>This is useful for dividing a complex geometry into less complex parts, which are better able to be spatially indexed and faster to perform further operations such as intersects on. The returned geometry parts may not be valid and may contain self-intersections.</para><para>The minimum allowed value for <emphasis>maxNodes</emphasis> is 8.</para><para>Curved geometries will be segmentized before subdivision.</para><para>If the input is a NULL geometry, the output will also be a NULL geometry.</para><para>If an error was encountered while creating the result, more information can be retrieved by calling <computeroutput>error()</computeroutput> on the returned geometry.</para><para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1272" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2045" bodyend="2070"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1abb0b07138b6c4df09446e21c23f5ec70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::symDifference</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>symDifference</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Returns a geometry representing the points making up this geometry that do not make up other. </para>        </briefdescription>
        <detaileddescription>
<para>If the input is a NULL geometry, the output will also be a NULL geometry.</para><para>If an error was encountered while creating the result, more information can be retrieved by calling <computeroutput>error()</computeroutput> on the returned geometry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1375" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2266" bodyend="2284"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a934e7da694627af2a95944cb327f7b20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::taperedBuffer</definition>
        <argsstring>(double startWidth, double endWidth, int segments) const</argsstring>
        <name>taperedBuffer</name>
        <param>
          <type>double</type>
          <declname>startWidth</declname>
        </param>
        <param>
          <type>double</type>
          <declname>endWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>segments</declname>
        </param>
        <briefdescription>
<para>Calculates a variable width buffer (&quot;tapered buffer&quot;) for a (multi)curve geometry. </para>        </briefdescription>
        <detaileddescription>
<para>The buffer begins at a width of <emphasis>startWidth</emphasis> at the start of each curve, and ends at a width of <emphasis>endWidth</emphasis>. Note that unlike <ref refid="classQgsGeometry_1ab7302c054a2c5514222b4bd71df71ab8" kindref="member">buffer()</ref> methods, <emphasis>startWidth</emphasis> and <emphasis>endWidth</emphasis> are the diameter of the buffer at these points, not the radius.</para><para>The <emphasis>segments</emphasis> argument specifies the number of segments to approximate quarter-circle curves in the buffer.</para><para>Non (multi)curve input geometries will return a null output geometry.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1ab7302c054a2c5514222b4bd71df71ab8" kindref="member">buffer()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1ac323e4531e8b55789b6593e4769cf80b" kindref="member">singleSidedBuffer()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a4ba726b9bb2f40d9424bcdf321df1cee" kindref="member">variableWidthBufferByM()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1115" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1866" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a3a929249c1cc2c4cea95e81f92c6ee7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::touches</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>touches</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Test for if geometry touch another (uses GEOS) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1000" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1205" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac69d7afedd56552c9bad65afa6d1618f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::transform</definition>
        <argsstring>(const QgsCoordinateTransform &amp;ct, QgsCoordinateTransform::TransformDirection direction=QgsCoordinateTransform::ForwardTransform, bool transformZ=false) SIP_THROW(QgsCsException)</argsstring>
        <name>transform</name>
        <param>
          <type>const <ref refid="classQgsCoordinateTransform" kindref="compound">QgsCoordinateTransform</ref> &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type><ref refid="classQgsCoordinateTransform_1a8bc24d9a900ec38443bb573eb77e66f5" kindref="member">QgsCoordinateTransform::TransformDirection</ref></type>
          <declname>direction</declname>
          <defval><ref refid="classQgsCoordinateTransform_1a8bc24d9a900ec38443bb573eb77e66f5a1bae13b526add06d1a5f42dae9f67c9e" kindref="member">QgsCoordinateTransform::ForwardTransform</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>transformZ</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Transforms this geometry as described by the coordinate transform <emphasis>ct</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The transformation defaults to a forward transform, but the direction can be swapped by setting the <emphasis>direction</emphasis> argument.</para><para>By default, z-coordinates are not transformed, even if the coordinate transform includes a vertical datum transformation. To transform z-coordinates, set <emphasis>transformZ</emphasis> to true. This requires that the z coordinates in the geometry represent height relative to the vertical datum of the source CRS (generally ellipsoidal heights) and are expressed in its vertical units (generally meters).</para><para><simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="800" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2556" bodyend="2566"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1accf8c558f506c9df392856bee1ff2540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::transform</definition>
        <argsstring>(const QTransform &amp;t, double zTranslate=0.0, double zScale=1.0, double mTranslate=0.0, double mScale=1.0)</argsstring>
        <name>transform</name>
        <param>
          <type>const QTransform &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zTranslate</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>zScale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>mTranslate</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>mScale</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Transforms the x and y components of the geometry using a QTransform object <emphasis>t</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Optionally, the geometry&apos;s z values can be scaled via <emphasis>zScale</emphasis> and translated via <emphasis>zTranslate</emphasis>. Similarly, m-values can be scaled via <emphasis>mScale</emphasis> and translated via <emphasis>mTranslate</emphasis>.</para><para><simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="810" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2568" bodyend="2578"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a3c64245aba1e3f957c6e46741572821a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::transformVertices</definition>
        <argsstring>(const std::function&lt; QgsPoint(const QgsPoint &amp;) &gt; &amp;transform)</argsstring>
        <name>transformVertices</name>
        <param>
          <type>const std::function&lt; <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;) &gt; &amp;</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
<para>Transforms the vertices from the geometry in place, applying the <emphasis>transform</emphasis> function to every vertex. </para>        </briefdescription>
        <detaileddescription>
<para>Depending on the <emphasis>transform</emphasis> used, this may result in an invalid geometry.</para><para>Transform functions are not permitted to alter the dimensionality of vertices. If a transform which adds (or removes) z/m values is desired, first call the corresponding addZValue() or addMValue() function to change the geometry&apos;s dimensionality and then transform.</para><para><simplesect kind="note"><para>Not available in Python bindings </para></simplesect>
<simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1968" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2753" bodyend="2761"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a47a7fa907aadc824c1bc55b6f549918a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" kindref="member">OperationResult</ref></type>
        <definition>QgsGeometry::OperationResult QgsGeometry::translate</definition>
        <argsstring>(double dx, double dy, double dz=0.0, double dm=0.0)</argsstring>
        <name>translate</name>
        <param>
          <type>double</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dz</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>dm</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Translates this geometry by dx, dy, dz and dm. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>OperationResult a result code: success or reason of failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="784" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="776" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a03a629309b62d163266a6d7d2298601a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9c" kindref="member">QgsWkbTypes::GeometryType</ref></type>
        <definition>QgsWkbTypes::GeometryType QgsGeometry::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>Returns type of the geometry as a <ref refid="classQgsWkbTypes_1a60e72c2f73cb07fdbcdbc2d5068b5d9c" kindref="member">QgsWkbTypes::GeometryType</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a0d06cbaa571dd127e1c43e8b1033b4a2" kindref="member">wkbType</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="295" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="344" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ad75ff36dc6b27547a7043a92c7353503" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::validateGeometry</definition>
        <argsstring>(QVector&lt; QgsGeometry::Error &gt; &amp;errors, ValidationMethod method=ValidatorQgisInternal) const</argsstring>
        <name>validateGeometry</name>
        <param>
          <type>QVector&lt; <ref refid="classQgsGeometry_1_1Error" kindref="compound">QgsGeometry::Error</ref> &gt; &amp;</type>
          <declname>errors</declname>
        </param>
        <param>
          <type><ref refid="classQgsGeometry_1aff2cde1dd216fd769479445672b8c734" kindref="member">ValidationMethod</ref></type>
          <declname>method</declname>
          <defval><ref refid="classQgsGeometry_1aff2cde1dd216fd769479445672b8c734a1736648ac1a03c6bbe04e0768fcde42f" kindref="member">ValidatorQgisInternal</ref></defval>
        </param>
        <briefdescription>
<para>Validates geometry and produces a list of geometry errors. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>method</emphasis> argument dictates which validator to utilize. <simplesect kind="note"><para>Available in Python bindings since QGIS 1.6 </para></simplesect>
<simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1859" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2460" bodyend="2463"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a4ba726b9bb2f40d9424bcdf321df1cee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::variableWidthBufferByM</definition>
        <argsstring>(int segments) const</argsstring>
        <name>variableWidthBufferByM</name>
        <param>
          <type>int</type>
          <declname>segments</declname>
        </param>
        <briefdescription>
<para>Calculates a variable width buffer for a (multi)linestring geometry, where the width at each node is taken from the linestring m values. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>segments</emphasis> argument specifies the number of segments to approximate quarter-circle curves in the buffer.</para><para>Non (multi)linestring input geometries will return a null output geometry.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1ab7302c054a2c5514222b4bd71df71ab8" kindref="member">buffer()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1ac323e4531e8b55789b6593e4769cf80b" kindref="member">singleSidedBuffer()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a934e7da694627af2a95944cb327f7b20" kindref="member">taperedBuffer()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1131" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1873" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a4de6615ad51648577d66983c6efd5203" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref></type>
        <definition>QgsPoint QgsGeometry::vertexAt</definition>
        <argsstring>(int atVertex) const</argsstring>
        <name>vertexAt</name>
        <param>
          <type>int</type>
          <declname>atVertex</declname>
        </param>
        <briefdescription>
<para>Returns coordinates of a vertex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>atVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the vertex </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Coordinates of the vertex or <ref refid="classQgsPoint" kindref="compound">QgsPoint(0,0)</ref> on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="683" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="574" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a392620c8bcd3a7f58f7498996c3efaf3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::vertexIdFromVertexNr</definition>
        <argsstring>(int number, QgsVertexId &amp;id) const</argsstring>
        <name>vertexIdFromVertexNr</name>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type><ref refid="structQgsVertexId" kindref="compound">QgsVertexId</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Calculates the vertex ID from a vertex <emphasis>number</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If a matching vertex was found, it will be stored in <emphasis>id</emphasis>.</para><para>Returns true if vertex was found.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1abc714bc8710d5427fffdfab27e445755" kindref="member">vertexNrFromVertexId()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 2.10 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1919" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2693" bodyend="2727"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1abc714bc8710d5427fffdfab27e445755" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGeometry::vertexNrFromVertexId</definition>
        <argsstring>(QgsVertexId id) const</argsstring>
        <name>vertexNrFromVertexId</name>
        <param>
          <type><ref refid="structQgsVertexId" kindref="compound">QgsVertexId</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the vertex number corresponding to a vertex <emphasis>id</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The vertex numbers start at 0, so a return value of 0 corresponds to the first vertex.</para><para>Returns -1 if a corresponding vertex could not be found.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a392620c8bcd3a7f58f7498996c3efaf3" kindref="member">vertexIdFromVertexNr()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 2.10 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1932" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2729" bodyend="2736"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a1e45b50fdc64bbc942398eeed7bdc6ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsVertexIterator" kindref="compound">QgsVertexIterator</ref></type>
        <definition>QgsVertexIterator QgsGeometry::vertices</definition>
        <argsstring>() const</argsstring>
        <name>vertices</name>
        <briefdescription>
<para>Returns a read-only, Java-style iterator for traversal of vertices of all the geometry, including all geometry parts and rings. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>The iterator returns a copy of individual vertices, and accordingly geometries cannot be modified using the iterator. See <ref refid="classQgsGeometry_1a3c64245aba1e3f957c6e46741572821a" kindref="member">transformVertices()</ref> for a safe method to modify vertices &quot;in-place&quot;.</para></simplesect>
<itemizedlist>
<listitem><para>Example: <programlisting><codeline><highlight class="comment">#<sp/>print<sp/>the<sp/>x<sp/>and<sp/>y<sp/>coordinate<sp/>for<sp/>each<sp/>vertex<sp/>in<sp/>a<sp/>LineString</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">geometry<sp/>=<sp/><ref refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" kindref="member">QgsGeometry.fromWkt</ref>(<sp/></highlight><highlight class="stringliteral">&apos;LineString(<sp/>0<sp/>0,<sp/>1<sp/>1,<sp/>2<sp/>2)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geometry.vertices():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(v.x(),<sp/>v.y())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>vertex<sp/>iteration<sp/>includes<sp/>all<sp/>parts<sp/>and<sp/>rings</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">geometry<sp/>=<sp/><ref refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" kindref="member">QgsGeometry.fromWkt</ref>(<sp/></highlight><highlight class="stringliteral">&apos;MultiPolygon(((<sp/>0<sp/>0,<sp/>0<sp/>10,<sp/>10<sp/>10,<sp/>10<sp/>0,<sp/>0<sp/>0<sp/>),(<sp/>5<sp/>5,<sp/>5<sp/>6,<sp/>6<sp/>6,<sp/>6<sp/>5,<sp/>5<sp/>5)),((20<sp/>2,<sp/>22<sp/>2,<sp/>22<sp/>4,<sp/>20<sp/>4,<sp/>20<sp/>2)))&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geometry.vertices():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(v.x(),<sp/>v.y())</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="classQgsGeometry_1aa610ca7d3b15813d634ca3ea7910950b" kindref="member">parts()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="418" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1672" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac323a3a24b4159cd584d9dde79682a0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsAbstractGeometry_1_1vertex__iterator" kindref="compound">QgsAbstractGeometry::vertex_iterator</ref></type>
        <definition>QgsAbstractGeometry::vertex_iterator QgsGeometry::vertices_begin</definition>
        <argsstring>() const</argsstring>
        <name>vertices_begin</name>
        <briefdescription>
<para>Returns STL-style iterator pointing to the first vertex of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="387" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1658" bodyend="1663"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1afb1e56235cdc1903777c24582513451e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsAbstractGeometry_1_1vertex__iterator" kindref="compound">QgsAbstractGeometry::vertex_iterator</ref></type>
        <definition>QgsAbstractGeometry::vertex_iterator QgsGeometry::vertices_end</definition>
        <argsstring>() const</argsstring>
        <name>vertices_end</name>
        <briefdescription>
<para>Returns STL-style iterator pointing to the imaginary vertex after the last vertex of the geometry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="393" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1665" bodyend="1670"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aa8c9bb3b7d2e4c2fe7547613edb2f2d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::voronoiDiagram</definition>
        <argsstring>(const QgsGeometry &amp;extent=QgsGeometry(), double tolerance=0.0, bool edgesOnly=false) const</argsstring>
        <name>voronoiDiagram</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>extent</declname>
          <defval><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref>()</defval>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>edgesOnly</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a Voronoi diagram for the nodes contained within the geometry. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the Voronoi polygons for the nodes contained within the geometry. If <emphasis>extent</emphasis> is specified then it will be used as a clipping envelope for the diagram. If no extent is set then the clipping envelope will be automatically calculated. In either case the diagram will be clipped to the larger of the provided envelope OR the envelope surrounding all input nodes. The <emphasis>tolerance</emphasis> parameter specifies an optional snapping tolerance which can be used to improve the robustness of the diagram calculation. If <emphasis>edgesOnly</emphasis> is true than line string boundary geometries will be returned instead of polygons. An empty geometry will be returned if the diagram could not be calculated. <simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1240" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2017" bodyend="2029"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a93d186a9f4ba52bd9c28305f8d6b71f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::within</definition>
        <argsstring>(const QgsGeometry &amp;geometry) const</argsstring>
        <name>within</name>
        <param>
          <type>const <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Test for if geometry is within another (uses GEOS) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1012" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="1229" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a0d06cbaa571dd127e1c43e8b1033b4a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsWkbTypes_1a70dff7aceefd4b16909f038e32aece11" kindref="member">QgsWkbTypes::Type</ref></type>
        <definition>QgsWkbTypes::Type QgsGeometry::wkbType</definition>
        <argsstring>() const</argsstring>
        <name>wkbType</name>
        <briefdescription>
<para>Returns type of the geometry as a WKB type (point / linestring / polygon etc.) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsGeometry_1a03a629309b62d163266a6d7d2298601a" kindref="member">type</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="289" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="331" bodyend="341"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classQgsGeometry_1a42cbc7025e8c13e697b4fd3ad365ea2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::collectGeometry</definition>
        <argsstring>(const QVector&lt; QgsGeometry &gt; &amp;geometries)</argsstring>
        <name>collectGeometry</name>
        <param>
          <type>const QVector&lt; <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &gt; &amp;</type>
          <declname>geometries</declname>
        </param>
        <briefdescription>
<para>Creates a new multipart geometry from a list of <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="252" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="243" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a1d85a49ccdb4d4bf20c353c54fb50387" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::compare</definition>
        <argsstring>(const QgsPolylineXY &amp;p1, const QgsPolylineXY &amp;p2, double epsilon=4 *std::numeric_limits&lt; double &gt;::epsilon())</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1aa509befb347910684b1a14f10c62cc89" kindref="member">QgsPolylineXY</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1aa509befb347910684b1a14f10c62cc89" kindref="member">QgsPolylineXY</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>4 *std::numeric_limits&lt; double &gt;::epsilon()</defval>
        </param>
        <briefdescription>
<para>Compares two polylines for equality within a specified tolerance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first polyline </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second polyline </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum difference for coordinates between the polylines </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if polylines have the same number of points and all points are equal within the specified tolerance </para></simplesect>
<simplesect kind="since"><para>QGIS 2.9 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2013" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2845" bodyend="2856"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a00d8417eb994b743924ab009295b85b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::compare</definition>
        <argsstring>(const QgsPolygonXY &amp;p1, const QgsPolygonXY &amp;p2, double epsilon=4 *std::numeric_limits&lt; double &gt;::epsilon())</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1a271a798c4388adbfcfda3f8b3ec289df" kindref="member">QgsPolygonXY</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1a271a798c4388adbfcfda3f8b3ec289df" kindref="member">QgsPolygonXY</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>4 *std::numeric_limits&lt; double &gt;::epsilon()</defval>
        </param>
        <briefdescription>
<para>Compares two polygons for equality within a specified tolerance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first polygon </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second polygon </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum difference for coordinates between the polygons </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if polygons have the same number of rings, and each ring has the same number of points and all points are equal within the specified tolerance </para></simplesect>
<simplesect kind="since"><para>QGIS 2.9 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2025" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2858" bodyend="2869"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a0ae681a13dc1398b6e30cacd13008ecc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometry::compare</definition>
        <argsstring>(const QgsMultiPolygonXY &amp;p1, const QgsMultiPolygonXY &amp;p2, double epsilon=4 *std::numeric_limits&lt; double &gt;::epsilon())</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1aedb145a58392587c67f1c23d24b7a3de" kindref="member">QgsMultiPolygonXY</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1aedb145a58392587c67f1c23d24b7a3de" kindref="member">QgsMultiPolygonXY</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>4 *std::numeric_limits&lt; double &gt;::epsilon()</defval>
        </param>
        <briefdescription>
<para>Compares two multipolygons for equality within a specified tolerance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>first multipolygon </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>second multipolygon </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum difference for coordinates between the multipolygons </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if multipolygons have the same number of polygons, the polygons have the same number of rings, and each ring has the same number of points and all points are equal within the specified tolerance </para></simplesect>
<simplesect kind="since"><para>QGIS 2.9 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2038" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2872" bodyend="2883"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ad8a6994d0fcefe2efc9dc544c3f421e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::convertPointList</definition>
        <argsstring>(const QVector&lt; QgsPointXY &gt; &amp;input, QgsPointSequence &amp;output)</argsstring>
        <name>convertPointList</name>
        <param>
          <type>const QVector&lt; <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Upgrades a point list from <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> to <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>list of <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> objects to be upgraded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>destination for list of points converted to <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2188" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2763" bodyend="2770"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a58aa9853a4c5f24f8df335cfb0bd458f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::convertPointList</definition>
        <argsstring>(const QgsPointSequence &amp;input, QVector&lt; QgsPointXY &gt; &amp;output)</argsstring>
        <name>convertPointList</name>
        <param>
          <type>const <ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>QVector&lt; <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Downgrades a point list from <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> to <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>list of <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> objects to be downgraded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>destination for list of points converted to <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2195" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2772" bodyend="2779"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9e0505ccfdfbd1c85688f96f2a701927" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometryEngine" kindref="compound">QgsGeometryEngine</ref> *</type>
        <definition>QgsGeometryEngine * QgsGeometry::createGeometryEngine</definition>
        <argsstring>(const QgsAbstractGeometry *geometry)</argsstring>
        <name>createGeometryEngine</name>
        <param>
          <type>const <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> *</type>
          <declname>geometry</declname>
        </param>
        <briefdescription>
<para>Creates and returns a new geometry engine. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2181" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="3371" bodyend="3374"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a8180c5e64b414346d03670c56bcde485" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsgeometry_8h_1a271a798c4388adbfcfda3f8b3ec289df" kindref="member">QgsPolygonXY</ref></type>
        <definition>QgsPolygonXY QgsGeometry::createPolygonFromQPolygonF</definition>
        <argsstring>(const QPolygonF &amp;polygon)</argsstring>
        <name>createPolygonFromQPolygonF</name>
        <param>
          <type>const QPolygonF &amp;</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
<para>Creates a QgsPolygonXYfrom a QPolygonF. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>source polygon </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classQgsPolygon" kindref="compound">QgsPolygon</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a5a9640c21e2980f30ccedeb5d8eb9cc3" kindref="member">createPolylineFromQPolygonF</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2000" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2827" bodyend="2832"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a5a9640c21e2980f30ccedeb5d8eb9cc3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsgeometry_8h_1aa509befb347910684b1a14f10c62cc89" kindref="member">QgsPolylineXY</ref></type>
        <definition>QgsPolylineXY QgsGeometry::createPolylineFromQPolygonF</definition>
        <argsstring>(const QPolygonF &amp;polygon)</argsstring>
        <name>createPolylineFromQPolygonF</name>
        <param>
          <type>const QPolygonF &amp;</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
<para>Creates a QgsPolylineXY from a QPolygonF. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>source polygon </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>QgsPolylineXY </para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a8180c5e64b414346d03670c56bcde485" kindref="member">createPolygonFromQPolygonF</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1992" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2834" bodyend="2843"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac99eef4d4d213c72559f4bd3fe5aefa6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::createWedgeBuffer</definition>
        <argsstring>(const QgsPoint &amp;center, double azimuth, double angularWidth, double outerRadius, double innerRadius=0)</argsstring>
        <name>createWedgeBuffer</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>azimuth</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angularWidth</declname>
        </param>
        <param>
          <type>double</type>
          <declname>outerRadius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>innerRadius</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a wedge shaped buffer from a <emphasis>center</emphasis> point. </para>        </briefdescription>
        <detaileddescription>
<para>The <emphasis>azimuth</emphasis> gives the angle (in degrees) for the middle of the wedge to point. The buffer width (in degrees) is specified by the <emphasis>angularWidth</emphasis> parameter. Note that the wedge will extend to half of the <emphasis>angularWidth</emphasis> either side of the <emphasis>azimuth</emphasis> direction.</para><para>The outer radius of the buffer is specified via <emphasis>outerRadius</emphasis>, and optionally an <emphasis>innerRadius</emphasis> can also be specified.</para><para>The returned geometry will be a CurvePolygon geometry containing circular strings. It may need to be segmentized to convert to a standard Polygon geometry.</para><para><simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="269" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="262" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a5f2a43c2136070b3660ccfcb4a122ee6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromMultiPointXY</definition>
        <argsstring>(const QgsMultiPointXY &amp;multipoint)</argsstring>
        <name>fromMultiPointXY</name>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1a9cfedf77fdc8df5917f214afe763eb0b" kindref="member">QgsMultiPointXY</ref> &amp;</type>
          <declname>multipoint</declname>
        </param>
        <briefdescription>
<para>Creates a new geometry from a QgsMultiPointXY object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="217" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="195" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ab612595c4c6c252bfae5a9de47bc2aa1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromMultiPolygonXY</definition>
        <argsstring>(const QgsMultiPolygonXY &amp;multipoly)</argsstring>
        <name>fromMultiPolygonXY</name>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1aedb145a58392587c67f1c23d24b7a3de" kindref="member">QgsMultiPolygonXY</ref> &amp;</type>
          <declname>multipoly</declname>
        </param>
        <briefdescription>
<para>Creates a new geometry from a <ref refid="classQgsMultiPolygon" kindref="compound">QgsMultiPolygon</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="248" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="215" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a4410bbc09f75890b8ae70ed2f028edad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromMultiPolylineXY</definition>
        <argsstring>(const QgsMultiPolylineXY &amp;multiline)</argsstring>
        <name>fromMultiPolylineXY</name>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1a6451e2e014d2984af57e090a10b1e16f" kindref="member">QgsMultiPolylineXY</ref> &amp;</type>
          <declname>multiline</declname>
        </param>
        <briefdescription>
<para>Creates a new geometry from a QgsMultiPolylineXY object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="244" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="205" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a81306181071ffa590d0553a7f37dc654" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromPointXY</definition>
        <argsstring>(const QgsPointXY &amp;point)</argsstring>
        <name>fromPointXY</name>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Creates a new geometry from a <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="215" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="160" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aae8fe6015cafdd4990feff3077881b60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromPolygonXY</definition>
        <argsstring>(const QgsPolygonXY &amp;polygon)</argsstring>
        <name>fromPolygonXY</name>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1a271a798c4388adbfcfda3f8b3ec289df" kindref="member">QgsPolygonXY</ref> &amp;</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
<para>Creates a new geometry from a <ref refid="classQgsPolygon" kindref="compound">QgsPolygon</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="246" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="185" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a8e54d30b707f11c34c6ece5049b40626" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromPolyline</definition>
        <argsstring>(const QgsPolyline &amp;polyline)</argsstring>
        <name>fromPolyline</name>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1ae40bfa8c4815c0ea40009f8a13deae52" kindref="member">QgsPolyline</ref> &amp;</type>
          <declname>polyline</declname>
        </param>
        <briefdescription>
<para>Creates a new LineString geometry from a list of <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> points. </para>        </briefdescription>
        <detaileddescription>
<para>This method will respect any Z or M dimensions present in the input points. E.g. if input points are PointZ type, the resultant linestring will be a LineStringZ type.</para><para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="241" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a4bec85aab9d4adc70c37164cb9efc526" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromPolylineXY</definition>
        <argsstring>(const QgsPolylineXY &amp;polyline)</argsstring>
        <name>fromPolylineXY</name>
        <param>
          <type>const <ref refid="qgsgeometry_8h_1aa509befb347910684b1a14f10c62cc89" kindref="member">QgsPolylineXY</ref> &amp;</type>
          <declname>polyline</declname>
        </param>
        <briefdescription>
<para>Creates a new LineString geometry from a list of <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> points. </para>        </briefdescription>
        <detaileddescription>
<para>Using <ref refid="classQgsGeometry_1a8e54d30b707f11c34c6ece5049b40626" kindref="member">fromPolyline()</ref> is preferred, as <ref refid="classQgsGeometry_1a8e54d30b707f11c34c6ece5049b40626" kindref="member">fromPolyline()</ref> is more efficient and will respect any Z or M dimensions present in the input points.</para><para><simplesect kind="note"><para>In QGIS 2.x this method was available as <ref refid="classQgsGeometry_1a8e54d30b707f11c34c6ece5049b40626" kindref="member">fromPolyline()</ref>.</para></simplesect>
<simplesect kind="see"><para><ref refid="classQgsGeometry_1a8e54d30b707f11c34c6ece5049b40626" kindref="member">fromPolyline()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="230" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="170" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a2e98f8b3ed5b7ac0f21b8e8267dffbdd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromQPointF</definition>
        <argsstring>(QPointF point)</argsstring>
        <name>fromQPointF</name>
        <param>
          <type>QPointF</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Construct geometry from a QPointF. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>source QPointF </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>QGIS 2.7 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1975" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2810" bodyend="2813"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a48cd35ee7b84733f24b603e4b14a30ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromQPolygonF</definition>
        <argsstring>(const QPolygonF &amp;polygon)</argsstring>
        <name>fromQPolygonF</name>
        <param>
          <type>const QPolygonF &amp;</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
<para>Construct geometry from a QPolygonF. </para>        </briefdescription>
        <detaileddescription>
<para>If the polygon is closed than the resultant geometry will be a polygon, if it is open than the geometry will be a polyline. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>source QPolygonF </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>QGIS 2.7 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1984" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2815" bodyend="2825"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a1104cc793e403d30afc7376b72cff3cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromRect</definition>
        <argsstring>(const QgsRectangle &amp;rect)</argsstring>
        <name>fromRect</name>
        <param>
          <type>const <ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref> &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Creates a new geometry from a <ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="250" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="225" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a736b669b7ae22b13848562970707d180" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::fromWkt</definition>
        <argsstring>(const QString &amp;wkt)</argsstring>
        <name>fromWkt</name>
        <param>
          <type>const QString &amp;</type>
          <declname>wkt</declname>
        </param>
        <briefdescription>
<para>Creates a new geometry from a WKT string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="213" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="150" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a3186a22c91dec4d90517ec44cbcf2cde" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::polygonize</definition>
        <argsstring>(const QVector&lt; QgsGeometry &gt; &amp;geometries)</argsstring>
        <name>polygonize</name>
        <param>
          <type>const QVector&lt; <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &gt; &amp;</type>
          <declname>geometries</declname>
        </param>
        <briefdescription>
<para>Creates a GeometryCollection geometry containing possible polygons formed from the constituent linework of a set of <emphasis>geometries</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The input geometries must be fully noded (i.e. nodes exist at every common intersection of the geometries). The easiest way to ensure this is to first call <ref refid="classQgsGeometry_1a4b2eaa00936c617ee2b1f57d71b704d3" kindref="member">unaryUnion()</ref> on the set of input geometries and then pass the result to <ref refid="classQgsGeometry_1a3186a22c91dec4d90517ec44cbcf2cde" kindref="member">polygonize()</ref>. An empty geometry will be returned in the case of errors. <simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1876" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2516" bodyend="2533"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a4b2eaa00936c617ee2b1f57d71b704d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::unaryUnion</definition>
        <argsstring>(const QVector&lt; QgsGeometry &gt; &amp;geometries)</argsstring>
        <name>unaryUnion</name>
        <param>
          <type>const QVector&lt; <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> &gt; &amp;</type>
          <declname>geometries</declname>
        </param>
        <briefdescription>
<para>Compute the unary union on a list of <emphasis>geometries</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>May be faster than an iterative union on a set of geometries. The returned geometry will be fully noded, i.e. a node will be created at every common intersection of the input geometries. An empty geometry will be returned in the case of errors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="1866" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2505" bodyend="2514"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classQgsGeometry_1a047f29dd41141305fe2429f1b0879cde" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::convertToLine</definition>
        <argsstring>(bool destMultipart) const</argsstring>
        <name>convertToLine</name>
        <param>
          <type>bool</type>
          <declname>destMultipart</declname>
        </param>
        <briefdescription>
<para>Try to convert the geometry to a line. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2228" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="3144" bodyend="3250"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a9eb354f7701f76d151fd0e3e1f8ad86e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::convertToPoint</definition>
        <argsstring>(bool destMultipart) const</argsstring>
        <name>convertToPoint</name>
        <param>
          <type>bool</type>
          <declname>destMultipart</declname>
        </param>
        <briefdescription>
<para>Try to convert the geometry to a point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2226" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="3053" bodyend="3142"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a84418a93ecb55cb3e74dc82fece8915b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref></type>
        <definition>QgsGeometry QgsGeometry::convertToPolygon</definition>
        <argsstring>(bool destMultipart) const</argsstring>
        <name>convertToPolygon</name>
        <param>
          <type>bool</type>
          <declname>destMultipart</declname>
        </param>
        <briefdescription>
<para>Try to convert the geometry to a polygon. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2230" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="3252" bodyend="3369"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a3afa8006a510832c098b03774d8df5e1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::detach</definition>
        <argsstring>()</argsstring>
        <name>detach</name>
        <briefdescription>
<para>Detaches the private geometry container from this instance, and clones the existing geometry ready for modification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2214" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="102" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1aa368e804aa179af9382d1178de152053" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::reset</definition>
        <argsstring>(std::unique_ptr&lt; QgsAbstractGeometry &gt; newGeometry)</argsstring>
        <name>reset</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> &gt;</type>
          <declname>newGeometry</declname>
        </param>
        <briefdescription>
<para>Detaches the private geometry container from this instance, and resets it to a new abstract geometry pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2220" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="114" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ac3c96af645c641a0169593f2e7739274" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classQgsLineString" kindref="compound">QgsLineString</ref> &gt;</type>
        <definition>std::unique_ptr&lt; QgsLineString &gt; QgsGeometry::smoothLine</definition>
        <argsstring>(const QgsLineString &amp;line, unsigned int iterations=1, double offset=0.25, double minimumDistance=-1, double maxAngle=180.0) const</argsstring>
        <name>smoothLine</name>
        <param>
          <type>const <ref refid="classQgsLineString" kindref="compound">QgsLineString</ref> &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>offset</declname>
          <defval>0.25</defval>
        </param>
        <param>
          <type>double</type>
          <declname>minimumDistance</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>maxAngle</declname>
          <defval>180.0</defval>
        </param>
        <briefdescription>
<para>Smooths a polyline using the Chaikin algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>line to smooth </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>number of smoothing iterations to run. More iterations results in a smoother geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>fraction of line to create new vertices along, between 0 and 1.0, e.g., the default value of 0.25 will create new vertices 25% and 75% along each line segment of the geometry for each iteration. Smaller values result in &quot;tighter&quot; smoothing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum segment length to apply smoothing to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum angle at node (0-180) at which smoothing will be applied </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2243" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="3029" bodyend="3034"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1a1feb34da1f27af165356a58c114c0255" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classQgsPolygon" kindref="compound">QgsPolygon</ref> &gt;</type>
        <definition>std::unique_ptr&lt; QgsPolygon &gt; QgsGeometry::smoothPolygon</definition>
        <argsstring>(const QgsPolygon &amp;polygon, unsigned int iterations=1, double offset=0.25, double minimumDistance=-1, double maxAngle=180.0) const</argsstring>
        <name>smoothPolygon</name>
        <param>
          <type>const <ref refid="classQgsPolygon" kindref="compound">QgsPolygon</ref> &amp;</type>
          <declname>polygon</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>offset</declname>
          <defval>0.25</defval>
        </param>
        <param>
          <type>double</type>
          <declname>minimumDistance</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>maxAngle</declname>
          <defval>180.0</defval>
        </param>
        <briefdescription>
<para>Smooths a polygon using the Chaikin algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon</parametername>
</parameternamelist>
<parameterdescription>
<para>polygon to smooth </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>number of smoothing iterations to run. More iterations results in a smoother geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>fraction of segment to create new vertices along, between 0 and 1.0, e.g., the default value of 0.25 will create new vertices 25% and 75% along each line segment of the geometry for each iteration. Smaller values result in &quot;tighter&quot; smoothing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumDistance</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum segment length to apply smoothing to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum angle at node (0-180) at which smoothing will be applied </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2257" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="3036" bodyend="3051"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classQgsGeometry_1aad32394e86c35ef80705f82c4af2c937" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::convertPolygon</definition>
        <argsstring>(const QgsPolygon &amp;input, QgsPolygonXY &amp;output)</argsstring>
        <name>convertPolygon</name>
        <param>
          <type>const <ref refid="classQgsPolygon" kindref="compound">QgsPolygon</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="qgsgeometry_8h_1a271a798c4388adbfcfda3f8b3ec289df" kindref="member">QgsPolygonXY</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2223" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2794" bodyend="2808"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometry_1ad21d9208ee3b66d0f89e83e0d886840f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometry::convertToPolyline</definition>
        <argsstring>(const QgsPointSequence &amp;input, QgsPolylineXY &amp;output)</argsstring>
        <name>convertToPolyline</name>
        <param>
          <type>const <ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="qgsgeometry_8h_1aa509befb347910684b1a14f10c62cc89" kindref="member">QgsPolylineXY</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="2222" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.cpp" bodystart="2781" bodyend="2792"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A geometry is the spatial representation of a feature. </para>    </briefdescription>
    <detaileddescription>
<para>Since QGIS 2.10, <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> acts as a generic container for geometry objects. <ref refid="classQgsGeometry" kindref="compound">QgsGeometry</ref> is implicitly shared, so making copies of geometries is inexpensive. The geometry container class can also be stored inside a QVariant object.</para><para>The actual geometry representation is stored as a <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> within the container, and can be accessed via the <ref refid="classQgsGeometry_1a6418c395776ccc5a13466a5d28039225" kindref="member">get()</ref> method or set using the <ref refid="classQgsGeometry_1aa9309455d08598378f06fa758e64cd3e" kindref="member">set()</ref> method. </para>    </detaileddescription>
    <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" line="107" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometry.h" bodystart="106" bodyend="2263"/>
    <listofallmembers>
      <member refid="classQgsGeometry_1a04fca92ab3389e9d3935778aa61ad3ed" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>addPart</name></member>
      <member refid="classQgsGeometry_1a5f15f50c306e6aa9f11c883ce63bb56d" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>addPart</name></member>
      <member refid="classQgsGeometry_1a62d4f254f1dac944cedcacfdc3f78238" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>addPart</name></member>
      <member refid="classQgsGeometry_1a4fc810e884af27632b8252708fbb829e" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>addPart</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a91cad1fdc950bdb835c863dbb3785252" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>AddPartNotMultiGeometry</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a7b61f09e9e0067c041002ceaa3b8ecc1" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>AddPartSelectedGeometryNotFound</name></member>
      <member refid="classQgsGeometry_1a60cc0406f3917ce2d7a5c8d9294e388f" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>addRing</name></member>
      <member refid="classQgsGeometry_1a9ea039d914ba290b70bcfdc9631d7b8b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>addRing</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ac5f7e8303c05524e640642e66f345a29" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>AddRingCrossesExistingRings</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a70d7e3a09828cb8f8b83cf720407ce38" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>AddRingNotClosed</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a455c3ff8134f8acdb7f46d91aa0f2b40" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>AddRingNotInExistingFeature</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7af1ef66205e58f1194a8bbc341f98de2c" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>AddRingNotValid</name></member>
      <member refid="classQgsGeometry_1a1699b205d01c365a50ead2d0bf2bbcfb" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>adjacentVertices</name></member>
      <member refid="classQgsGeometry_1ae4bccd7538d8653844e372f102cbbb7a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>angleAtVertex</name></member>
      <member refid="classQgsGeometry_1a99fb82ee78892d4d52f748dbf8880822" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>area</name></member>
      <member refid="classQgsGeometry_1a5801ab30650e161147d28a2e7220d3d3" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asGeometryCollection</name></member>
      <member refid="classQgsGeometry_1ac86c01b71289527046eda8f1299aa520" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asJson</name></member>
      <member refid="classQgsGeometry_1a4d72046a766512e47543be6579f0d1e4" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asMultiPoint</name></member>
      <member refid="classQgsGeometry_1a179006479c6ddd60d493be3234cffedc" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asMultiPolygon</name></member>
      <member refid="classQgsGeometry_1a927b0c648d5d0b56acd2a3924981d509" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asMultiPolyline</name></member>
      <member refid="classQgsGeometry_1a77bddd38cd041a4e2988fa8e014c060f" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asPoint</name></member>
      <member refid="classQgsGeometry_1a52924f4027ceac360a42048181f34849" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asPolygon</name></member>
      <member refid="classQgsGeometry_1a74acd98e1161e7aaee00e6ba521700e0" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asPolyline</name></member>
      <member refid="classQgsGeometry_1a9569bebc8ef2866605146b86fcf90b69" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asQPointF</name></member>
      <member refid="classQgsGeometry_1a01d0f7bc8a9f46d5f7d0bf349f72a0de" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asQPolygonF</name></member>
      <member refid="classQgsGeometry_1ae70380313a23d7f652d89a29327035c7" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asWkb</name></member>
      <member refid="classQgsGeometry_1af049bb336e5fc77145be4b4eab9bdbba" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>asWkt</name></member>
      <member refid="classQgsGeometry_1ae6ff20f0a14c87ef4c3576eb6a7a1b96" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>avoidIntersections</name></member>
      <member refid="classQgsGeometry_1adfc04c94b51cdeb55942b699fdd4d564" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>boundingBox</name></member>
      <member refid="classQgsGeometry_1a38524333d988977edd8826e0dbc76ceb" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>boundingBoxIntersects</name></member>
      <member refid="classQgsGeometry_1ac542cdd9aada7f952867b6920e52c38a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>boundingBoxIntersects</name></member>
      <member refid="classQgsGeometry_1ab7302c054a2c5514222b4bd71df71ab8" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>buffer</name></member>
      <member refid="classQgsGeometry_1a33731232cc47cd571b8b1f99ada52328" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>buffer</name></member>
      <member refid="classQgsGeometry_1a50e825745210d6f83f4467fe828213c3" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>BufferSide</name></member>
      <member refid="classQgsGeometry_1a881ee79f7a97c53826f351265db07801aece40a9cadd90b0b7da704cf781166f5" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>CapFlat</name></member>
      <member refid="classQgsGeometry_1a881ee79f7a97c53826f351265db07801a7462e567bfbd636a3231e4c0825914dd" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>CapRound</name></member>
      <member refid="classQgsGeometry_1a881ee79f7a97c53826f351265db07801a5dc543d50ad74a56b169b523ab2ffb9a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>CapSquare</name></member>
      <member refid="classQgsGeometry_1a9af6067caef47d380d45c32569abc10b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>centroid</name></member>
      <member refid="classQgsGeometry_1a10f637ba711e78a3fbb706c93c88b49d" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>clipped</name></member>
      <member refid="classQgsGeometry_1aaa0c911cb37cc33dd024662ec314fdae" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>closestSegmentWithContext</name></member>
      <member refid="classQgsGeometry_1a1ef580601d1af466c978b51013fceebc" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>closestVertex</name></member>
      <member refid="classQgsGeometry_1ae883933fcb91a8338335f545e4e7241e" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>closestVertexWithContext</name></member>
      <member refid="classQgsGeometry_1a42cbc7025e8c13e697b4fd3ad365ea2f" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>collectGeometry</name></member>
      <member refid="classQgsGeometry_1a5770b01aac776ee2ba56cc48c708231b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>combine</name></member>
      <member refid="classQgsGeometry_1a1d85a49ccdb4d4bf20c353c54fb50387" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>compare</name></member>
      <member refid="classQgsGeometry_1a00d8417eb994b743924ab009295b85b5" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>compare</name></member>
      <member refid="classQgsGeometry_1a0ae681a13dc1398b6e30cacd13008ecc" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>compare</name></member>
      <member refid="classQgsGeometry_1a2b424b8d12e145f9d9b4f51ced93ebf5" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>const_parts_begin</name></member>
      <member refid="classQgsGeometry_1abe4866d9aeae238ae2c1587c44ab9a3d" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>const_parts_end</name></member>
      <member refid="classQgsGeometry_1a6d80b6a9b799d6be0a3dd1d4f932db1b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>constGet</name></member>
      <member refid="classQgsGeometry_1add3d0333c571da4fc557a36dce0a863e" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>constParts</name></member>
      <member refid="classQgsGeometry_1a7461d3a2c4e9d62256e58e7d15446f90" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>contains</name></member>
      <member refid="classQgsGeometry_1ada1f739547c775b266f8728c426176ef" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>contains</name></member>
      <member refid="classQgsGeometry_1aec7c20eac8379be9ad17fc7fcb54575c" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>convertGeometryCollectionToSubclass</name></member>
      <member refid="classQgsGeometry_1ad8a6994d0fcefe2efc9dc544c3f421e6" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>convertPointList</name></member>
      <member refid="classQgsGeometry_1a58aa9853a4c5f24f8df335cfb0bd458f" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>convertPointList</name></member>
      <member refid="classQgsGeometry_1aad32394e86c35ef80705f82c4af2c937" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>convertPolygon</name></member>
      <member refid="classQgsGeometry_1a047f29dd41141305fe2429f1b0879cde" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>convertToLine</name></member>
      <member refid="classQgsGeometry_1ac841fa2969e960ef7f6e94769d574e1a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>convertToMultiType</name></member>
      <member refid="classQgsGeometry_1a9eb354f7701f76d151fd0e3e1f8ad86e" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>convertToPoint</name></member>
      <member refid="classQgsGeometry_1a84418a93ecb55cb3e74dc82fece8915b" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>convertToPolygon</name></member>
      <member refid="classQgsGeometry_1ad21d9208ee3b66d0f89e83e0d886840f" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>convertToPolyline</name></member>
      <member refid="classQgsGeometry_1a81e44ab5a928b19ba7141b27e021fb65" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>convertToSingleType</name></member>
      <member refid="classQgsGeometry_1a96eb87e99cb73c50f35537a1a06d0a37" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>convertToStraightSegment</name></member>
      <member refid="classQgsGeometry_1a74a3aaabd6fd7117669a57ac84a6774b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>convertToType</name></member>
      <member refid="classQgsGeometry_1aaabf49319715c48c175a0391959ea27b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>convexHull</name></member>
      <member refid="classQgsGeometry_1a9e0505ccfdfbd1c85688f96f2a701927" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>createGeometryEngine</name></member>
      <member refid="classQgsGeometry_1a8180c5e64b414346d03670c56bcde485" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>createPolygonFromQPolygonF</name></member>
      <member refid="classQgsGeometry_1a5a9640c21e2980f30ccedeb5d8eb9cc3" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>createPolylineFromQPolygonF</name></member>
      <member refid="classQgsGeometry_1ac99eef4d4d213c72559f4bd3fe5aefa6" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>createWedgeBuffer</name></member>
      <member refid="classQgsGeometry_1a9c606981232ba9b8b99bf827123b017e" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>crosses</name></member>
      <member refid="classQgsGeometry_1a15b1998b7c39a01b9a0c42916de7563b" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>d</name></member>
      <member refid="classQgsGeometry_1ae8e3e97aec07229669d75739b18e61da" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>delaunayTriangulation</name></member>
      <member refid="classQgsGeometry_1afc5b3cac56cd03b4e69c56137d611418" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>deletePart</name></member>
      <member refid="classQgsGeometry_1a0710a6c5b594a97f9a499d26af7a0268" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>deleteRing</name></member>
      <member refid="classQgsGeometry_1a1b5ebcb56dc5e7b2f4c591eb16545c92" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>deleteVertex</name></member>
      <member refid="classQgsGeometry_1a0cf7569f8748536ccacac0817f877b2b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>densifyByCount</name></member>
      <member refid="classQgsGeometry_1a1f85fe89ed10678d5782c8cc7622dd45" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>densifyByDistance</name></member>
      <member refid="classQgsGeometry_1a3afa8006a510832c098b03774d8df5e1" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>detach</name></member>
      <member refid="classQgsGeometry_1a2ba95f8ade7d34ce506f3929342d0611" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>difference</name></member>
      <member refid="classQgsGeometry_1a55266c2687f72e654da1cb696a5cab2d" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>disjoint</name></member>
      <member refid="classQgsGeometry_1a58ac1ca0787f2091121a3ce07fb4e495" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>distance</name></member>
      <member refid="classQgsGeometry_1abc1a159d6a2c78f5b1c154997dfe428c" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>distanceToVertex</name></member>
      <member refid="classQgsGeometry_1aeabde30788b59041cc15a7fc5665cb1a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>draw</name></member>
      <member refid="classQgsGeometry_1a881ee79f7a97c53826f351265db07801" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>EndCapStyle</name></member>
      <member refid="classQgsGeometry_1a7c3069e744dbca4c9605d78454d01841" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>equals</name></member>
      <member refid="classQgsGeometry_1aceb42dac30112f801e729d4ef922d8bb" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>extendLine</name></member>
      <member refid="classQgsGeometry_1a5a3d3d637a12eee38117ac4463651b44" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>extrude</name></member>
      <member refid="classQgsGeometry_1a7bb5e7303e64b1f481b549720a710755" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>filterVertices</name></member>
      <member refid="classQgsGeometry_1a77b081a049d8a78811867da10104fa10" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>forceRHR</name></member>
      <member refid="classQgsGeometry_1a5f2a43c2136070b3660ccfcb4a122ee6" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromMultiPointXY</name></member>
      <member refid="classQgsGeometry_1ab612595c4c6c252bfae5a9de47bc2aa1" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromMultiPolygonXY</name></member>
      <member refid="classQgsGeometry_1a4410bbc09f75890b8ae70ed2f028edad" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromMultiPolylineXY</name></member>
      <member refid="classQgsGeometry_1a81306181071ffa590d0553a7f37dc654" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromPointXY</name></member>
      <member refid="classQgsGeometry_1aae8fe6015cafdd4990feff3077881b60" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromPolygonXY</name></member>
      <member refid="classQgsGeometry_1a8e54d30b707f11c34c6ece5049b40626" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromPolyline</name></member>
      <member refid="classQgsGeometry_1a4bec85aab9d4adc70c37164cb9efc526" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromPolylineXY</name></member>
      <member refid="classQgsGeometry_1a2e98f8b3ed5b7ac0f21b8e8267dffbdd" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromQPointF</name></member>
      <member refid="classQgsGeometry_1a48cd35ee7b84733f24b603e4b14a30ae" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromQPolygonF</name></member>
      <member refid="classQgsGeometry_1a1104cc793e403d30afc7376b72cff3cc" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromRect</name></member>
      <member refid="classQgsGeometry_1ab0e572d06fef008c619651f5a55944f8" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromWkb</name></member>
      <member refid="classQgsGeometry_1a706f2674d245eefdc0b95038a54ec304" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromWkb</name></member>
      <member refid="classQgsGeometry_1a736b669b7ae22b13848562970707d180" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>fromWkt</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a8429e6072d0ab23bad16befe08bc343c" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>GeometryEngineError</name></member>
      <member refid="classQgsGeometry_1a6418c395776ccc5a13466a5d28039225" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>get</name></member>
      <member refid="classQgsGeometry_1a9edd5322a99feb806445eb3892901c50" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>hausdorffDistance</name></member>
      <member refid="classQgsGeometry_1a09ac3dc35ef4a1241d2dba23dcbf678b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>hausdorffDistanceDensify</name></member>
      <member refid="classQgsGeometry_1a7ffc1e0cdf9ed8b51048bdc7c5da605b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>insertVertex</name></member>
      <member refid="classQgsGeometry_1a53a30c84cfdf81aaf06fe33626aa14e8" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>insertVertex</name></member>
      <member refid="classQgsGeometry_1a58b57cc606fabaf4e26c97092cba345b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>interpolate</name></member>
      <member refid="classQgsGeometry_1ae4a4d4529237328bbb57d81300e52eed" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>interpolateAngle</name></member>
      <member refid="classQgsGeometry_1a6ca0f918c7c67aff8ac9e0094707c99e" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>intersection</name></member>
      <member refid="classQgsGeometry_1afa1b1c262828a12048178934be302b81" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>intersects</name></member>
      <member refid="classQgsGeometry_1adef699cedf47b6a337f82a62c7f04877" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>intersects</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a035d5fc06a3d29a19027b3d5a7e8fb6b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>InvalidBaseGeometry</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a994f8de96576666445b4801a663aaee0" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>InvalidInputGeometryType</name></member>
      <member refid="classQgsGeometry_1abac9728296e99ce814a081a55e39c385" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>isEmpty</name></member>
      <member refid="classQgsGeometry_1af79599916272c429fa98f6d8f2ac0de6" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>isGeosEqual</name></member>
      <member refid="classQgsGeometry_1a13546b5769a787996a61276e1939f38b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>isGeosValid</name></member>
      <member refid="classQgsGeometry_1a9a8893b066d73918f8fcfe95d439b652" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>isMultipart</name></member>
      <member refid="classQgsGeometry_1ac895eb59a21eab8d9337e0b5c866a8c3" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>isNull</name></member>
      <member refid="classQgsGeometry_1a8c29dc5c58eb3c5e7277a62fcda3e61d" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>isSimple</name></member>
      <member refid="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>JoinStyle</name></member>
      <member refid="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926a5a101cc3d7bc9daf7aaa7ca28d4481e1" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>JoinStyleBevel</name></member>
      <member refid="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926a1d0827cb26f32e07fbb524897d8bda18" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>JoinStyleMiter</name></member>
      <member refid="classQgsGeometry_1a1126764b45cb55374e859b9bda05a926a9075b626fb08f9519e220465b434c020" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>JoinStyleRound</name></member>
      <member refid="classQgsGeometry_1a462cf6e8c1ade59fccc784f532ffdb73" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>lastError</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ad640895db3eead7a857511e4fa013ea8" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>LayerNotEditable</name></member>
      <member refid="classQgsGeometry_1a1c40b0c5919ba64f8ffef6b257d6b758" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>length</name></member>
      <member refid="classQgsGeometry_1a11af1b509c2948401e0bceb005f673ca" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>lineLocatePoint</name></member>
      <member refid="classQgsGeometry_1a4137e7e7d97ba56b1e268678784de82b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>makeDifference</name></member>
      <member refid="classQgsGeometry_1a14769ef8e2e912ca9638346e61746303" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>makeDifferenceInPlace</name></member>
      <member refid="classQgsGeometry_1a9e91518c5ea16bc24ff60e6ba8d7ae66" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>makeValid</name></member>
      <member refid="classQgsGeometry_1a5cb6f1a518f2e40773b5d01dcadc75f4" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>mapToPixel</name></member>
      <member refid="classQgsGeometry_1ab5dc4252feda907072bf79a8f36bb2fe" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>mergeLines</name></member>
      <member refid="classQgsGeometry_1ab49702823fca3fc28e1f4547788a0953" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>minimalEnclosingCircle</name></member>
      <member refid="classQgsGeometry_1a902ef28c9969be84b2d9e77f040cb6bb" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>minimalEnclosingCircle</name></member>
      <member refid="classQgsGeometry_1a560f1a208cb9ba7f43ea51b7670d7a59" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>mLastError</name></member>
      <member refid="classQgsGeometry_1af54b5584cad191919f1916ea78cebb28" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>moveVertex</name></member>
      <member refid="classQgsGeometry_1a18b2a5a02296938518bbf8ee8b270854" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>moveVertex</name></member>
      <member refid="classQgsGeometry_1a412e55ba03454baa52ec3dc49901baaa" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>nearestPoint</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ad8f0d371214be65abdc49d288f36ca29" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>NothingHappened</name></member>
      <member refid="classQgsGeometry_1ad9508e6f1c6247ce6347f46740d61818" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>offsetCurve</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>OperationResult</name></member>
      <member refid="classQgsGeometry_1a8e44cd6e94d616c3e5e33dc458bba0f5" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>operator QVariant</name></member>
      <member refid="classQgsGeometry_1a9c9767f5dc9c364c2ef3cef92d6533f7" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>operator=</name></member>
      <member refid="classQgsGeometry_1a9572d5cf0714fa5fc377b36ed71335d8" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>orientedMinimumBoundingBox</name></member>
      <member refid="classQgsGeometry_1ada2cff69089f0184e6455aeeca05a19a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>orientedMinimumBoundingBox</name></member>
      <member refid="classQgsGeometry_1a9dafc1e80cfaeb59f12ea9671b71fce7" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>orthogonalize</name></member>
      <member refid="classQgsGeometry_1afdea2fdb1a12abc07024a6698136dea3" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>overlaps</name></member>
      <member refid="classQgsGeometry_1aa610ca7d3b15813d634ca3ea7910950b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>parts</name></member>
      <member refid="classQgsGeometry_1a74f9e88f75e729a2f6af1bef7894ba4a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>parts_begin</name></member>
      <member refid="classQgsGeometry_1ac181da894563701f014e944c1a200e14" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>parts_end</name></member>
      <member refid="classQgsGeometry_1a3975e1ac16832371854703dfe699d5f2" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>pointOnSurface</name></member>
      <member refid="classQgsGeometry_1a2142d7d576a91fc8c3775fc10d6a4e26" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>poleOfInaccessibility</name></member>
      <member refid="classQgsGeometry_1a3186a22c91dec4d90517ec44cbcf2cde" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>polygonize</name></member>
      <member refid="classQgsGeometry_1af636a2f61ba752f4cbc5c4c97705167f" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>QgsGeometry</name></member>
      <member refid="classQgsGeometry_1af1affc0be36e99c9c469f6f78e86c45b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>QgsGeometry</name></member>
      <member refid="classQgsGeometry_1a8c31d8d8b2a847c52e794d6db88a5485" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>QgsGeometry</name></member>
      <member refid="classQgsGeometry_1a61afd02d97f79f2b1de534f33375e928" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>QgsGeometry</name></member>
      <member refid="classQgsGeometry_1a6af0927389ba39b51c72963640483803" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>QgsInternalGeometryEngine</name></member>
      <member refid="classQgsGeometry_1abea731230e1528ec0316553d2175fca8" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>removeDuplicateNodes</name></member>
      <member refid="classQgsGeometry_1afc97580ed7289056bc58e1fb467314cb" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>removeInteriorRings</name></member>
      <member refid="classQgsGeometry_1a8b2dd31d4ef71bf07e29e9f76e20c8c5" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>requiresConversionToStraightSegments</name></member>
      <member refid="classQgsGeometry_1aa368e804aa179af9382d1178de152053" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>reset</name></member>
      <member refid="classQgsGeometry_1a52b3cdac7cb7c5ee8212507ff1caddf7" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>reshapeGeometry</name></member>
      <member refid="classQgsGeometry_1a3a1b5d2cb62d5e26c51f168cea909aa8" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>rotate</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7aa10c17d26d45bc58f2067ebb5d3253ad" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>SelectionIsEmpty</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ad4c4ec16b39b4fbfc7136da440c8f8c2" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>SelectionIsGreaterThanOne</name></member>
      <member refid="classQgsGeometry_1aa9309455d08598378f06fa758e64cd3e" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>set</name></member>
      <member refid="classQgsGeometry_1aff684223d66cf3f4f7c15dcd1a8ab27b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>shortestLine</name></member>
      <member refid="classQgsGeometry_1a50e825745210d6f83f4467fe828213c3af4679988b5f50319dbd3b52077e17031" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>SideLeft</name></member>
      <member refid="classQgsGeometry_1a50e825745210d6f83f4467fe828213c3a61528cdd94980df7b5f121bed1fd25b6" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>SideRight</name></member>
      <member refid="classQgsGeometry_1ade6a5a7c243b7649bf58d5ed44f41e6a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>simplify</name></member>
      <member refid="classQgsGeometry_1ac323e4531e8b55789b6593e4769cf80b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>singleSidedBuffer</name></member>
      <member refid="classQgsGeometry_1aeeb87ca00241a6e4e8ca7a168c30e8be" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>smooth</name></member>
      <member refid="classQgsGeometry_1ac3c96af645c641a0169593f2e7739274" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>smoothLine</name></member>
      <member refid="classQgsGeometry_1a1feb34da1f27af165356a58c114c0255" prot="private" virt="non-virtual"><scope>QgsGeometry</scope><name>smoothPolygon</name></member>
      <member refid="classQgsGeometry_1a78fbff228151e606b43b84814a1bde64" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>snappedToGrid</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7a2379e57dbdbbc5fd7827afdb69ec3da0" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>SplitCannotSplitPoint</name></member>
      <member refid="classQgsGeometry_1afbe7bd6d0db0cff2b1c3ac151bf7681b" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>splitGeometry</name></member>
      <member refid="classQgsGeometry_1a69634cb3054a619126d604a186f3690d" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>sqrDistToVertexAt</name></member>
      <member refid="classQgsGeometry_1af9bd71438ba5aea8295a67fb8f64e6cd" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>subdivide</name></member>
      <member refid="classQgsGeometry_1a8baf383b737d73cafeabe09f5b0d7ef7ab9c61aa569953179956a4c9e19be0da4" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>Success</name></member>
      <member refid="classQgsGeometry_1abb0b07138b6c4df09446e21c23f5ec70" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>symDifference</name></member>
      <member refid="classQgsGeometry_1a934e7da694627af2a95944cb327f7b20" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>taperedBuffer</name></member>
      <member refid="classQgsGeometry_1a3a929249c1cc2c4cea95e81f92c6ee7f" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>touches</name></member>
      <member refid="classQgsGeometry_1ac69d7afedd56552c9bad65afa6d1618f" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>transform</name></member>
      <member refid="classQgsGeometry_1accf8c558f506c9df392856bee1ff2540" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>transform</name></member>
      <member refid="classQgsGeometry_1a3c64245aba1e3f957c6e46741572821a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>transformVertices</name></member>
      <member refid="classQgsGeometry_1a47a7fa907aadc824c1bc55b6f549918a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>translate</name></member>
      <member refid="classQgsGeometry_1a03a629309b62d163266a6d7d2298601a" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>type</name></member>
      <member refid="classQgsGeometry_1a4b2eaa00936c617ee2b1f57d71b704d3" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>unaryUnion</name></member>
      <member refid="classQgsGeometry_1ad75ff36dc6b27547a7043a92c7353503" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>validateGeometry</name></member>
      <member refid="classQgsGeometry_1aff2cde1dd216fd769479445672b8c734" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>ValidationMethod</name></member>
      <member refid="classQgsGeometry_1aff2cde1dd216fd769479445672b8c734a955066d753ba96304dc468af84bbed4f" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>ValidatorGeos</name></member>
      <member refid="classQgsGeometry_1aff2cde1dd216fd769479445672b8c734a1736648ac1a03c6bbe04e0768fcde42f" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>ValidatorQgisInternal</name></member>
      <member refid="classQgsGeometry_1a4ba726b9bb2f40d9424bcdf321df1cee" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>variableWidthBufferByM</name></member>
      <member refid="classQgsGeometry_1a4de6615ad51648577d66983c6efd5203" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>vertexAt</name></member>
      <member refid="classQgsGeometry_1a392620c8bcd3a7f58f7498996c3efaf3" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>vertexIdFromVertexNr</name></member>
      <member refid="classQgsGeometry_1abc714bc8710d5427fffdfab27e445755" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>vertexNrFromVertexId</name></member>
      <member refid="classQgsGeometry_1a1e45b50fdc64bbc942398eeed7bdc6ca" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>vertices</name></member>
      <member refid="classQgsGeometry_1ac323a3a24b4159cd584d9dde79682a0c" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>vertices_begin</name></member>
      <member refid="classQgsGeometry_1afb1e56235cdc1903777c24582513451e" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>vertices_end</name></member>
      <member refid="classQgsGeometry_1aa8c9bb3b7d2e4c2fe7547613edb2f2d6" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>voronoiDiagram</name></member>
      <member refid="classQgsGeometry_1a93d186a9f4ba52bd9c28305f8d6b71f1" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>within</name></member>
      <member refid="classQgsGeometry_1a0d06cbaa571dd127e1c43e8b1033b4a2" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>wkbType</name></member>
      <member refid="classQgsGeometry_1aacaf2856a136d270dcf274649439adf7" prot="public" virt="non-virtual"><scope>QgsGeometry</scope><name>~QgsGeometry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
