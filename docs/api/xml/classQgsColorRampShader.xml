<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classQgsColorRampShader" kind="class" language="C++" prot="public">
    <compoundname>QgsColorRampShader</compoundname>
    <basecompoundref refid="classQgsRasterShaderFunction" prot="public" virt="non-virtual">QgsRasterShaderFunction</basecompoundref>
    <includes refid="qgscolorrampshader_8h" local="no">qgscolorrampshader.h</includes>
    <innerclass refid="structQgsColorRampShader_1_1ColorRampItem" prot="public">QgsColorRampShader::ColorRampItem</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346" prot="public" static="no">
        <name>ClassificationMode</name>
        <enumvalue id="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346adff8c6933959557672c305898c5a026d" prot="public">
          <name>Continuous</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Uses breaks from color palette. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346a103826bfd4fcec5973a4989f2c83790f" prot="public">
          <name>EqualInterval</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Uses equal interval. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346aa9caabf3e9af24cc896d112cf68a9c5a" prot="public">
          <name>Quantile</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Uses quantile (i.e. equal pixel) count. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Classification modes used to create the color ramp shader. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="54" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="enum" id="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246" prot="public" static="no">
        <name>Type</name>
        <enumvalue id="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246a19f6eeeb60a86751d2562efcce1f7a73" prot="public">
          <name>Interpolated</name>
          <briefdescription>
<para>Interpolates the color between two class breaks linearly. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246a81a5f64ba6ee99f385555cb7560c4069" prot="public">
          <name>Discrete</name>
          <briefdescription>
<para>Assigns the color of the higher class for every pixel between two class breaks. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246ae3ae4cb65655fc767af3f2df3d58abc9" prot="public">
          <name>Exact</name>
          <briefdescription>
<para>Assigns the color of the exact matching value in the color ramp item list. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Supported methods for color interpolation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="46" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="45" bodyend="50"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classQgsColorRampShader_1af8903c6dea7aa1bd2c903403150206ac" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classQgsColorRamp" kindref="compound">QgsColorRamp</ref> &gt;</type>
        <definition>std::unique_ptr&lt;QgsColorRamp&gt; QgsColorRampShader::mSourceColorRamp</definition>
        <argsstring></argsstring>
        <name>mSourceColorRamp</name>
        <briefdescription>
<para>Source color ramp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="204" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classQgsColorRampShader_1a6f820efa6a959dbafc039dfe084d029c" prot="private" static="no" mutable="no">
        <type><ref refid="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346" kindref="member">ClassificationMode</ref></type>
        <definition>ClassificationMode QgsColorRampShader::mClassificationMode</definition>
        <argsstring></argsstring>
        <name>mClassificationMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="217" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsColorRampShader_1afd20c947e9779e2e7a915401d3a306ab" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QgsColorRampShader::mClip</definition>
        <argsstring></argsstring>
        <name>mClip</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Do not render values out of range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="228" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsColorRampShader_1abbd6681b37890c1badaf3a1c73d79382" prot="private" static="no" mutable="no">
        <type>QVector&lt; <ref refid="structQgsColorRampShader_1_1ColorRampItem" kindref="compound">QgsColorRampShader::ColorRampItem</ref> &gt;</type>
        <definition>QVector&lt;QgsColorRampShader::ColorRampItem&gt; QgsColorRampShader::mColorRampItemList</definition>
        <argsstring></argsstring>
        <name>mColorRampItemList</name>
        <briefdescription>
<para>This vector holds the information for classification based on values. </para>        </briefdescription>
        <detaileddescription>
<para>Each item holds a value, a label and a color. The member mDiscreteClassification holds if one color is applied for all values between two class breaks (true) or if the item values are (linearly) interpolated for values between the item values (false) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="214" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsColorRampShader_1ac4da80f46a7272d36acbfab88961b334" prot="private" static="no" mutable="no">
        <type><ref refid="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246" kindref="member">Type</ref></type>
        <definition>Type QgsColorRampShader::mColorRampType</definition>
        <argsstring></argsstring>
        <name>mColorRampType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="216" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsColorRampShader_1a3fac5e6a009a238b3132de581ddf951b" prot="private" static="no" mutable="yes">
        <type>QVector&lt; int &gt;</type>
        <definition>QVector&lt;int&gt; QgsColorRampShader::mLUT</definition>
        <argsstring></argsstring>
        <name>mLUT</name>
        <briefdescription>
<para>Look up table to speed up finding the right color. </para>        </briefdescription>
        <detaileddescription>
<para>It is initialized on the first call to <ref refid="classQgsColorRampShader_1a7664f9e211a028d60d361eff9467f994" kindref="member">shade()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="222" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsColorRampShader_1a64859494cbf30178dd104208683aaca8" prot="private" static="no" mutable="yes">
        <type>double</type>
        <definition>double QgsColorRampShader::mLUTFactor</definition>
        <argsstring></argsstring>
        <name>mLUTFactor</name>
        <initializer>= 1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="224" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsColorRampShader_1a9f6c9e240bee6a136951e1df0b0e0795" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool QgsColorRampShader::mLUTInitialized</definition>
        <argsstring></argsstring>
        <name>mLUTInitialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="225" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsColorRampShader_1aafb632e1557e99516898a149faeac2be" prot="private" static="no" mutable="yes">
        <type>double</type>
        <definition>double QgsColorRampShader::mLUTOffset</definition>
        <argsstring></argsstring>
        <name>mLUTOffset</name>
        <initializer>= 0.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="223" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classQgsColorRampShader_1ae05ecb31f201de7856aeca256ac3f800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsColorRampShader::QgsColorRampShader</definition>
        <argsstring>(double minimumValue=0.0, double maximumValue=255.0, QgsColorRamp *colorRamp=nullptr, Type type=Interpolated, ClassificationMode classificationMode=Continuous)</argsstring>
        <name>QgsColorRampShader</name>
        <param>
          <type>double</type>
          <declname>minimumValue</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>maximumValue</declname>
          <defval>255.0</defval>
        </param>
        <param>
          <type><ref refid="classQgsColorRamp" kindref="compound">QgsColorRamp</ref> *</type>
          <declname>colorRamp</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246" kindref="member">Type</ref></type>
          <declname>type</declname>
          <defval><ref refid="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246a19f6eeeb60a86751d2562efcce1f7a73" kindref="member">Interpolated</ref></defval>
        </param>
        <param>
          <type><ref refid="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346" kindref="member">ClassificationMode</ref></type>
          <declname>classificationMode</declname>
          <defval><ref refid="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346adff8c6933959557672c305898c5a026d" kindref="member">Continuous</ref></defval>
        </param>
        <briefdescription>
<para>Creates a new color ramp shader. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minimumValue</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value for the raster shader </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maximumValue</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value for the raster shader </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolation type used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>classificationMode</parametername>
</parameternamelist>
<parameterdescription>
<para>method used to classify the color ramp shader </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colorRamp</parametername>
</parameternamelist>
<parameterdescription>
<para>vector color ramp used to classify the color ramp shader. Ownership is transferred to the shader. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new <ref refid="classQgsColorRampShader" kindref="compound">QgsColorRampShader</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="69" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="34" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a05930f8a39b5a9eb5674799c0d4731eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QgsColorRampShader::QgsColorRampShader</definition>
        <argsstring>(const QgsColorRampShader &amp;other)</argsstring>
        <name>QgsColorRampShader</name>
        <param>
          <type>const <ref refid="classQgsColorRampShader" kindref="compound">QgsColorRampShader</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="74" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="44" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a166d32c06f82b7701355812a01c3f7db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346" kindref="member">ClassificationMode</ref></type>
        <definition>ClassificationMode QgsColorRampShader::classificationMode</definition>
        <argsstring>() const</argsstring>
        <name>classificationMode</name>
        <briefdescription>
<para>Returns the classification mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="186" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1aa5dea703e378e4881167303287d7d213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::classifyColorRamp</definition>
        <argsstring>(int classes=0, int band=-1, const QgsRectangle &amp;extent=QgsRectangle(), QgsRasterInterface *input=nullptr)</argsstring>
        <name>classifyColorRamp</name>
        <param>
          <type>int</type>
          <declname>classes</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>band</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref> &amp;</type>
          <declname>extent</declname>
          <defval><ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classQgsRasterInterface" kindref="compound">QgsRasterInterface</ref> *</type>
          <declname>input</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Classify color ramp shader. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>classes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of classes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>band</parametername>
</parameternamelist>
<parameterdescription>
<para>raster band used in classification (only used in quantile mode) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extent</parametername>
</parameternamelist>
<parameterdescription>
<para>extent used in classification (only used in quantile mode) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>raster input used in classification (only used in quantile mode) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="149" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="135" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a5c89651214cfb2b392f58c7ab74bcda2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::classifyColorRamp</definition>
        <argsstring>(int band=-1, const QgsRectangle &amp;extent=QgsRectangle(), QgsRasterInterface *input=nullptr)</argsstring>
        <name>classifyColorRamp</name>
        <param>
          <type>int</type>
          <declname>band</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref> &amp;</type>
          <declname>extent</declname>
          <defval><ref refid="classQgsRectangle" kindref="compound">QgsRectangle</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classQgsRasterInterface" kindref="compound">QgsRasterInterface</ref> *</type>
          <declname>input</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Classify color ramp shader. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>band</parametername>
</parameternamelist>
<parameterdescription>
<para>raster band used in classification (quantile mode only) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extent</parametername>
</parameternamelist>
<parameterdescription>
<para>extent used in classification (quantile mode only) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>raster input used in classification (quantile mode only) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="157" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a67dd3abdad26ec83cf5bdd864dfc6d51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsColorRampShader::clip</definition>
        <argsstring>() const</argsstring>
        <name>clip</name>
        <briefdescription>
<para>Returns whether the shader will clip values which are out of range. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsColorRampShader_1a587f84e31c97c91fd4f7f5729163f307" kindref="member">setClip()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="199" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a0acddd653d0fb1f91489fb0cac29eb34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QList&lt; <ref refid="structQgsColorRampShader_1_1ColorRampItem" kindref="compound">QgsColorRampShader::ColorRampItem</ref> &gt;</type>
        <definition>QList&lt;QgsColorRampShader::ColorRampItem&gt; QgsColorRampShader::colorRampItemList</definition>
        <argsstring>() const</argsstring>
        <name>colorRampItemList</name>
        <briefdescription>
<para>Returns the custom colormap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="105" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a36ce58cab771dd830b20c6caf28e8926" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246" kindref="member">Type</ref></type>
        <definition>Type QgsColorRampShader::colorRampType</definition>
        <argsstring>() const</argsstring>
        <name>colorRampType</name>
        <briefdescription>
<para>Returns the color ramp type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="108" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1ae18cdc0ccc1aa23c72809c113eb68774" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString QgsColorRampShader::colorRampTypeAsQString</definition>
        <argsstring>() const</argsstring>
        <name>colorRampTypeAsQString</name>
        <briefdescription>
<para>Returns the color ramp type as a string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="111" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="77" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a3230add5b8c6e99815c81fff0700faf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsColorRampShader::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>Whether the color ramp contains any items. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="123" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a1591538b98c3b403724f51f6f5a78ee2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::legendSymbologyItems</definition>
        <argsstring>(QList&lt; QPair&lt; QString, QColor &gt; &gt; &amp;symbolItems) const override</argsstring>
        <name>legendSymbologyItems</name>
        <reimplements refid="classQgsRasterShaderFunction_1a37ead03fc863530ada40cd238ebedba8">legendSymbologyItems</reimplements>
        <param>
          <type>QList&lt; QPair&lt; QString, QColor &gt; &gt; &amp;</type>
          <declname>symbolItems</declname>
        </param>
        <briefdescription>
<para>Returns legend symbology items if provided by renderer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="168" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="487" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a4d05567004668a607c6a4ba160cd2ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsColorRampShader" kindref="compound">QgsColorRampShader</ref> &amp;</type>
        <definition>QgsColorRampShader &amp; QgsColorRampShader::operator=</definition>
        <argsstring>(const QgsColorRampShader &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classQgsColorRampShader" kindref="compound">QgsColorRampShader</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="79" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="59" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1ad1682589a42797d0e027935689f79275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::readXml</definition>
        <argsstring>(const QDomElement &amp;elem)</argsstring>
        <name>readXml</name>
        <param>
          <type>const QDomElement &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Reads configuration from the given DOM element. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="180" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="525" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1aa0cf88eb94d90a78181b1ba2b60a3e20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::setClassificationMode</definition>
        <argsstring>(ClassificationMode classificationMode)</argsstring>
        <name>setClassificationMode</name>
        <param>
          <type><ref refid="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346" kindref="member">ClassificationMode</ref></type>
          <declname>classificationMode</declname>
        </param>
        <briefdescription>
<para>Sets classification mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="183" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a587f84e31c97c91fd4f7f5729163f307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::setClip</definition>
        <argsstring>(bool clip)</argsstring>
        <name>setClip</name>
        <param>
          <type>bool</type>
          <declname>clip</declname>
        </param>
        <briefdescription>
<para>Sets whether the shader should not render values out of range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clip</parametername>
</parameternamelist>
<parameterdescription>
<para>set to true to clip values which are out of range. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classQgsColorRampShader_1a67dd3abdad26ec83cf5bdd864dfc6d51" kindref="member">clip()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="193" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1ab7f5adc632e585c84367be3c6e957273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::setColorRampItemList</definition>
        <argsstring>(const QList&lt; QgsColorRampShader::ColorRampItem &gt; &amp;list)</argsstring>
        <name>setColorRampItemList</name>
        <param>
          <type>const QList&lt; <ref refid="structQgsColorRampShader_1_1ColorRampItem" kindref="compound">QgsColorRampShader::ColorRampItem</ref> &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Sets a custom colormap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="114" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1ab94f98322e4a172a19b81e037116395b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::setColorRampType</definition>
        <argsstring>(QgsColorRampShader::Type colorRampType)</argsstring>
        <name>setColorRampType</name>
        <param>
          <type><ref refid="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246" kindref="member">QgsColorRampShader::Type</ref></type>
          <declname>colorRampType</declname>
        </param>
        <briefdescription>
<para>Sets the color ramp type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="117" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a0f10e4718146c374f6d7274519f3ee17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::setColorRampType</definition>
        <argsstring>(const QString &amp;type)</argsstring>
        <name>setColorRampType</name>
        <param>
          <type>const QString &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Sets the color ramp type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="140" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="109" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a38263a588338782907969078ec57ba30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsColorRampShader::setSourceColorRamp</definition>
        <argsstring>(QgsColorRamp *colorramp)</argsstring>
        <name>setSourceColorRamp</name>
        <param>
          <type><ref refid="classQgsColorRamp" kindref="compound">QgsColorRamp</ref> *</type>
          <declname>colorramp</declname>
        </param>
        <briefdescription>
<para>Set the source color ramp. </para>        </briefdescription>
        <detaileddescription>
<para>Ownership is transferred to the shader. <simplesect kind="see"><para><ref refid="classQgsColorRampShader_1a7a06523f07e5128e13d3da359ff3097b" kindref="member">sourceColorRamp()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="137" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a7664f9e211a028d60d361eff9467f994" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QgsColorRampShader::shade</definition>
        <argsstring>(double value, int *returnRedValue, int *returnGreenValue, int *returnBlueValue, int *returnAlphaValue) const override</argsstring>
        <name>shade</name>
        <reimplements refid="classQgsRasterShaderFunction_1a8cc801029d1a9cbd7aacc5a312abcd10">shade</reimplements>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnRedValue</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnGreenValue</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnBlueValue</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnAlphaValue</declname>
        </param>
        <briefdescription>
<para>Generates and new RGB value based on one input value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="160" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="319" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a3c2df2fac9bfa5cdd7493a49e5f491aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QgsColorRampShader::shade</definition>
        <argsstring>(double redValue, double greenValue, double blueValue, double alphaValue, int *returnRedValue, int *returnGreenValue, int *returnBlueValue, int *returnAlphaValue) const override</argsstring>
        <name>shade</name>
        <reimplements refid="classQgsRasterShaderFunction_1ab877a4037a627099f770757d6af4c837">shade</reimplements>
        <param>
          <type>double</type>
          <declname>redValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>greenValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>blueValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaValue</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnRedValue</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnGreenValue</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnBlueValue</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>returnAlphaValue</declname>
        </param>
        <briefdescription>
<para>Generates and new RGB value based on original RGB value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="163" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="469" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a7a06523f07e5128e13d3da359ff3097b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsColorRamp" kindref="compound">QgsColorRamp</ref> *</type>
        <definition>QgsColorRamp * QgsColorRampShader::sourceColorRamp</definition>
        <argsstring>() const</argsstring>
        <name>sourceColorRamp</name>
        <briefdescription>
<para>Gets the source color ramp. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsColorRampShader_1a38263a588338782907969078ec57ba30" kindref="member">setSourceColorRamp()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="130" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classQgsColorRampShader_1a0d189cd03fc74aba58b946b99806ff71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QDomElement</type>
        <definition>QDomElement QgsColorRampShader::writeXml</definition>
        <argsstring>(QDomDocument &amp;doc) const</argsstring>
        <name>writeXml</name>
        <param>
          <type>QDomDocument &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Writes configuration to a new DOM element. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="174" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.cpp" bodystart="496" bodyend="523"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A ramp shader will color a raster pixel based on a list of values ranges in a ramp. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1843">
        <label>QgsRasterShaderFunction</label>
        <link refid="classQgsRasterShaderFunction"/>
      </node>
      <node id="1842">
        <label>QgsColorRampShader</label>
        <link refid="classQgsColorRampShader"/>
        <childnode refid="1843" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1845">
        <label>QgsRasterShaderFunction</label>
        <link refid="classQgsRasterShaderFunction"/>
      </node>
      <node id="1844">
        <label>QgsColorRampShader</label>
        <link refid="classQgsColorRampShader"/>
        <childnode refid="1845" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" line="40" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/raster/qgscolorrampshader.h" bodystart="39" bodyend="229"/>
    <listofallmembers>
      <member refid="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>ClassificationMode</name></member>
      <member refid="classQgsColorRampShader_1a166d32c06f82b7701355812a01c3f7db" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>classificationMode</name></member>
      <member refid="classQgsColorRampShader_1aa5dea703e378e4881167303287d7d213" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>classifyColorRamp</name></member>
      <member refid="classQgsColorRampShader_1a5c89651214cfb2b392f58c7ab74bcda2" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>classifyColorRamp</name></member>
      <member refid="classQgsColorRampShader_1a67dd3abdad26ec83cf5bdd864dfc6d51" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>clip</name></member>
      <member refid="classQgsColorRampShader_1a0acddd653d0fb1f91489fb0cac29eb34" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>colorRampItemList</name></member>
      <member refid="classQgsColorRampShader_1a36ce58cab771dd830b20c6caf28e8926" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>colorRampType</name></member>
      <member refid="classQgsColorRampShader_1ae18cdc0ccc1aa23c72809c113eb68774" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>colorRampTypeAsQString</name></member>
      <member refid="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346adff8c6933959557672c305898c5a026d" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>Continuous</name></member>
      <member refid="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246a81a5f64ba6ee99f385555cb7560c4069" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>Discrete</name></member>
      <member refid="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346a103826bfd4fcec5973a4989f2c83790f" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>EqualInterval</name></member>
      <member refid="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246ae3ae4cb65655fc767af3f2df3d58abc9" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>Exact</name></member>
      <member refid="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246a19f6eeeb60a86751d2562efcce1f7a73" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>Interpolated</name></member>
      <member refid="classQgsColorRampShader_1a3230add5b8c6e99815c81fff0700faf1" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>isEmpty</name></member>
      <member refid="classQgsColorRampShader_1a1591538b98c3b403724f51f6f5a78ee2" prot="public" virt="virtual"><scope>QgsColorRampShader</scope><name>legendSymbologyItems</name></member>
      <member refid="classQgsRasterShaderFunction_1a3efb286a94250791d9092c716a927d75" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>maximumValue</name></member>
      <member refid="classQgsColorRampShader_1a6f820efa6a959dbafc039dfe084d029c" prot="private" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mClassificationMode</name></member>
      <member refid="classQgsColorRampShader_1afd20c947e9779e2e7a915401d3a306ab" prot="private" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mClip</name></member>
      <member refid="classQgsColorRampShader_1abbd6681b37890c1badaf3a1c73d79382" prot="private" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mColorRampItemList</name></member>
      <member refid="classQgsColorRampShader_1ac4da80f46a7272d36acbfab88961b334" prot="private" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mColorRampType</name></member>
      <member refid="classQgsRasterShaderFunction_1afc93b0b2cb8acc5957978650bdc5c6d8" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>minimumMaximumRange</name></member>
      <member refid="classQgsRasterShaderFunction_1afba0eca2b7ef7f16529a1f46564e5fe0" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>minimumValue</name></member>
      <member refid="classQgsColorRampShader_1a3fac5e6a009a238b3132de581ddf951b" prot="private" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mLUT</name></member>
      <member refid="classQgsColorRampShader_1a64859494cbf30178dd104208683aaca8" prot="private" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mLUTFactor</name></member>
      <member refid="classQgsColorRampShader_1a9f6c9e240bee6a136951e1df0b0e0795" prot="private" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mLUTInitialized</name></member>
      <member refid="classQgsColorRampShader_1aafb632e1557e99516898a149faeac2be" prot="private" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mLUTOffset</name></member>
      <member refid="classQgsRasterShaderFunction_1a634c3b57d9eeb49e47fae5317ea2ba54" prot="protected" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mMaximumValue</name></member>
      <member refid="classQgsRasterShaderFunction_1a252d4ed204670fe6d80ab5ddc491abe7" prot="protected" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mMinimumMaximumRange</name></member>
      <member refid="classQgsRasterShaderFunction_1a115adee676b4637f216b591edefd6aab" prot="protected" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mMinimumValue</name></member>
      <member refid="classQgsColorRampShader_1af8903c6dea7aa1bd2c903403150206ac" prot="protected" virt="non-virtual"><scope>QgsColorRampShader</scope><name>mSourceColorRamp</name></member>
      <member refid="classQgsColorRampShader_1a4d05567004668a607c6a4ba160cd2ff1" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>operator=</name></member>
      <member refid="classQgsColorRampShader_1ae05ecb31f201de7856aeca256ac3f800" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>QgsColorRampShader</name></member>
      <member refid="classQgsColorRampShader_1a05930f8a39b5a9eb5674799c0d4731eb" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>QgsColorRampShader</name></member>
      <member refid="classQgsRasterShaderFunction_1a122d7f564382e1f26e153ecd49ce0403" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>QgsRasterShaderFunction</name></member>
      <member refid="classQgsColorRampShader_1a57c6cc903736b5ab4edb93f70ac5b346aa9caabf3e9af24cc896d112cf68a9c5a" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>Quantile</name></member>
      <member refid="classQgsColorRampShader_1ad1682589a42797d0e027935689f79275" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>readXml</name></member>
      <member refid="classQgsColorRampShader_1aa0cf88eb94d90a78181b1ba2b60a3e20" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>setClassificationMode</name></member>
      <member refid="classQgsColorRampShader_1a587f84e31c97c91fd4f7f5729163f307" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>setClip</name></member>
      <member refid="classQgsColorRampShader_1ab7f5adc632e585c84367be3c6e957273" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>setColorRampItemList</name></member>
      <member refid="classQgsColorRampShader_1ab94f98322e4a172a19b81e037116395b" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>setColorRampType</name></member>
      <member refid="classQgsColorRampShader_1a0f10e4718146c374f6d7274519f3ee17" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>setColorRampType</name></member>
      <member refid="classQgsRasterShaderFunction_1ac77d214d226b75c0b86782a96bda2fdf" prot="public" virt="virtual"><scope>QgsColorRampShader</scope><name>setMaximumValue</name></member>
      <member refid="classQgsRasterShaderFunction_1ae30432e25dcb253b93b787bd204d7225" prot="public" virt="virtual"><scope>QgsColorRampShader</scope><name>setMinimumValue</name></member>
      <member refid="classQgsColorRampShader_1a38263a588338782907969078ec57ba30" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>setSourceColorRamp</name></member>
      <member refid="classQgsColorRampShader_1a7664f9e211a028d60d361eff9467f994" prot="public" virt="virtual"><scope>QgsColorRampShader</scope><name>shade</name></member>
      <member refid="classQgsColorRampShader_1a3c2df2fac9bfa5cdd7493a49e5f491aa" prot="public" virt="virtual"><scope>QgsColorRampShader</scope><name>shade</name></member>
      <member refid="classQgsColorRampShader_1a7a06523f07e5128e13d3da359ff3097b" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>sourceColorRamp</name></member>
      <member refid="classQgsColorRampShader_1a9d30694b4c16b0a23a69a44d3286d246" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>Type</name></member>
      <member refid="classQgsColorRampShader_1a0d189cd03fc74aba58b946b99806ff71" prot="public" virt="non-virtual"><scope>QgsColorRampShader</scope><name>writeXml</name></member>
      <member refid="classQgsRasterShaderFunction_1ad1583a8c48bb296c1b1bf0e779dc3b11" prot="public" virt="virtual"><scope>QgsColorRampShader</scope><name>~QgsRasterShaderFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
