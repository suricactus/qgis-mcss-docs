<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classQgsNetworkDistanceStrategy" kind="class" language="C++" prot="public">
    <compoundname>QgsNetworkDistanceStrategy</compoundname>
    <basecompoundref refid="classQgsNetworkStrategy" prot="public" virt="non-virtual">QgsNetworkStrategy</basecompoundref>
    <includes refid="qgsnetworkdistancestrategy_8h" local="no">qgsnetworkdistancestrategy.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classQgsNetworkDistanceStrategy_1aaca8260e8ef15221ca03188614d7a4cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QVariant</type>
        <definition>QVariant QgsNetworkDistanceStrategy::cost</definition>
        <argsstring>(double distance, const QgsFeature &amp;) const override</argsstring>
        <name>cost</name>
        <reimplements refid="classQgsNetworkStrategy_1a26fd5f5c5f8007a4e732abb22f1572b1">cost</reimplements>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsFeature" kindref="compound">QgsFeature</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Returns edge cost. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/analysis/network/qgsnetworkdistancestrategy.h" line="32" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/analysis/network/qgsnetworkdistancestrategy.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Strategy for calculating edge cost based on its length. </para>    </briefdescription>
    <detaileddescription>
<para>Should be used for finding shortest path between two points. <simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="6068">
        <label>QgsNetworkStrategy</label>
        <link refid="classQgsNetworkStrategy"/>
      </node>
      <node id="6067">
        <label>QgsNetworkDistanceStrategy</label>
        <link refid="classQgsNetworkDistanceStrategy"/>
        <childnode refid="6068" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6070">
        <label>QgsNetworkStrategy</label>
        <link refid="classQgsNetworkStrategy"/>
      </node>
      <node id="6069">
        <label>QgsNetworkDistanceStrategy</label>
        <link refid="classQgsNetworkDistanceStrategy"/>
        <childnode refid="6070" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/suricactus/work/qgis/QGIS/src/analysis/network/qgsnetworkdistancestrategy.h" line="30" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/analysis/network/qgsnetworkdistancestrategy.h" bodystart="29" bodyend="33"/>
    <listofallmembers>
      <member refid="classQgsNetworkDistanceStrategy_1aaca8260e8ef15221ca03188614d7a4cf" prot="public" virt="virtual"><scope>QgsNetworkDistanceStrategy</scope><name>cost</name></member>
      <member refid="classQgsNetworkStrategy_1a97fd51e7f76a5ea4118e0450ff98384d" prot="public" virt="non-virtual"><scope>QgsNetworkDistanceStrategy</scope><name>QgsNetworkStrategy</name></member>
      <member refid="classQgsNetworkStrategy_1aee2de86138f0d9d55d23985430a8ba08" prot="public" virt="virtual"><scope>QgsNetworkDistanceStrategy</scope><name>requiredAttributes</name></member>
      <member refid="classQgsNetworkStrategy_1ae60ae2e1eb2890f4e955a6cd0bfd3ee2" prot="public" virt="virtual"><scope>QgsNetworkDistanceStrategy</scope><name>~QgsNetworkStrategy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
