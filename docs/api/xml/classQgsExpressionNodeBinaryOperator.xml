<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classQgsExpressionNodeBinaryOperator" kind="class" language="C++" prot="public">
    <compoundname>QgsExpressionNodeBinaryOperator</compoundname>
    <basecompoundref refid="classQgsExpressionNode" prot="public" virt="non-virtual">QgsExpressionNode</basecompoundref>
    <includes refid="qgsexpressionnodeimpl_8h" local="no">qgsexpressionnodeimpl.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62b" prot="public" static="no">
        <name>BinaryOperator</name>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba163f59b1dad269c38a108897c1f237ec" prot="public">
          <name>boOr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba64f9e0075c8f7e204dfae1078197d49c" prot="public">
          <name>boAnd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba6b5e730b00b7b58e7b8292782dff1fca" prot="public">
          <name>boEQ</name>
          <briefdescription>
<para>= </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62baad29968b017e9017f01a8b011365136c" prot="public">
          <name>boNE</name>
          <briefdescription>
<para>&lt;&gt; </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62bad8e6a4e1e7dba7764660ca50dd2c56b0" prot="public">
          <name>boLE</name>
          <briefdescription>
<para>&lt;= </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba5025f9e8d629e9938d3969c8c374e095" prot="public">
          <name>boGE</name>
          <briefdescription>
<para>&gt;= </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62badb4059397383a921c54f9aea0646e452" prot="public">
          <name>boLT</name>
          <briefdescription>
<para>&lt; </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62bada3ecb6c0a451b8a51e3ec1cc11f6728" prot="public">
          <name>boGT</name>
          <briefdescription>
<para>&gt; </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62babd0d0811307ac05e1a996169ca70b536" prot="public">
          <name>boRegexp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62bac590c805b8453d1f52607f4a10bc5827" prot="public">
          <name>boLike</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba3e40f022464400178b16a9ba773fe484" prot="public">
          <name>boNotLike</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba02f0627b1f3d81f9f6e5e1b242c832b5" prot="public">
          <name>boILike</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62baabbf053be6960b06c06af0255c169497" prot="public">
          <name>boNotILike</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba2f16204ab4e370b9555846ef6fb481c2" prot="public">
          <name>boIs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62badc4d538ad34f3aff14b156e1d22207cf" prot="public">
          <name>boIsNot</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba7a240b8271378a61d0dfb47dbe3e9eb3" prot="public">
          <name>boPlus</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba7a19bad08e354fd577f705fb7c74e129" prot="public">
          <name>boMinus</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba538c91d267f3a327e58055c41364fec7" prot="public">
          <name>boMul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba36e0efaca17f9d9d63a208c9ac8b9bfd" prot="public">
          <name>boDiv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62baf73b782c4bf666a9e88031d1bc997259" prot="public">
          <name>boIntDiv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba527fcffa6f2c457690a8f9cc9fce8bf3" prot="public">
          <name>boMod</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62babb0a70e67c346aab50ed4ee8fef80bb4" prot="public">
          <name>boPow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba5a10cbbb9c5f9951dbc8ed8371084999" prot="public">
          <name>boConcat</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>list of binary operators </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if any change is made here, the definition of QgsExpression::BinaryOperatorText[] must be adapted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="100" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="99" bodyend="131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classQgsExpressionNodeBinaryOperator_1a98a51baa709a7712b40c2824db60ef0d" prot="private" static="no" mutable="no">
        <type><ref refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62b" kindref="member">BinaryOperator</ref></type>
        <definition>BinaryOperator QgsExpressionNodeBinaryOperator::mOp</definition>
        <argsstring></argsstring>
        <name>mOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="202" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsExpressionNodeBinaryOperator_1aee82fa5c725bdb23684185f4cb03e48d" prot="private" static="no" mutable="no">
        <type><ref refid="classQgsExpressionNode" kindref="compound">QgsExpressionNode</ref> *</type>
        <definition>QgsExpressionNode* QgsExpressionNodeBinaryOperator::mOpLeft</definition>
        <argsstring></argsstring>
        <name>mOpLeft</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="203" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classQgsExpressionNodeBinaryOperator_1a4b11a3d2e15a01ead06b2f10b0fb5fe0" prot="private" static="no" mutable="no">
        <type><ref refid="classQgsExpressionNode" kindref="compound">QgsExpressionNode</ref> *</type>
        <definition>QgsExpressionNode* QgsExpressionNodeBinaryOperator::mOpRight</definition>
        <argsstring></argsstring>
        <name>mOpRight</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="204" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classQgsExpressionNodeBinaryOperator_1ac62d7658c04c148da913f8a671be1d7b" prot="private" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char * QgsExpressionNodeBinaryOperator::BINARY_OPERATOR_TEXT</definition>
        <argsstring>[]</argsstring>
        <name>BINARY_OPERATOR_TEXT</name>
        <initializer>=
{
  
  &quot;OR&quot;, &quot;AND&quot;,
  &quot;=&quot;, &quot;&lt;&gt;&quot;, &quot;&lt;=&quot;, &quot;&gt;=&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;~&quot;, &quot;LIKE&quot;, &quot;NOT LIKE&quot;, &quot;ILIKE&quot;, &quot;NOT ILIKE&quot;, &quot;IS&quot;, &quot;IS NOT&quot;,
  &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;, &quot;//&quot;, &quot;%&quot;, &quot;^&quot;,
  &quot;||&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="206" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1ab589fc20198c2725661a7cb0d6cb4354" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QgsExpressionNodeBinaryOperator::QgsExpressionNodeBinaryOperator</definition>
        <argsstring>(QgsExpressionNodeBinaryOperator::BinaryOperator op, QgsExpressionNode *opLeft, QgsExpressionNode *opRight)</argsstring>
        <name>QgsExpressionNodeBinaryOperator</name>
        <param>
          <type><ref refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62b" kindref="member">QgsExpressionNodeBinaryOperator::BinaryOperator</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classQgsExpressionNode" kindref="compound">QgsExpressionNode</ref> *</type>
          <declname>opLeft</declname>
        </param>
        <param>
          <type><ref refid="classQgsExpressionNode" kindref="compound">QgsExpressionNode</ref> *</type>
          <declname>opRight</declname>
        </param>
        <briefdescription>
<para>Binary combination of the left and the right with op. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="136" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1ac7b0527e4a2943db317d5e414e7768c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QgsExpressionNodeBinaryOperator::~QgsExpressionNodeBinaryOperator</definition>
        <argsstring>() override</argsstring>
        <name>~QgsExpressionNodeBinaryOperator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="141" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a9aed947c0edb9bbd8e38a00f166fe5ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classQgsExpressionNode" kindref="compound">QgsExpressionNode</ref> *</type>
        <definition>QgsExpressionNode * QgsExpressionNodeBinaryOperator::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classQgsExpressionNode_1aef7cfdb7ec3109244fc357e15d0dc75b">clone</reimplements>
        <briefdescription>
<para>Generate a clone of this node. </para>        </briefdescription>
        <detaileddescription>
<para>Ownership is transferred to the caller.</para><para><simplesect kind="return"><para>a deep copy of this node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="171" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="754" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a73e1eb623cf9c7ad7a4b421d84c175a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>QString QgsExpressionNodeBinaryOperator::dump</definition>
        <argsstring>() const override</argsstring>
        <name>dump</name>
        <reimplements refid="classQgsExpressionNode_1a0c72a75b7a531593d71594bfebf5f932">dump</reimplements>
        <briefdescription>
<para>Dump this node into a serialized (part) of an expression. </para>        </briefdescription>
        <detaileddescription>
<para>The returned expression does not necessarily literally match the original expression, it&apos;s just guaranteed to behave the same way. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="163" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="695" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a0303b194a98bb6097db319acdf14544c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>QVariant</type>
        <definition>QVariant QgsExpressionNodeBinaryOperator::evalNode</definition>
        <argsstring>(QgsExpression *parent, const QgsExpressionContext *context) override</argsstring>
        <name>evalNode</name>
        <reimplements refid="classQgsExpressionNode_1ab20c45f2f72c5fd5c8489449c00fdcc7">evalNode</reimplements>
        <param>
          <type><ref refid="classQgsExpression" kindref="compound">QgsExpression</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsExpressionContext" kindref="compound">QgsExpressionContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Abstract virtual eval method Errors are reported to the parent. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="162" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="177" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a30b2686b15411aed82022db00b91f6e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QgsExpressionNodeBinaryOperator::isStatic</definition>
        <argsstring>(QgsExpression *parent, const QgsExpressionContext *context) const override</argsstring>
        <name>isStatic</name>
        <reimplements refid="classQgsExpressionNode_1a3033cb76fe3df0170c5852c7ea024e2b">isStatic</reimplements>
        <param>
          <type><ref refid="classQgsExpression" kindref="compound">QgsExpression</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsExpressionContext" kindref="compound">QgsExpressionContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Returns true if this node can be evaluated for a static value. </para>        </briefdescription>
        <detaileddescription>
<para>This is used during the <ref refid="classQgsExpressionNode_1a3b931e8f7aab4e96979f9f959d80a5d7" kindref="member">prepare()</ref> step and in case it returns true, the value of this node will already be evaluated and the result cached (and therefore not re-evaluated in subsequent calls to <ref refid="classQgsExpressionNode_1a1b79f6a2f67f4a1dcf7ce16bcaab72b9" kindref="member">eval()</ref>). In case this returns true, <ref refid="classQgsExpressionNodeBinaryOperator_1aca7de8465b0de814d31c8394051099d4" kindref="member">prepareNode()</ref> will never be called.</para><para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="172" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="761" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a17d24c869bd0882b9643ae0b128d6d3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsExpressionNodeBinaryOperator::leftAssociative</definition>
        <argsstring>() const</argsstring>
        <name>leftAssociative</name>
        <briefdescription>
<para>Returns true if the operator is left-associative. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="182" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="659" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a17205fed7b845de54e7c9cd7d64614df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QgsExpressionNodeBinaryOperator::needsGeometry</definition>
        <argsstring>() const override</argsstring>
        <name>needsGeometry</name>
        <reimplements refid="classQgsExpressionNode_1ac7752e64a29acfe6b95a257b5941659c">needsGeometry</reimplements>
        <briefdescription>
<para>Abstract virtual method which returns if the geometry is required to evaluate this expression. </para>        </briefdescription>
        <detaileddescription>
<para>This needs to call <computeroutput><ref refid="classQgsExpressionNodeBinaryOperator_1a17205fed7b845de54e7c9cd7d64614df" kindref="member">needsGeometry()</ref></computeroutput> recursively on any child nodes.</para><para><simplesect kind="return"><para>true if a geometry is required to evaluate this expression </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="170" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="749" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a117136add073cd0e69d0972c0d28b43a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QList&lt; const <ref refid="classQgsExpressionNode" kindref="compound">QgsExpressionNode</ref> * &gt;</type>
        <definition>QList&lt; const QgsExpressionNode * &gt; QgsExpressionNodeBinaryOperator::nodes</definition>
        <argsstring>() const override</argsstring>
        <name>nodes</name>
        <reimplements refid="classQgsExpressionNode_1a09383975a4b34f1520166f217b1f804e">nodes</reimplements>
        <briefdescription>
<para>Returns a list of all nodes which are used in this expression. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
<simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="168" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="741" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1aff3d04b79287a2ffb599a8c2d523168e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3" kindref="member">QgsExpressionNode::NodeType</ref></type>
        <definition>QgsExpressionNode::NodeType QgsExpressionNodeBinaryOperator::nodeType</definition>
        <argsstring>() const override</argsstring>
        <name>nodeType</name>
        <reimplements refid="classQgsExpressionNode_1a532476efe2a5dc3c189769de3c513b0b">nodeType</reimplements>
        <briefdescription>
<para>Gets the type of this node. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The type of this node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="160" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="601" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a7a9da1da0f7f827c4f44475a408077ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62b" kindref="member">QgsExpressionNodeBinaryOperator::BinaryOperator</ref></type>
        <definition>QgsExpressionNodeBinaryOperator::BinaryOperator QgsExpressionNodeBinaryOperator::op</definition>
        <argsstring>() const</argsstring>
        <name>op</name>
        <briefdescription>
<para>Returns the binary operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="146" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1aa58e1725831911f812654249eb49c2ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsExpressionNode" kindref="compound">QgsExpressionNode</ref> *</type>
        <definition>QgsExpressionNode* QgsExpressionNodeBinaryOperator::opLeft</definition>
        <argsstring>() const</argsstring>
        <name>opLeft</name>
        <briefdescription>
<para>Returns the node to the left of the operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsExpressionNodeBinaryOperator_1a7cc08aa6ad79371aee4d2b663460ae16" kindref="member">opRight()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="152" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a7cc08aa6ad79371aee4d2b663460ae16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsExpressionNode" kindref="compound">QgsExpressionNode</ref> *</type>
        <definition>QgsExpressionNode* QgsExpressionNodeBinaryOperator::opRight</definition>
        <argsstring>() const</argsstring>
        <name>opRight</name>
        <briefdescription>
<para>Returns the node to the right of the operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classQgsExpressionNodeBinaryOperator_1aa58e1725831911f812654249eb49c2ab" kindref="member">opLeft()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="158" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a357d611c17033416cee40bdf17cadfaf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsExpressionNodeBinaryOperator::precedence</definition>
        <argsstring>() const</argsstring>
        <name>precedence</name>
        <briefdescription>
<para>Returns the precedence index for the operator. </para>        </briefdescription>
        <detaileddescription>
<para>Higher values have higher precedence. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="177" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="613" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1aca7de8465b0de814d31c8394051099d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QgsExpressionNodeBinaryOperator::prepareNode</definition>
        <argsstring>(QgsExpression *parent, const QgsExpressionContext *context) override</argsstring>
        <name>prepareNode</name>
        <reimplements refid="classQgsExpressionNode_1a54fb196e3071b648bd72fb2eec2802a0">prepareNode</reimplements>
        <param>
          <type><ref refid="classQgsExpression" kindref="compound">QgsExpression</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsExpressionContext" kindref="compound">QgsExpressionContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Abstract virtual preparation method Errors are reported to the parent. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="161" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="606" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a7453498aaf85e8b1203a472005cfc2d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSet&lt; QString &gt;</type>
        <definition>QSet&lt; QString &gt; QgsExpressionNodeBinaryOperator::referencedColumns</definition>
        <argsstring>() const override</argsstring>
        <name>referencedColumns</name>
        <reimplements refid="classQgsExpressionNode_1aa4c548e3c817d09afb1e5b69273fbf15">referencedColumns</reimplements>
        <briefdescription>
<para>Abstract virtual method which returns a list of columns required to evaluate this node. </para>        </briefdescription>
        <detaileddescription>
<para>When reimplementing this, you need to return any column that is required to evaluate this node and in addition recursively collect all the columns required to evaluate child nodes.</para><para><simplesect kind="return"><para>A list of columns required to evaluate this expression </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="165" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="726" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a6b5ea8d65a3af84c68aadb59be05c533" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSet&lt; QString &gt;</type>
        <definition>QSet&lt; QString &gt; QgsExpressionNodeBinaryOperator::referencedFunctions</definition>
        <argsstring>() const override</argsstring>
        <name>referencedFunctions</name>
        <reimplements refid="classQgsExpressionNode_1adea974442757d76c919e34c44bc431ec">referencedFunctions</reimplements>
        <briefdescription>
<para>Returns a set of all functions which are used in this expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="167" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="736" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a28cadcfb83661ed4bfa2d78de77cd4f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSet&lt; QString &gt;</type>
        <definition>QSet&lt; QString &gt; QgsExpressionNodeBinaryOperator::referencedVariables</definition>
        <argsstring>() const override</argsstring>
        <name>referencedVariables</name>
        <reimplements refid="classQgsExpressionNode_1ae9bf72613241511dc67c62d5e47e8bd4">referencedVariables</reimplements>
        <briefdescription>
<para>Returns a set of all variables which are used in this expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="166" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1aa0c2f67247cda53c317a51279f24567b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString QgsExpressionNodeBinaryOperator::text</definition>
        <argsstring>() const</argsstring>
        <name>text</name>
        <briefdescription>
<para>Returns a the name of this operator without the operands. </para>        </briefdescription>
        <detaileddescription>
<para>I.e. &quot;AND&quot;, &quot;OR&quot;, ... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="188" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="1546" bodyend="1549"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1aa2f838bbfc565a23edbbaa93d5042064" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsExpressionNodeBinaryOperator::compare</definition>
        <argsstring>(double diff)</argsstring>
        <name>compare</name>
        <param>
          <type>double</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="191" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="525" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1adb0e8f448000a59cb2c327b7810b573b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDateTime</type>
        <definition>QDateTime QgsExpressionNodeBinaryOperator::computeDateTimeFromInterval</definition>
        <argsstring>(const QDateTime &amp;d, QgsInterval *i)</argsstring>
        <name>computeDateTimeFromInterval</name>
        <param>
          <type>const QDateTime &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="classQgsInterval" kindref="compound">QgsInterval</ref> *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Computes the result date time calculation from a start datetime and an interval. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>start datetime </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>interval to add or subtract (depending on mOp) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="200" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="567" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a470e62fe21d4697ce9804115bd7490ff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsExpressionNodeBinaryOperator::computeDouble</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>computeDouble</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="193" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="581" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classQgsExpressionNodeBinaryOperator_1a54c2fe159f9c8cffaf5955f0085270c1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>qlonglong</type>
        <definition>qlonglong QgsExpressionNodeBinaryOperator::computeInt</definition>
        <argsstring>(qlonglong x, qlonglong y)</argsstring>
        <name>computeInt</name>
        <param>
          <type>qlonglong</type>
          <declname>x</declname>
        </param>
        <param>
          <type>qlonglong</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="192" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.cpp" bodystart="547" bodyend="565"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A binary expression operator, which operates on two values. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2884">
        <label>QgsExpressionNode</label>
        <link refid="classQgsExpressionNode"/>
      </node>
      <node id="2883">
        <label>QgsExpressionNodeBinaryOperator</label>
        <link refid="classQgsExpressionNodeBinaryOperator"/>
        <childnode refid="2884" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2886">
        <label>QgsExpressionNode</label>
        <link refid="classQgsExpressionNode"/>
      </node>
      <node id="2885">
        <label>QgsExpressionNodeBinaryOperator</label>
        <link refid="classQgsExpressionNodeBinaryOperator"/>
        <childnode refid="2886" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" line="92" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/expression/qgsexpressionnodeimpl.h" bodystart="91" bodyend="207"/>
    <listofallmembers>
      <member refid="classQgsExpressionNodeBinaryOperator_1ac62d7658c04c148da913f8a671be1d7b" prot="private" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>BINARY_OPERATOR_TEXT</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62b" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>BinaryOperator</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba64f9e0075c8f7e204dfae1078197d49c" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boAnd</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba5a10cbbb9c5f9951dbc8ed8371084999" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boConcat</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba36e0efaca17f9d9d63a208c9ac8b9bfd" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boDiv</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba6b5e730b00b7b58e7b8292782dff1fca" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boEQ</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba5025f9e8d629e9938d3969c8c374e095" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boGE</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62bada3ecb6c0a451b8a51e3ec1cc11f6728" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boGT</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba02f0627b1f3d81f9f6e5e1b242c832b5" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boILike</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62baf73b782c4bf666a9e88031d1bc997259" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boIntDiv</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba2f16204ab4e370b9555846ef6fb481c2" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boIs</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62badc4d538ad34f3aff14b156e1d22207cf" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boIsNot</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62bad8e6a4e1e7dba7764660ca50dd2c56b0" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boLE</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62bac590c805b8453d1f52607f4a10bc5827" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boLike</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62badb4059397383a921c54f9aea0646e452" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boLT</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba7a19bad08e354fd577f705fb7c74e129" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boMinus</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba527fcffa6f2c457690a8f9cc9fce8bf3" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boMod</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba538c91d267f3a327e58055c41364fec7" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boMul</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62baad29968b017e9017f01a8b011365136c" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boNE</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62baabbf053be6960b06c06af0255c169497" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boNotILike</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba3e40f022464400178b16a9ba773fe484" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boNotLike</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba163f59b1dad269c38a108897c1f237ec" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boOr</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62ba7a240b8271378a61d0dfb47dbe3e9eb3" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boPlus</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62babb0a70e67c346aab50ed4ee8fef80bb4" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boPow</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1af4d5bcb0f671d5853c536277b8b1d62babd0d0811307ac05e1a996169ca70b536" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>boRegexp</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a9aed947c0edb9bbd8e38a00f166fe5ad" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>clone</name></member>
      <member refid="classQgsExpressionNode_1acfa09f97a4345faf4dbe781982dfd025" prot="protected" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>cloneTo</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1aa2f838bbfc565a23edbbaa93d5042064" prot="private" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>compare</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1adb0e8f448000a59cb2c327b7810b573b" prot="private" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>computeDateTimeFromInterval</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a470e62fe21d4697ce9804115bd7490ff" prot="private" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>computeDouble</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a54c2fe159f9c8cffaf5955f0085270c1" prot="private" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>computeInt</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a73e1eb623cf9c7ad7a4b421d84c175a1" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>dump</name></member>
      <member refid="classQgsExpressionNode_1a1b79f6a2f67f4a1dcf7ce16bcaab72b9" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>eval</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a0303b194a98bb6097db319acdf14544c" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>evalNode</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a30b2686b15411aed82022db00b91f6e7" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>isStatic</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a17d24c869bd0882b9643ae0b128d6d3e" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>leftAssociative</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a98a51baa709a7712b40c2824db60ef0d" prot="private" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>mOp</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1aee82fa5c725bdb23684185f4cb03e48d" prot="private" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>mOpLeft</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a4b11a3d2e15a01ead06b2f10b0fb5fe0" prot="private" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>mOpRight</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a17205fed7b845de54e7c9cd7d64614df" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>needsGeometry</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a117136add073cd0e69d0972c0d28b43a" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>nodes</name></member>
      <member refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>NodeType</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1aff3d04b79287a2ffb599a8c2d523168e" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>nodeType</name></member>
      <member refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3aeacda25c3654ea68ef25f2ba10bb2725" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>ntBinaryOperator</name></member>
      <member refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3ab2fd59a8c005277d0878de1ddb3a62b6" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>ntColumnRef</name></member>
      <member refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3a7588318074e2a4470a29a73bd5e49277" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>ntCondition</name></member>
      <member refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3a70130329d2d32daf35a359e3e869cb9b" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>ntFunction</name></member>
      <member refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3aec300d86abb3213d2ca8cdbc678f8f88" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>ntIndexOperator</name></member>
      <member refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3aaa86a394a0c5c995e853bb8c210c3c5f" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>ntInOperator</name></member>
      <member refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3ac96e6246304179f9d468d8ec42f650c1" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>ntLiteral</name></member>
      <member refid="classQgsExpressionNode_1aba22dc9a84984cd3436d3b563641f1d3a73b2ff34f88301e39001e90cfbaa0bdb" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>ntUnaryOperator</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a7a9da1da0f7f827c4f44475a408077ac" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>op</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1aa58e1725831911f812654249eb49c2ab" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>opLeft</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a7cc08aa6ad79371aee4d2b663460ae16" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>opRight</name></member>
      <member refid="classQgsExpressionNode_1adf5ba97236ccdf1c095103eec9f86d26" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>parserFirstColumn</name></member>
      <member refid="classQgsExpressionNode_1ac54f72bcdc4736f54a3640b7cd253cae" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>parserFirstLine</name></member>
      <member refid="classQgsExpressionNode_1acfdf4ea6895801be88b56a945243c8b8" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>parserLastColumn</name></member>
      <member refid="classQgsExpressionNode_1ac7062639325076c5118cbc8f0e124580" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>parserLastLine</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a357d611c17033416cee40bdf17cadfaf" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>precedence</name></member>
      <member refid="classQgsExpressionNode_1a3b931e8f7aab4e96979f9f959d80a5d7" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>prepare</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1aca7de8465b0de814d31c8394051099d4" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>prepareNode</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1ab589fc20198c2725661a7cb0d6cb4354" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>QgsExpressionNodeBinaryOperator</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a7453498aaf85e8b1203a472005cfc2d8" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>referencedColumns</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a6b5ea8d65a3af84c68aadb59be05c533" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>referencedFunctions</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1a28cadcfb83661ed4bfa2d78de77cd4f8" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>referencedVariables</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1aa0c2f67247cda53c317a51279f24567b" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>text</name></member>
      <member refid="classQgsExpressionNode_1a8f06aaa5e0846f17de3ec9ba157c1e77" prot="public" virt="virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>~QgsExpressionNode</name></member>
      <member refid="classQgsExpressionNodeBinaryOperator_1ac7b0527e4a2943db317d5e414e7768c4" prot="public" virt="non-virtual"><scope>QgsExpressionNodeBinaryOperator</scope><name>~QgsExpressionNodeBinaryOperator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
