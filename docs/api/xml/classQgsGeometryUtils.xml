<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classQgsGeometryUtils" kind="class" language="C++" prot="public">
    <compoundname>QgsGeometryUtils</compoundname>
    <includes refid="qgsgeometryutils_8h" local="no">qgsgeometryutils.h</includes>
    <innerclass refid="structQgsGeometryUtils_1_1SelfIntersection" prot="public">QgsGeometryUtils::SelfIntersection</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classQgsGeometryUtils_1ab826706f3bfbcecc52fcc496ae33980e" prot="public" static="no">
        <name>ComponentType</name>
        <enumvalue id="classQgsGeometryUtils_1ab826706f3bfbcecc52fcc496ae33980eaa31bc63aaccbc95b7d56ce8c62e62cce" prot="public">
          <name>Vertex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometryUtils_1ab826706f3bfbcecc52fcc496ae33980ea2a2707ea7d71eac207890c364d72ea65" prot="public">
          <name>Ring</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classQgsGeometryUtils_1ab826706f3bfbcecc52fcc496ae33980ea087e97581fa4e53a87aed9895041da12" prot="public">
          <name>Part</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="673" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" bodystart="672" bodyend="677"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classQgsGeometryUtils_1ab19886e042dd8b70558b4a137666122b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::angleBetweenThreePoints</definition>
        <argsstring>(double x1, double y1, double x2, double y2, double x3, double y3)</argsstring>
        <name>angleBetweenThreePoints</name>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y3</declname>
        </param>
        <briefdescription>
<para>Calculates the angle between the lines AB and BC, where AB and BC described by points a, b and b, c. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate of point a </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate of point a </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate of point b </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate of point b </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x3</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate of point c </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y3</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate of point c </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>angle between lines in radians. Returned value is undefined if two or more points are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="451" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1389" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a3830ad4ee3d544c852e7439c34b279ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::angleOnCircle</definition>
        <argsstring>(double angle, double angle1, double angle2, double angle3)</argsstring>
        <name>angleOnCircle</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle3</declname>
        </param>
        <briefdescription>
<para>Returns true if an angle is between angle1 and angle3 on a circle described by angle1, angle2 and angle3. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="333" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="743" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1af38ff91a0c328424a2bc058ceb027ee8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::averageAngle</definition>
        <argsstring>(double x1, double y1, double x2, double y2, double x3, double y3)</argsstring>
        <name>averageAngle</name>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y3</declname>
        </param>
        <briefdescription>
<para>Calculates the average angle (in radians) between the two linear segments from (<emphasis>x1</emphasis>, <emphasis>y1</emphasis>) to (<emphasis>x2</emphasis>, <emphasis>y2</emphasis>) and (<emphasis>x2</emphasis>, <emphasis>y2</emphasis>) to (<emphasis>x3</emphasis>, <emphasis>y3</emphasis>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="469" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1403" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a44d439ae9a9b7e78e3385d831c4921e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::averageAngle</definition>
        <argsstring>(double a1, double a2)</argsstring>
        <name>averageAngle</name>
        <param>
          <type>double</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a2</declname>
        </param>
        <briefdescription>
<para>Averages two angles, correctly handling negative angles and ensuring the result is between 0 and 2 pi. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a1</parametername>
</parameternamelist>
<parameterdescription>
<para>first angle (in radians) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a2</parametername>
</parameternamelist>
<parameterdescription>
<para>second angle (in radians) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>average angle (in radians) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="477" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1411" bodyend="1436"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ac133dc939c3a11150c181ee19e48c25d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::ccwAngle</definition>
        <argsstring>(double dy, double dx)</argsstring>
        <name>ccwAngle</name>
        <param>
          <type>double</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
<para>Returns the counter clockwise angle between a line with components dx, dy and the line with dx &gt; 0 and dy = 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="312" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="653" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ab0e4af53b00b02365ba1884fe346fd6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::circleAngleBetween</definition>
        <argsstring>(double angle, double angle1, double angle2, bool clockwise)</argsstring>
        <name>circleAngleBetween</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clockwise</declname>
        </param>
        <briefdescription>
<para>Returns true if, in a circle, angle is between angle1 and angle2. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="327" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="717" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1af76638035bdd789ecf79a3e4dd64c28b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometryUtils::circleCenterRadius</definition>
        <argsstring>(const QgsPoint &amp;pt1, const QgsPoint &amp;pt2, const QgsPoint &amp;pt3, double &amp;radius, double &amp;centerX, double &amp;centerY)</argsstring>
        <name>circleCenterRadius</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt3</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>centerX</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>centerY</declname>
        </param>
        <briefdescription>
<para>Returns radius and center of the circle through pt1, pt2, pt3. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="315" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="667" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ae7962aa12329277ee0025fb7ded7b493" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGeometryUtils::circleCircleInnerTangents</definition>
        <argsstring>(const QgsPointXY &amp;center1, double radius1, const QgsPointXY &amp;center2, double radius2, QgsPointXY &amp;line1P1, QgsPointXY &amp;line1P2, QgsPointXY &amp;line2P1, QgsPointXY &amp;line2P2)</argsstring>
        <name>circleCircleInnerTangents</name>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>center1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>center2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius2</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>line1P1</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>line1P2</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>line2P1</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>line2P2</declname>
        </param>
        <briefdescription>
<para>Calculates the inner tangent points for two circles, centered at <emphasis>center1</emphasis> and <emphasis>center2</emphasis> and with radii of <emphasis>radius1</emphasis> and <emphasis>radius2</emphasis> respectively. </para>        </briefdescription>
        <detaileddescription>
<para>The inner tangent points correspond to the points at which the two lines which are drawn so that they are tangential to both circles and are crossing each other.</para><para>The first tangent line is described by the points stored in <emphasis>line1P1</emphasis> and <emphasis>line1P2</emphasis>, and the second line is described by the points stored in <emphasis>line2P1</emphasis> and <emphasis>line2P2</emphasis>.</para><para>Returns the number of tangents (either 0 or 2).</para><para><simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="223" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="493" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a50c030f40ed9f9c8d2bda60f18a77cc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGeometryUtils::circleCircleIntersections</definition>
        <argsstring>(QgsPointXY center1, double radius1, QgsPointXY center2, double radius2, QgsPointXY &amp;intersection1, QgsPointXY &amp;intersection2)</argsstring>
        <name>circleCircleIntersections</name>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref></type>
          <declname>center1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius1</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref></type>
          <declname>center2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius2</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>intersection1</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>intersection2</declname>
        </param>
        <briefdescription>
<para>Calculates the intersections points between the circle with center <emphasis>center1</emphasis> and radius <emphasis>radius1</emphasis> and the circle with center <emphasis>center2</emphasis> and radius <emphasis>radius2</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If found, the intersection points will be stored in <emphasis>intersection1</emphasis> and <emphasis>intersection2</emphasis>.</para><para><simplesect kind="return"><para>number of intersection points found.</para></simplesect>
<simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="168" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="369" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ac175d0754be043c64b52f09394e6f8f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGeometryUtils::circleCircleOuterTangents</definition>
        <argsstring>(const QgsPointXY &amp;center1, double radius1, const QgsPointXY &amp;center2, double radius2, QgsPointXY &amp;line1P1, QgsPointXY &amp;line1P2, QgsPointXY &amp;line2P1, QgsPointXY &amp;line2P2)</argsstring>
        <name>circleCircleOuterTangents</name>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>center1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>center2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius2</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>line1P1</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>line1P2</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>line2P1</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>line2P2</declname>
        </param>
        <briefdescription>
<para>Calculates the outer tangent points for two circles, centered at <emphasis>center1</emphasis> and <emphasis>center2</emphasis> and with radii of <emphasis>radius1</emphasis> and <emphasis>radius2</emphasis> respectively. </para>        </briefdescription>
        <detaileddescription>
<para>The outer tangent points correspond to the points at which the two lines which are drawn so that they are tangential to both circles touch the circles.</para><para>The first tangent line is described by the points stored in <emphasis>line1P1</emphasis> and <emphasis>line1P2</emphasis>, and the second line is described by the points stored in <emphasis>line2P1</emphasis> and <emphasis>line2P2</emphasis>.</para><para>Returns the number of tangents (either 0 or 2).</para><para><simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="200" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="457" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a4a8616d9e6a701b7a050eee9882575f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::circleClockwise</definition>
        <argsstring>(double angle1, double angle2, double angle3)</argsstring>
        <name>circleClockwise</name>
        <param>
          <type>double</type>
          <declname>angle1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle3</declname>
        </param>
        <briefdescription>
<para>Returns true if the circle defined by three angles is ordered clockwise. </para>        </briefdescription>
        <detaileddescription>
<para>The angles are defined counter-clockwise from the origin, i.e. using Euclidean angles as opposed to geographic &quot;North up&quot; angles. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="324" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="705" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a5d4030841d90e62d97faaa6001f2ce47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::circleLength</definition>
        <argsstring>(double x1, double y1, double x2, double y2, double x3, double y3)</argsstring>
        <name>circleLength</name>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y3</declname>
        </param>
        <briefdescription>
<para>Length of a circular string segment defined by pt1, pt2, pt3. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="336" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="749" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a1a561c0c6fc83213e04d481e11513366" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::circleTangentDirection</definition>
        <argsstring>(const QgsPoint &amp;tangentPoint, const QgsPoint &amp;cp1, const QgsPoint &amp;cp2, const QgsPoint &amp;cp3)</argsstring>
        <name>circleTangentDirection</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>tangentPoint</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>cp1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>cp2</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>cp3</declname>
        </param>
        <briefdescription>
<para>Calculates the direction angle of a circle tangent (clockwise from north in radians) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="363" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="847" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a49e289c3f558d60ca4c22d1bf6b85be8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref></type>
        <definition>QgsPoint QgsGeometryUtils::closestPoint</definition>
        <argsstring>(const QgsAbstractGeometry &amp;geometry, const QgsPoint &amp;point)</argsstring>
        <name>closestPoint</name>
        <param>
          <type>const <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns the nearest point on a segment of a <emphasis>geometry</emphasis> for the specified <emphasis>point</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The z and m values will be linearly interpolated between the two neighbouring vertices. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="57" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="97" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ab427ad5692cd98165581ad9fab5ca4f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>static double QgsGeometryUtils::closestSegmentFromComponents</definition>
        <argsstring>(T &amp;container, ComponentType ctype, const QgsPoint &amp;pt, QgsPoint &amp;segmentPt, QgsVertexId &amp;vertexAfter, int *leftOf, double epsilon)</argsstring>
        <name>closestSegmentFromComponents</name>
        <param>
          <type>T &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type><ref refid="classQgsGeometryUtils_1ab826706f3bfbcecc52fcc496ae33980e" kindref="member">ComponentType</ref></type>
          <declname>ctype</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>segmentPt</declname>
        </param>
        <param>
          <type><ref refid="structQgsVertexId" kindref="compound">QgsVertexId</ref> &amp;</type>
          <declname>vertexAfter</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>leftOf</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="680" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" bodystart="680" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1aa080c3faa7f3ec792ba1de170067edd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref></type>
        <definition>QgsPoint QgsGeometryUtils::closestVertex</definition>
        <argsstring>(const QgsAbstractGeometry &amp;geom, const QgsPoint &amp;pt, QgsVertexId &amp;id)</argsstring>
        <name>closestVertex</name>
        <param>
          <type>const <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type><ref refid="structQgsVertexId" kindref="compound">QgsVertexId</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the closest vertex to a geometry for a specified point. </para>        </briefdescription>
        <detaileddescription>
<para>On error null point will be returned and &quot;id&quot; argument will be invalid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="50" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="66" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a87fb039bff7972b8cd86ce938c1c1fd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometryUtils::coefficients</definition>
        <argsstring>(const QgsPoint &amp;pt1, const QgsPoint &amp;pt2, double &amp;a, double &amp;b, double &amp;c)</argsstring>
        <name>coefficients</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Returns the coefficients (a, b, c for equation &quot;ax + by + c = 0&quot;) of a line defined by points <emphasis>pt1</emphasis> and <emphasis>pt2</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt1</parametername>
</parameternamelist>
<parameterdescription>
<para>first point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt2</parametername>
</parameternamelist>
<parameterdescription>
<para>second point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter, a coefficient of the equation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter, b coefficient of the equation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter, c coefficient of the equation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="582" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1321" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a7180a1c445d69d8a98c7347befd6e8b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::distanceToVertex</definition>
        <argsstring>(const QgsAbstractGeometry &amp;geom, QgsVertexId id)</argsstring>
        <name>distanceToVertex</name>
        <param>
          <type>const <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="structQgsVertexId" kindref="compound">QgsVertexId</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the distance along a geometry from its first vertex to the specified vertex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>vertex id to find distance to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>distance to vertex (following geometry) </para></simplesect>
<simplesect kind="since"><para>QGIS 2.16 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="66" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="130" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a30ee2268427404a01163a6875fb6a45d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QVector&lt; <ref refid="classQgsLineString" kindref="compound">QgsLineString</ref> * &gt;</type>
        <definition>QVector&lt; QgsLineString * &gt; QgsGeometryUtils::extractLineStrings</definition>
        <argsstring>(const QgsAbstractGeometry *geom)</argsstring>
        <name>extractLineStrings</name>
        <param>
          <type>const <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> *</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Returns list of linestrings extracted from the passed geometry. </para>        </briefdescription>
        <detaileddescription>
<para>The returned objects have to be deleted by the caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="44" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="30" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a2665fb5f1da1ac0d3f91fdc226d70f18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::gradient</definition>
        <argsstring>(const QgsPoint &amp;pt1, const QgsPoint &amp;pt2)</argsstring>
        <name>gradient</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
<para>Returns the gradient of a line defined by points <emphasis>pt1</emphasis> and <emphasis>pt2</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt1</parametername>
</parameternamelist>
<parameterdescription>
<para>first point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt2</parametername>
</parameternamelist>
<parameterdescription>
<para>second point. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gradient of this linear entity, or infinity if vertical </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="571" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1309" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a2af83f4149ee076e6e6de01ab08017a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::interpolateArcValue</definition>
        <argsstring>(double angle, double a1, double a2, double a3, double zm1, double zm2, double zm3)</argsstring>
        <name>interpolateArcValue</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zm1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zm2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zm3</declname>
        </param>
        <briefdescription>
<para>Interpolate a value at given angle on circular arc given values (zm1, zm2, zm3) at three different angles (a1, a2, a3). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="385" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1009" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ab034ef39d3a40208912a809461449b11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref></type>
        <definition>QgsPoint QgsGeometryUtils::interpolatePointOnArc</definition>
        <argsstring>(const QgsPoint &amp;pt1, const QgsPoint &amp;pt2, const QgsPoint &amp;pt3, double distance)</argsstring>
        <name>interpolatePointOnArc</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt3</declname>
        </param>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Interpolates a point on an arc defined by three points, <emphasis>pt1</emphasis>, <emphasis>pt2</emphasis> and <emphasis>pt3</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>The arc will be interpolated by the specified <emphasis>distance</emphasis> from <emphasis>pt1</emphasis>.</para><para>Any z or m values present in the points will also be linearly interpolated in the output.</para><para><simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="309" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="628" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a14d201050669ccc6c5e3c9c835c9292f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref></type>
        <definition>QgsPointXY QgsGeometryUtils::interpolatePointOnLine</definition>
        <argsstring>(double x1, double y1, double x2, double y2, double fraction)</argsstring>
        <name>interpolatePointOnLine</name>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fraction</declname>
        </param>
        <briefdescription>
<para>Interpolates the position of a point a <emphasis>fraction</emphasis> of the way along the line from (<emphasis>x1</emphasis>, <emphasis>y1</emphasis>) to (<emphasis>x2</emphasis>, <emphasis>y2</emphasis>). </para>        </briefdescription>
        <detaileddescription>
<para>Usually the <emphasis>fraction</emphasis> should be between 0 and 1, where 0 represents the point at the start of the line (<emphasis>x1</emphasis>, <emphasis>y1</emphasis>) and 1 represents the end of the line (<emphasis>x2</emphasis>, <emphasis>y2</emphasis>). However, it is possible to use a <emphasis>fraction</emphasis> &lt; 0 or &gt; 1, in which case the returned point is extrapolated from the supplied line.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometryUtils_1a41ecee21ba106861e168a3b594cd6bb1" kindref="member">interpolatePointOnLineByValue()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="530" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1293" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ac4a0719a14b58c8194411bed45836da3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref></type>
        <definition>QgsPoint QgsGeometryUtils::interpolatePointOnLine</definition>
        <argsstring>(const QgsPoint &amp;p1, const QgsPoint &amp;p2, double fraction)</argsstring>
        <name>interpolatePointOnLine</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fraction</declname>
        </param>
        <briefdescription>
<para>Interpolates the position of a point a <emphasis>fraction</emphasis> of the way along the line from <emphasis>p1</emphasis> to <emphasis>p2</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Usually the <emphasis>fraction</emphasis> should be between 0 and 1, where 0 represents the point at the start of the line (<emphasis>p1</emphasis>) and 1 represents the end of the line (<emphasis>p2</emphasis>). However, it is possible to use a <emphasis>fraction</emphasis> &lt; 0 or &gt; 1, in which case the returned point is extrapolated from the supplied line.</para><para>Any Z or M values present in the input points will also be interpolated and present in the returned point.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometryUtils_1a41ecee21ba106861e168a3b594cd6bb1" kindref="member">interpolatePointOnLineByValue()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="548" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1283" bodyend="1291"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a41ecee21ba106861e168a3b594cd6bb1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref></type>
        <definition>QgsPointXY QgsGeometryUtils::interpolatePointOnLineByValue</definition>
        <argsstring>(double x1, double y1, double v1, double x2, double y2, double v2, double value)</argsstring>
        <name>interpolatePointOnLineByValue</name>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Interpolates the position of a point along the line from (<emphasis>x1</emphasis>, <emphasis>y1</emphasis>) to (<emphasis>x2</emphasis>, <emphasis>y2</emphasis>). </para>        </briefdescription>
        <detaileddescription>
<para>The position is interpolated using a supplied target <emphasis>value</emphasis> and the value at the start of the line (<emphasis>v1</emphasis>) and end of the line (<emphasis>v2</emphasis>). The returned point will be linearly interpolated to match position corresponding to the target <emphasis>value</emphasis>.</para><para><simplesect kind="see"><para><ref refid="classQgsGeometryUtils_1a14d201050669ccc6c5e3c9c835c9292f" kindref="member">interpolatePointOnLine()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="562" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1300" bodyend="1307"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1af052429d951c91d24d08ca3135b3bb5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGeometryUtils::leftOfLine</definition>
        <argsstring>(const double x, const double y, const double x1, const double y1, const double x2, const double y2)</argsstring>
        <name>leftOfLine</name>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
<para>Returns a value &lt; 0 if the point (<emphasis>x</emphasis>, <emphasis>y</emphasis>) is left of the line from (<emphasis>x1</emphasis>, <emphasis>y1</emphasis>) -&gt; ( <emphasis>x2</emphasis>, <emphasis>y2</emphasis>). </para>        </briefdescription>
        <detaileddescription>
<para>A positive return value indicates the point is to the right of the line.</para><para>If the return value is 0, then the test was unsuccessful (e.g. due to testing a point exactly on the line, or exactly in line with the segment) and the result is undefined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="270" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="583" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a22315d44166e218e8f26a4b9dd022c3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGeometryUtils::leftOfLine</definition>
        <argsstring>(const QgsPoint &amp;point, const QgsPoint &amp;p1, const QgsPoint &amp;p2)</argsstring>
        <name>leftOfLine</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns a value &lt; 0 if the point <emphasis>point</emphasis> is left of the line from <emphasis>p1</emphasis> -&gt; <emphasis>p2</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>A positive return value indicates the point is to the right of the line.</para><para>If the return value is 0, then the test was unsuccessful (e.g. due to testing a point exactly on the line, or exactly in line with the segment) and the result is undefined.</para><para><simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="281" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="578" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a80338278314402db75aee233de2c010b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::lineAngle</definition>
        <argsstring>(double x1, double y1, double x2, double y2)</argsstring>
        <name>lineAngle</name>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
<para>Calculates the direction of line joining two points in radians, clockwise from the north direction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate of line start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate of line start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate of line end </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate of line end </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>angle in radians. Returned value is undefined if start and end point are the same. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="438" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1382" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a7bfe096677b3d7e91e697f077795ab10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::lineCircleIntersection</definition>
        <argsstring>(const QgsPointXY &amp;center, double radius, const QgsPointXY &amp;linePoint1, const QgsPointXY &amp;linePoint2, QgsPointXY &amp;intersection)</argsstring>
        <name>lineCircleIntersection</name>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>linePoint1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>linePoint2</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>intersection</declname>
        </param>
        <briefdescription>
<para>Compute the intersection of a line and a circle. </para>        </briefdescription>
        <detaileddescription>
<para>If the intersection has two solutions (points), the closest point to the initial <emphasis>intersection</emphasis> point is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>center</parametername>
</parameternamelist>
<parameterdescription>
<para>the center of the circle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the circle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linePoint1</parametername>
</parameternamelist>
<parameterdescription>
<para>a first point on the line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linePoint2</parametername>
</parameternamelist>
<parameterdescription>
<para>a second point on the line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intersection</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial point and the returned intersection point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if an intersection has been found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="154" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="317" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a3656c360046728a78651f08274fa6e5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::lineIntersection</definition>
        <argsstring>(const QgsPoint &amp;p1, QgsVector v1, const QgsPoint &amp;p2, QgsVector v2, QgsPoint &amp;intersection)</argsstring>
        <name>lineIntersection</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="classQgsVector" kindref="compound">QgsVector</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="classQgsVector" kindref="compound">QgsVector</ref></type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>intersection</declname>
        </param>
        <briefdescription>
<para>Computes the intersection between two lines. </para>        </briefdescription>
        <detaileddescription>
<para>Z dimension is supported and is retrieved from the first 3D point amongst <emphasis>p1</emphasis> and <emphasis>p2</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>Point on the first line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction vector of the first line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>Point on the second line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>Direction vector of the second line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intersection</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter, the intersection point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the lines intersect </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="105" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="238" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a898e1dd6d90612e36bcb4090566fceaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::linePerpendicularAngle</definition>
        <argsstring>(double x1, double y1, double x2, double y2)</argsstring>
        <name>linePerpendicularAngle</name>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
<para>Calculates the perpendicular angle to a line joining two points. </para>        </briefdescription>
        <detaileddescription>
<para>Returned angle is in radians, clockwise from the north direction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate of line start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate of line start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate of line end </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate of line end </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>angle in radians. Returned value is undefined if start and end point are the same. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="463" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1396" bodyend="1401"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::linesIntersection3D</definition>
        <argsstring>(const QgsVector3D &amp;La1, const QgsVector3D &amp;La2, const QgsVector3D &amp;Lb1, const QgsVector3D &amp;Lb2, QgsVector3D &amp;intersection)</argsstring>
        <name>linesIntersection3D</name>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>La1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>La2</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>Lb1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>Lb2</declname>
        </param>
        <param>
          <type><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>intersection</declname>
        </param>
        <briefdescription>
<para>An algorithm to calculate an (approximate) intersection of two lines in 3D. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>La1</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first point on the first line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>La2</parametername>
</parameternamelist>
<parameterdescription>
<para>is the second point on the first line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Lb1</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first point on the second line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Lb2</parametername>
</parameternamelist>
<parameterdescription>
<para>is the second point on the second line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intersection</parametername>
</parameternamelist>
<parameterdescription>
<para>is the result intersection, of it can be found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the intersection can be found, false - otherwise. example: <programlisting><codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(2,1,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(2,3,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>PyQt5.QtGui.QgsVector3D(2.0,<sp/>0.0,<sp/>0.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(2,1,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(2,0,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>PyQt5.QtGui.QgsVector3D(2.0,<sp/>0.0,<sp/>0.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,1,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,3,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>PyQt5.QtGui.QgsVector3D(0.0,<sp/>0.0,<sp/>0.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,1,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,0,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>PyQt5.QtGui.QgsVector3D(0.0,<sp/>0.0,<sp/>0.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,1,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,3,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(False,<sp/>PyQt5.QtGui.QgsVector3D(0.0,<sp/>0.0,<sp/>0.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,1,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(False,<sp/>PyQt5.QtGui.QgsVector3D(0.0,<sp/>0.0,<sp/>0.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(1,1,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(2,2,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(3,1,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(3,2,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>PyQt5.QtGui.QgsVector3D(3.0,<sp/>3.0,<sp/>0.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(1,1,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(2,2,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(3,2,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(3,1,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>PyQt5.QtGui.QgsVector3D(3.0,<sp/>3.0,<sp/>0.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,5,5),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,5,5),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>PyQt5.QtGui.QgsVector3D(2.5,<sp/>2.5,<sp/>2.5))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(2.5,2.5,2.5),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,5,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(2.5,2.5,2.5),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>PyQt5.QtGui.QgsVector3D(2.5,<sp/>2.5,<sp/>2.5))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" kindref="member">QgsGeometryUtils.linesIntersection3D</ref>(<ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(2.5,2.5,2.5),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,0,0),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(0,5,5),<sp/><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref>(5,5,5))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>PyQt5.QtGui.QgsVector3D(0.0,<sp/>5.0,<sp/>5.0))</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="655" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1492" bodyend="1559"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a9106a89b89d754332b067bbcf0a6aa0f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref></type>
        <definition>QgsPoint QgsGeometryUtils::midpoint</definition>
        <argsstring>(const QgsPoint &amp;pt1, const QgsPoint &amp;pt2)</argsstring>
        <name>midpoint</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
<para>Returns a middle point between points pt1 and pt2. </para>        </briefdescription>
        <detaileddescription>
<para>Z value is computed if one of this point have Z. M value is computed if one of this point have M. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt1</parametername>
</parameternamelist>
<parameterdescription>
<para>first point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt2</parametername>
</parameternamelist>
<parameterdescription>
<para>second point. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New point at middle between points pt1 and pt2.<itemizedlist>
<listitem><para>Example: <programlisting><codeline><highlight class="normal">p<sp/>=<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>4,<sp/>6<sp/>)<sp/></highlight><highlight class="comment">#<sp/>2D<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pr<sp/>=<sp/>midpoint<sp/>(<sp/>p,<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>2,<sp/>2<sp/>)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>pr<sp/>is<sp/>a<sp/>2D<sp/>point:<sp/>&apos;Point<sp/>(3<sp/>4)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pr<sp/>=<sp/>midpoint<sp/>(<sp/>p,<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>QgsWkbTypes.PointZ,<sp/>2,<sp/>2,<sp/>2<sp/>)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>pr<sp/>is<sp/>a<sp/>3D<sp/>point:<sp/>&apos;PointZ<sp/>(3<sp/>4<sp/>1)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pr<sp/>=<sp/>midpoint<sp/>(<sp/>p,<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>QgsWkbTypes.PointM,<sp/>2,<sp/>2,<sp/>0,<sp/>2<sp/>)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>pr<sp/>is<sp/>a<sp/>3D<sp/>point:<sp/>&apos;PointM<sp/>(3<sp/>4<sp/>1)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pr<sp/>=<sp/>midpoint<sp/>(<sp/>p,<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>QgsWkbTypes.PointZM,<sp/>2,<sp/>2,<sp/>2,<sp/>2<sp/>)<sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>pr<sp/>is<sp/>a<sp/>3D<sp/>point:<sp/>&apos;PointZM<sp/>(3<sp/>4<sp/>1<sp/>1)&apos;</highlight></codeline>
</programlisting> </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="515" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1258" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a2239e2b962b9819960ffeefb1dc92ba9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::normalizedAngle</definition>
        <argsstring>(double angle)</argsstring>
        <name>normalizedAngle</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Ensures that an angle is in the range 0 &lt;= angle &lt; 2 pi. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>angle in radians </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>equivalent angle within the range [0, 2 pi) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="428" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1197" bodyend="1209"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a61134ca2bbdc99e4c8518a980ae801e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsLineString" kindref="compound">QgsLineString</ref></type>
        <definition>QgsLineString QgsGeometryUtils::perpendicularSegment</definition>
        <argsstring>(const QgsPoint &amp;p, const QgsPoint &amp;s1, const QgsPoint &amp;s2)</argsstring>
        <name>perpendicularSegment</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>Create a perpendicular line segment from p to segment [s1, s2]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>The segment start point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>The segment end point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A line (segment) from p to perpendicular point on segment [s1, s2] </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="592" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1344" bodyend="1380"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a22b89067f9fc24ace0776bfdcdb02d32" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref></type>
        <definition>QgsPoint QgsGeometryUtils::pointOnLineWithDistance</definition>
        <argsstring>(const QgsPoint &amp;startPoint, const QgsPoint &amp;directionPoint, double distance)</argsstring>
        <name>pointOnLineWithDistance</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>startPoint</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>directionPoint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Returns a point a specified <emphasis>distance</emphasis> toward a second point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="286" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="594" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1adf3626dc18d4b9a941c7238a151fea3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometryUtils::pointOnLineWithDistance</definition>
        <argsstring>(double x1, double y1, double x2, double y2, double distance, double &amp;x, double &amp;y, double *z1=nullptr, double *z2=nullptr, double *z=nullptr, double *m1=nullptr, double *m2=nullptr, double *m=nullptr)</argsstring>
        <name>pointOnLineWithDistance</name>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z1</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>z2</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>m1</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>m2</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>double *</type>
          <declname>m</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Calculates the point a specified <emphasis>distance</emphasis> from (<emphasis>x1</emphasis>, <emphasis>y1</emphasis>) toward a second point (<emphasis>x2</emphasis>, <emphasis>y2</emphasis>). </para>        </briefdescription>
        <detaileddescription>
<para>Optionally, interpolated z and m values can be obtained by specifying the <emphasis>z1</emphasis>, <emphasis>z2</emphasis> and <emphasis>z</emphasis> arguments and/or the <emphasis>m1</emphasis>, <emphasis>m2</emphasis>, <emphasis>m</emphasis> arguments.</para><para><simplesect kind="note"><para>Not available in Python bindings </para></simplesect>
<simplesect kind="since"><para>QGIS 3.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="297" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="601" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ac9635bdbebe1ce52b755d2928ae7053b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref></type>
        <definition>QgsPointSequence QgsGeometryUtils::pointsFromWKT</definition>
        <argsstring>(const QString &amp;wktCoordinateList, bool is3D, bool isMeasure)</argsstring>
        <name>pointsFromWKT</name>
        <param>
          <type>const QString &amp;</type>
          <declname>wktCoordinateList</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is3D</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isMeasure</declname>
        </param>
        <briefdescription>
<para>Returns a list of points contained in a WKT string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="391" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1029" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ad2742299ee00903256688bf0c7da8315" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDomElement</type>
        <definition>QDomElement QgsGeometryUtils::pointsToGML2</definition>
        <argsstring>(const QgsPointSequence &amp;points, QDomDocument &amp;doc, int precision, const QString &amp;ns, QgsAbstractGeometry::AxisOrder axisOrder=QgsAbstractGeometry::AxisOrder::XY)</argsstring>
        <name>pointsToGML2</name>
        <param>
          <type>const <ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>QDomDocument &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="classQgsAbstractGeometry_1a429cf06290bd0bdb2134a30c16d4d2a7" kindref="member">QgsAbstractGeometry::AxisOrder</ref></type>
          <declname>axisOrder</declname>
          <defval>QgsAbstractGeometry::AxisOrder::XY</defval>
        </param>
        <briefdescription>
<para>Returns a gml::coordinates DOM element. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="409" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1133" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ae0485aa02915d2ae783bf914caf29a8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDomElement</type>
        <definition>QDomElement QgsGeometryUtils::pointsToGML3</definition>
        <argsstring>(const QgsPointSequence &amp;points, QDomDocument &amp;doc, int precision, const QString &amp;ns, bool is3D, QgsAbstractGeometry::AxisOrder axisOrder=QgsAbstractGeometry::AxisOrder::XY)</argsstring>
        <name>pointsToGML3</name>
        <param>
          <type>const <ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>QDomDocument &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>ns</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is3D</declname>
        </param>
        <param>
          <type><ref refid="classQgsAbstractGeometry_1a429cf06290bd0bdb2134a30c16d4d2a7" kindref="member">QgsAbstractGeometry::AxisOrder</ref></type>
          <declname>axisOrder</declname>
          <defval>QgsAbstractGeometry::AxisOrder::XY</defval>
        </param>
        <briefdescription>
<para>Returns a gml::posList DOM element. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="415" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1160" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a07240ad18cc55657f2dd1c3c0625f935" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString QgsGeometryUtils::pointsToJSON</definition>
        <argsstring>(const QgsPointSequence &amp;points, int precision)</argsstring>
        <name>pointsToJSON</name>
        <param>
          <type>const <ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
<para>Returns a geoJSON coordinates string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="421" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1182" bodyend="1195"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a3964b6cc15536a0df0280b833a5ec1fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometryUtils::pointsToWKB</definition>
        <argsstring>(QgsWkbPtr &amp;wkb, const QgsPointSequence &amp;points, bool is3D, bool isMeasure)</argsstring>
        <name>pointsToWKB</name>
        <param>
          <type><ref refid="classQgsWkbPtr" kindref="compound">QgsWkbPtr</ref> &amp;</type>
          <declname>wkb</declname>
        </param>
        <param>
          <type>const <ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is3D</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isMeasure</declname>
        </param>
        <briefdescription>
<para>Returns a LinearRing { uint32 numPoints; Point points[numPoints]; }. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="397" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1097" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1aee5c8ee3cd87f06d4ab3f02e2b9afe5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString QgsGeometryUtils::pointsToWKT</definition>
        <argsstring>(const QgsPointSequence &amp;points, int precision, bool is3D, bool isMeasure)</argsstring>
        <name>pointsToWKT</name>
        <param>
          <type>const <ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is3D</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isMeasure</declname>
        </param>
        <briefdescription>
<para>Returns a WKT coordinate list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="403" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1114" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a55bd649ac52f4cccec5d855a5959e26f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref></type>
        <definition>static QgsPoint QgsGeometryUtils::projectPointOnSegment</definition>
        <argsstring>(const QgsPoint &amp;p, const QgsPoint &amp;s1, const QgsPoint &amp;s2)</argsstring>
        <name>projectPointOnSegment</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>Project the point on a segment. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>The segment start point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>The segment end point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The projection of the point on the segment </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="235" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" bodystart="235" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a470d7ca2f6790424432d32145e553999" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::segmentIntersection</definition>
        <argsstring>(const QgsPoint &amp;p1, const QgsPoint &amp;p2, const QgsPoint &amp;q1, const QgsPoint &amp;q2, QgsPoint &amp;intersectionPoint, bool &amp;isIntersection, double tolerance=1e-8, bool acceptImproperIntersection=false)</argsstring>
        <name>segmentIntersection</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <param>
          <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>intersectionPoint</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>isIntersection</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>1e-8</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>acceptImproperIntersection</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute the intersection between two segments. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>First segment start point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>First segment end point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q1</parametername>
</parameternamelist>
<parameterdescription>
<para>Second segment start point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second segment end point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intersectionPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter, the intersection point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isIntersection</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter, return true if an intersection is found </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The tolerance to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceptImproperIntersection</parametername>
</parameternamelist>
<parameterdescription>
<para>By default, this method returns true only if segments have proper intersection. If set true, returns also true if segments have improper intersection (end of one segment on other segment ; continuous segments). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the segments intersect<itemizedlist>
<listitem><para>Example: <programlisting><codeline><highlight class="normal">ret<sp/>=<sp/><ref refid="classQgsGeometryUtils_1a470d7ca2f6790424432d32145e553999" kindref="member">QgsGeometryUtils.segmentIntersection</ref>(<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>1<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>1,<sp/>1<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>1,<sp/>0<sp/>)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">ret[0],<sp/>ret[1].asWkt(),<sp/>ret[2]</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Whether<sp/>the<sp/>segments<sp/>intersect,<sp/>the<sp/>intersection<sp/>point,<sp/>is<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(False,<sp/>&apos;Point<sp/>(0<sp/>0)&apos;,<sp/>False)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ret<sp/>=<sp/><ref refid="classQgsGeometryUtils_1a470d7ca2f6790424432d32145e553999" kindref="member">QgsGeometryUtils.segmentIntersection</ref>(<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>5<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>5<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>1,<sp/>5<sp/>)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">ret[0],<sp/>ret[1].asWkt(),<sp/>ret[2]</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(False,<sp/>&apos;Point<sp/>(0<sp/>5)&apos;,<sp/>True)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ret<sp/>=<sp/><ref refid="classQgsGeometryUtils_1a470d7ca2f6790424432d32145e553999" kindref="member">QgsGeometryUtils.segmentIntersection</ref>(<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>5<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>5<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>1,<sp/>5<sp/>),<sp/>acceptImproperIntersection=</highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal">ret[0],<sp/>ret[1].asWkt(),<sp/>ret[2]</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>&apos;Point<sp/>(0<sp/>5)&apos;,<sp/>True)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ret<sp/>=<sp/><ref refid="classQgsGeometryUtils_1a470d7ca2f6790424432d32145e553999" kindref="member">QgsGeometryUtils.segmentIntersection</ref>(<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>5<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>2<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>1,<sp/>5<sp/>)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">ret[0],<sp/>ret[1].asWkt(),<sp/>ret[2]</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(False,<sp/>&apos;Point<sp/>(0<sp/>2)&apos;,<sp/>True)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ret<sp/>=<sp/><ref refid="classQgsGeometryUtils_1a470d7ca2f6790424432d32145e553999" kindref="member">QgsGeometryUtils.segmentIntersection</ref>(<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>0<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>5<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>2<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>1,<sp/>5<sp/>),<sp/>acceptImproperIntersection=</highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline><highlight class="normal">ret[0],<sp/>ret[1].asWkt(),<sp/>ret[2]</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>&apos;Point<sp/>(0<sp/>2)&apos;,<sp/>True)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ret<sp/>=<sp/><ref refid="classQgsGeometryUtils_1a470d7ca2f6790424432d32145e553999" kindref="member">QgsGeometryUtils.segmentIntersection</ref>(<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>-5<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>0,<sp/>5<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>2,<sp/>0<sp/>),<sp/><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref>(<sp/>-1,<sp/>0<sp/>)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">ret[0],<sp/>ret[1].asWkt(),<sp/>ret[2]</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>(True,<sp/>&apos;Point<sp/>(0<sp/>0)&apos;,<sp/>True)</highlight></codeline>
</programlisting> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="141" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="257" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1acd1fde5712c49daae3e148a7fad90409" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QgsGeometryUtils::segmentizeArc</definition>
        <argsstring>(const QgsPoint &amp;p1, const QgsPoint &amp;p2, const QgsPoint &amp;p3, QgsPointSequence &amp;points, double tolerance=M_PI_2/90, QgsAbstractGeometry::SegmentationToleranceType toleranceType=QgsAbstractGeometry::MaximumAngle, bool hasZ=false, bool hasM=false)</argsstring>
        <name>segmentizeArc</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type><ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>M_PI_2/90</defval>
        </param>
        <param>
          <type><ref refid="classQgsAbstractGeometry_1a0ad4bdf6c9a37daa3be14cb41fc38d96" kindref="member">QgsAbstractGeometry::SegmentationToleranceType</ref></type>
          <declname>toleranceType</declname>
          <defval><ref refid="classQgsAbstractGeometry_1a0ad4bdf6c9a37daa3be14cb41fc38d96ae179641e9ac6aafe1005da4b6f7c7618" kindref="member">QgsAbstractGeometry::MaximumAngle</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>hasZ</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>hasM</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert circular arc defined by p1, p2, p3 (p1/p3 being start resp. </para>        </briefdescription>
        <detaileddescription>
<para>end point, p2 lies on the arc) into a sequence of points. <simplesect kind="since"><para>3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="369" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="871" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a3e594a769fa61050f23701028592d20f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::segmentMidPoint</definition>
        <argsstring>(const QgsPoint &amp;p1, const QgsPoint &amp;p2, QgsPoint &amp;result, double radius, const QgsPoint &amp;mousePos)</argsstring>
        <name>segmentMidPoint</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>mousePos</declname>
        </param>
        <briefdescription>
<para>Calculates midpoint on circle passing through <emphasis>p1</emphasis> and <emphasis>p2</emphasis>, closest to the given coordinate <emphasis>mousePos</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Z dimension is supported and is retrieved from the first 3D point amongst <emphasis>p1</emphasis> and <emphasis>p2</emphasis>. <simplesect kind="see"><para><ref refid="classQgsGeometryUtils_1aefc107e7fb672b96cda84bdf264a6803" kindref="member">segmentMidPointFromCenter()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="347" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="791" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1aefc107e7fb672b96cda84bdf264a6803" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref></type>
        <definition>QgsPoint QgsGeometryUtils::segmentMidPointFromCenter</definition>
        <argsstring>(const QgsPoint &amp;p1, const QgsPoint &amp;p2, const QgsPoint &amp;center, bool useShortestArc=true)</argsstring>
        <name>segmentMidPointFromCenter</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useShortestArc</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Calculates the midpoint on the circle passing through <emphasis>p1</emphasis> and <emphasis>p2</emphasis>, with the specified <emphasis>center</emphasis> coordinate. </para>        </briefdescription>
        <detaileddescription>
<para>If <emphasis>useShortestArc</emphasis> is true, then the midpoint returned will be that corresponding to the shorter arc from <emphasis>p1</emphasis> to <emphasis>p2</emphasis>. If it is false, the longer arc from <emphasis>p1</emphasis> to <emphasis>p2</emphasis> will be used (i.e. winding the other way around the circle).</para><para><simplesect kind="see"><para><ref refid="classQgsGeometryUtils_1a3e594a769fa61050f23701028592d20f" kindref="member">segmentMidPoint()</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="360" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="838" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a64471f7abd516f4ff9608fdcdd5d0105" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGeometryUtils::segmentSide</definition>
        <argsstring>(const QgsPoint &amp;pt1, const QgsPoint &amp;pt3, const QgsPoint &amp;pt2)</argsstring>
        <name>segmentSide</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt3</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
<para>For line defined by points pt1 and pt3, find out on which side of the line is point pt3. </para>        </briefdescription>
        <detaileddescription>
<para>Returns -1 if pt3 on the left side, 1 if pt3 is on the right side or 0 if pt3 lies on the line. <simplesect kind="since"><para>3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="379" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="988" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a3d7b691bba93e6637b181b601aff85d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QVector&lt; <ref refid="structQgsGeometryUtils_1_1SelfIntersection" kindref="compound">SelfIntersection</ref> &gt;</type>
        <definition>QVector&lt; QgsGeometryUtils::SelfIntersection &gt; QgsGeometryUtils::selfIntersections</definition>
        <argsstring>(const QgsAbstractGeometry *geom, int part, int ring, double tolerance)</argsstring>
        <name>selfIntersections</name>
        <param>
          <type>const <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> *</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>part</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ring</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Find self intersections in a polyline. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>The part of the geometry to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ring</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring of the geometry part to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The tolerance to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The list of self intersections </para></simplesect>
<simplesect kind="note"><para>not available in Python bindings </para></simplesect>
<simplesect kind="since"><para>QGIS 2.12 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="261" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="538" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a629b530ec92320ac21c8b3c3ecc7374d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::setZValueFromPoints</definition>
        <argsstring>(const QgsPointSequence &amp;points, QgsPoint &amp;point)</argsstring>
        <name>setZValueFromPoints</name>
        <param>
          <type>const <ref refid="qgsabstractgeometry_8h_1a998c0c2a807f73c4412fdab61e278f21" kindref="member">QgsPointSequence</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>A Z dimension is added to <emphasis>point</emphasis> if one of the point in the list <emphasis>points</emphasis> is in 3D. </para>        </briefdescription>
        <detaileddescription>
<para>Moreover, the Z value of <emphasis>point</emphasis> is updated with.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>List of points in which a 3D point is searched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to update with Z dimension and value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the point is updated, false otherwise</para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="669" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1561" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ac61ea6321323405cbe982fa28259171c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::skewLinesDistance</definition>
        <argsstring>(const QgsVector3D &amp;P1, const QgsVector3D &amp;P12, const QgsVector3D &amp;P2, const QgsVector3D &amp;P22)</argsstring>
        <name>skewLinesDistance</name>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>P1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>P12</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>P2</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>P22</declname>
        </param>
        <briefdescription>
<para>An algorithm to calculate the shortest distance between two skew lines. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P1</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first point of the first line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P12</parametername>
</parameternamelist>
<parameterdescription>
<para>is the second point on the first line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P2</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first point on the second line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P22</parametername>
</parameternamelist>
<parameterdescription>
<para>is the second point on the second line. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the shortest distance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="603" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1438" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1aeb3be402938d206cce4e2dac9307fe31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::skewLinesProjection</definition>
        <argsstring>(const QgsVector3D &amp;P1, const QgsVector3D &amp;P12, const QgsVector3D &amp;P2, const QgsVector3D &amp;P22, QgsVector3D &amp;X1, double epsilon=0.0001)</argsstring>
        <name>skewLinesProjection</name>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>P1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>P12</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>P2</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>P22</declname>
        </param>
        <param>
          <type><ref refid="classQgsVector3D" kindref="compound">QgsVector3D</ref> &amp;</type>
          <declname>X1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>0.0001</defval>
        </param>
        <briefdescription>
<para>A method to project one skew line onto another. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>P1</parametername>
</parameternamelist>
<parameterdescription>
<para>is a first point that belonds to first skew line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P12</parametername>
</parameternamelist>
<parameterdescription>
<para>is the second point that belongs to first skew line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P2</parametername>
</parameternamelist>
<parameterdescription>
<para>is the first point that belongs to second skew line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>P22</parametername>
</parameternamelist>
<parameterdescription>
<para>is the second point that belongs to second skew line, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X1</parametername>
</parameternamelist>
<parameterdescription>
<para>is the result projection point of line P2P22 onto line P1P12, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the tolerance to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if such point exists, false - otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="616" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1450" bodyend="1490"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a144dde0ca4aae2957f574013d1c46fee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::sqrDistance2D</definition>
        <argsstring>(const QgsPoint &amp;pt1, const QgsPoint &amp;pt2)</argsstring>
        <name>sqrDistance2D</name>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPoint" kindref="compound">QgsPoint</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
<para>Returns the squared 2D distance between two points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="87" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a62d279644f48048f879cd033bebab085" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::sqrDistToLine</definition>
        <argsstring>(double ptX, double ptY, double x1, double y1, double x2, double y2, double &amp;minDistX, double &amp;minDistY, double epsilon)</argsstring>
        <name>sqrDistToLine</name>
        <param>
          <type>double</type>
          <declname>ptX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ptY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>minDistX</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>minDistY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Returns the squared distance between a point and a line. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="92" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="199" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a4e467f58b82e16d7d106e64ec5507d41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QgsGeometryUtils::sweepAngle</definition>
        <argsstring>(double centerX, double centerY, double x1, double y1, double x2, double y2, double x3, double y3)</argsstring>
        <name>sweepAngle</name>
        <param>
          <type>double</type>
          <declname>centerX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>centerY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y3</declname>
        </param>
        <briefdescription>
<para>Calculates angle of a circular string part defined by pt1, pt2, pt3. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="339" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="761" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1ab57a8ffe2e0c40ffd0be9425072db5da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::tangentPointAndCircle</definition>
        <argsstring>(const QgsPointXY &amp;center, double radius, const QgsPointXY &amp;p, QgsPointXY &amp;pt1, QgsPointXY &amp;pt2)</argsstring>
        <name>tangentPointAndCircle</name>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type><ref refid="classQgsPointXY" kindref="compound">QgsPointXY</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
<para>Calculates the tangent points between the circle with the specified <emphasis>center</emphasis> and <emphasis>radius</emphasis> and the point <emphasis>p</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>If found, the tangent points will be stored in <emphasis>pt1</emphasis> and <emphasis>pt2</emphasis>.</para><para><simplesect kind="since"><para>QGIS 3.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="180" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="433" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a4eb7af49a21c2d18bc12416ddbc37fba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QgsGeometryUtils::verticesAtDistance</definition>
        <argsstring>(const QgsAbstractGeometry &amp;geometry, double distance, QgsVertexId &amp;previousVertex, QgsVertexId &amp;nextVertex)</argsstring>
        <name>verticesAtDistance</name>
        <param>
          <type>const <ref refid="classQgsAbstractGeometry" kindref="compound">QgsAbstractGeometry</ref> &amp;</type>
          <declname>geometry</declname>
        </param>
        <param>
          <type>double</type>
          <declname>distance</declname>
        </param>
        <param>
          <type><ref refid="structQgsVertexId" kindref="compound">QgsVertexId</ref> &amp;</type>
          <declname>previousVertex</declname>
        </param>
        <param>
          <type><ref refid="structQgsVertexId" kindref="compound">QgsVertexId</ref> &amp;</type>
          <declname>nextVertex</declname>
        </param>
        <briefdescription>
<para>Retrieves the vertices which are before and after the interpolated point at a specified distance along a linestring (or polygon boundary). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geometry</parametername>
</parameternamelist>
<parameterdescription>
<para>line or polygon geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para>distance to traverse along geometry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>previousVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to previous vertex ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nextVertex</parametername>
</parameternamelist>
<parameterdescription>
<para>will be set to next vertex ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if vertices were successfully retrieved </para></simplesect>
<simplesect kind="note"><para>if the distance coincides exactly with a vertex, then both previousVertex and nextVertex will be set to this vertex </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="79" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="149" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a504ac13c428f8ab1563e9da67a0a592c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QStringList</type>
        <definition>QStringList QgsGeometryUtils::wktGetChildBlocks</definition>
        <argsstring>(const QString &amp;wkt, const QString &amp;defaultType=QString())</argsstring>
        <name>wktGetChildBlocks</name>
        <param>
          <type>const QString &amp;</type>
          <declname>wkt</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>defaultType</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
<para>Parses a WKT string and returns of list of blocks contained in the WKT. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wkt</parametername>
</parameternamelist>
<parameterdescription>
<para>WKT string in the format &quot;TYPE1 (contents1), TYPE2 (TYPE3 (contents3), TYPE4 (contents4))&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultType</parametername>
</parameternamelist>
<parameterdescription>
<para>default geometry type for children </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>list of WKT child block strings, e.g., List(&quot;TYPE1 (contents1)&quot;, &quot;TYPE2 (TYPE3 (contents3), TYPE4 (contents4))&quot;) </para></simplesect>
<simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="492" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1222" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="classQgsGeometryUtils_1a004420650407f52fc2337ef539d2b05a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPair&lt; <ref refid="classQgsWkbTypes_1a70dff7aceefd4b16909f038e32aece11" kindref="member">QgsWkbTypes::Type</ref>, QString &gt;</type>
        <definition>QPair&lt; QgsWkbTypes::Type, QString &gt; QgsGeometryUtils::wktReadBlock</definition>
        <argsstring>(const QString &amp;wkt)</argsstring>
        <name>wktReadBlock</name>
        <param>
          <type>const QString &amp;</type>
          <declname>wkt</declname>
        </param>
        <briefdescription>
<para>Parses a WKT block of the format &quot;TYPE( contents )&quot; and returns a pair of geometry type to contents (&quot;Pair(wkbType, &quot;contents&quot;)&quot;) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="483" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.cpp" bodystart="1211" bodyend="1220"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains various geometry utility functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>QGIS 2.10 </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" line="37" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/core/geometry/qgsgeometryutils.h" bodystart="36" bodyend="736"/>
    <listofallmembers>
      <member refid="classQgsGeometryUtils_1ab19886e042dd8b70558b4a137666122b" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>angleBetweenThreePoints</name></member>
      <member refid="classQgsGeometryUtils_1a3830ad4ee3d544c852e7439c34b279ed" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>angleOnCircle</name></member>
      <member refid="classQgsGeometryUtils_1af38ff91a0c328424a2bc058ceb027ee8" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>averageAngle</name></member>
      <member refid="classQgsGeometryUtils_1a44d439ae9a9b7e78e3385d831c4921e1" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>averageAngle</name></member>
      <member refid="classQgsGeometryUtils_1ac133dc939c3a11150c181ee19e48c25d" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>ccwAngle</name></member>
      <member refid="classQgsGeometryUtils_1ab0e4af53b00b02365ba1884fe346fd6a" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>circleAngleBetween</name></member>
      <member refid="classQgsGeometryUtils_1af76638035bdd789ecf79a3e4dd64c28b" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>circleCenterRadius</name></member>
      <member refid="classQgsGeometryUtils_1ae7962aa12329277ee0025fb7ded7b493" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>circleCircleInnerTangents</name></member>
      <member refid="classQgsGeometryUtils_1a50c030f40ed9f9c8d2bda60f18a77cc5" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>circleCircleIntersections</name></member>
      <member refid="classQgsGeometryUtils_1ac175d0754be043c64b52f09394e6f8f2" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>circleCircleOuterTangents</name></member>
      <member refid="classQgsGeometryUtils_1a4a8616d9e6a701b7a050eee9882575f0" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>circleClockwise</name></member>
      <member refid="classQgsGeometryUtils_1a5d4030841d90e62d97faaa6001f2ce47" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>circleLength</name></member>
      <member refid="classQgsGeometryUtils_1a1a561c0c6fc83213e04d481e11513366" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>circleTangentDirection</name></member>
      <member refid="classQgsGeometryUtils_1a49e289c3f558d60ca4c22d1bf6b85be8" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>closestPoint</name></member>
      <member refid="classQgsGeometryUtils_1ab427ad5692cd98165581ad9fab5ca4f2" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>closestSegmentFromComponents</name></member>
      <member refid="classQgsGeometryUtils_1aa080c3faa7f3ec792ba1de170067edd1" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>closestVertex</name></member>
      <member refid="classQgsGeometryUtils_1a87fb039bff7972b8cd86ce938c1c1fd7" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>coefficients</name></member>
      <member refid="classQgsGeometryUtils_1ab826706f3bfbcecc52fcc496ae33980e" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>ComponentType</name></member>
      <member refid="classQgsGeometryUtils_1a7180a1c445d69d8a98c7347befd6e8b5" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>distanceToVertex</name></member>
      <member refid="classQgsGeometryUtils_1a30ee2268427404a01163a6875fb6a45d" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>extractLineStrings</name></member>
      <member refid="classQgsGeometryUtils_1a2665fb5f1da1ac0d3f91fdc226d70f18" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>gradient</name></member>
      <member refid="classQgsGeometryUtils_1a2af83f4149ee076e6e6de01ab08017a9" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>interpolateArcValue</name></member>
      <member refid="classQgsGeometryUtils_1ab034ef39d3a40208912a809461449b11" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>interpolatePointOnArc</name></member>
      <member refid="classQgsGeometryUtils_1a14d201050669ccc6c5e3c9c835c9292f" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>interpolatePointOnLine</name></member>
      <member refid="classQgsGeometryUtils_1ac4a0719a14b58c8194411bed45836da3" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>interpolatePointOnLine</name></member>
      <member refid="classQgsGeometryUtils_1a41ecee21ba106861e168a3b594cd6bb1" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>interpolatePointOnLineByValue</name></member>
      <member refid="classQgsGeometryUtils_1af052429d951c91d24d08ca3135b3bb5a" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>leftOfLine</name></member>
      <member refid="classQgsGeometryUtils_1a22315d44166e218e8f26a4b9dd022c3e" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>leftOfLine</name></member>
      <member refid="classQgsGeometryUtils_1a80338278314402db75aee233de2c010b" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>lineAngle</name></member>
      <member refid="classQgsGeometryUtils_1a7bfe096677b3d7e91e697f077795ab10" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>lineCircleIntersection</name></member>
      <member refid="classQgsGeometryUtils_1a3656c360046728a78651f08274fa6e5c" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>lineIntersection</name></member>
      <member refid="classQgsGeometryUtils_1a898e1dd6d90612e36bcb4090566fceaf" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>linePerpendicularAngle</name></member>
      <member refid="classQgsGeometryUtils_1a055483cc861bce8b843a0efd570a28d3" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>linesIntersection3D</name></member>
      <member refid="classQgsGeometryUtils_1a9106a89b89d754332b067bbcf0a6aa0f" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>midpoint</name></member>
      <member refid="classQgsGeometryUtils_1a2239e2b962b9819960ffeefb1dc92ba9" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>normalizedAngle</name></member>
      <member refid="classQgsGeometryUtils_1ab826706f3bfbcecc52fcc496ae33980ea087e97581fa4e53a87aed9895041da12" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>Part</name></member>
      <member refid="classQgsGeometryUtils_1a61134ca2bbdc99e4c8518a980ae801e3" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>perpendicularSegment</name></member>
      <member refid="classQgsGeometryUtils_1a22b89067f9fc24ace0776bfdcdb02d32" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>pointOnLineWithDistance</name></member>
      <member refid="classQgsGeometryUtils_1adf3626dc18d4b9a941c7238a151fea3e" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>pointOnLineWithDistance</name></member>
      <member refid="classQgsGeometryUtils_1ac9635bdbebe1ce52b755d2928ae7053b" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>pointsFromWKT</name></member>
      <member refid="classQgsGeometryUtils_1ad2742299ee00903256688bf0c7da8315" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>pointsToGML2</name></member>
      <member refid="classQgsGeometryUtils_1ae0485aa02915d2ae783bf914caf29a8f" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>pointsToGML3</name></member>
      <member refid="classQgsGeometryUtils_1a07240ad18cc55657f2dd1c3c0625f935" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>pointsToJSON</name></member>
      <member refid="classQgsGeometryUtils_1a3964b6cc15536a0df0280b833a5ec1fa" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>pointsToWKB</name></member>
      <member refid="classQgsGeometryUtils_1aee5c8ee3cd87f06d4ab3f02e2b9afe5e" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>pointsToWKT</name></member>
      <member refid="classQgsGeometryUtils_1a55bd649ac52f4cccec5d855a5959e26f" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>projectPointOnSegment</name></member>
      <member refid="classQgsGeometryUtils_1ab826706f3bfbcecc52fcc496ae33980ea2a2707ea7d71eac207890c364d72ea65" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>Ring</name></member>
      <member refid="classQgsGeometryUtils_1a470d7ca2f6790424432d32145e553999" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>segmentIntersection</name></member>
      <member refid="classQgsGeometryUtils_1acd1fde5712c49daae3e148a7fad90409" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>segmentizeArc</name></member>
      <member refid="classQgsGeometryUtils_1a3e594a769fa61050f23701028592d20f" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>segmentMidPoint</name></member>
      <member refid="classQgsGeometryUtils_1aefc107e7fb672b96cda84bdf264a6803" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>segmentMidPointFromCenter</name></member>
      <member refid="classQgsGeometryUtils_1a64471f7abd516f4ff9608fdcdd5d0105" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>segmentSide</name></member>
      <member refid="classQgsGeometryUtils_1a3d7b691bba93e6637b181b601aff85d7" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>selfIntersections</name></member>
      <member refid="classQgsGeometryUtils_1a629b530ec92320ac21c8b3c3ecc7374d" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>setZValueFromPoints</name></member>
      <member refid="classQgsGeometryUtils_1ac61ea6321323405cbe982fa28259171c" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>skewLinesDistance</name></member>
      <member refid="classQgsGeometryUtils_1aeb3be402938d206cce4e2dac9307fe31" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>skewLinesProjection</name></member>
      <member refid="classQgsGeometryUtils_1a144dde0ca4aae2957f574013d1c46fee" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>sqrDistance2D</name></member>
      <member refid="classQgsGeometryUtils_1a62d279644f48048f879cd033bebab085" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>sqrDistToLine</name></member>
      <member refid="classQgsGeometryUtils_1a4e467f58b82e16d7d106e64ec5507d41" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>sweepAngle</name></member>
      <member refid="classQgsGeometryUtils_1ab57a8ffe2e0c40ffd0be9425072db5da" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>tangentPointAndCircle</name></member>
      <member refid="classQgsGeometryUtils_1ab826706f3bfbcecc52fcc496ae33980eaa31bc63aaccbc95b7d56ce8c62e62cce" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>Vertex</name></member>
      <member refid="classQgsGeometryUtils_1a4eb7af49a21c2d18bc12416ddbc37fba" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>verticesAtDistance</name></member>
      <member refid="classQgsGeometryUtils_1a504ac13c428f8ab1563e9da67a0a592c" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>wktGetChildBlocks</name></member>
      <member refid="classQgsGeometryUtils_1a004420650407f52fc2337ef539d2b05a" prot="public" virt="non-virtual"><scope>QgsGeometryUtils</scope><name>wktReadBlock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
