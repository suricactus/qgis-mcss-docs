<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceQgsGuiUtils" kind="namespace" language="C++">
    <compoundname>QgsGuiUtils</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceQgsGuiUtils_1adb2e3af3c1e734f75b241bc7c2154c49" prot="public" static="no" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double QgsGuiUtils::CANVAS_MAGNIFICATION_MAX</definition>
        <argsstring></argsstring>
        <name>CANVAS_MAGNIFICATION_MAX</name>
        <initializer>= 16.0</initializer>
        <briefdescription>
<para>Maximum magnification level allowed in map canvases. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespaceQgsGuiUtils_1adb2e3af3c1e734f75b241bc7c2154c49" kindref="member">CANVAS_MAGNIFICATION_MAX</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.h" line="69" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceQgsGuiUtils_1a291fddaf4f59b627e92fb609151e3bb4" prot="public" static="no" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double QgsGuiUtils::CANVAS_MAGNIFICATION_MIN</definition>
        <argsstring></argsstring>
        <name>CANVAS_MAGNIFICATION_MIN</name>
        <initializer>= 0.1</initializer>
        <briefdescription>
<para>Minimum magnification level allowed in map canvases. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespaceQgsGuiUtils_1adb2e3af3c1e734f75b241bc7c2154c49" kindref="member">CANVAS_MAGNIFICATION_MAX</ref> </para></simplesect>
<simplesect kind="since"><para>QGIS 3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.h" line="61" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceQgsGuiUtils_1a181f233658ac60edda239b00b24d5596" prot="public" static="yes" mutable="no">
        <type>const Qt::WindowFlags</type>
        <definition>const Qt::WindowFlags QgsGuiUtils::ModalDialogFlags</definition>
        <argsstring></argsstring>
        <name>ModalDialogFlags</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>/var ModalDialogFlags /brief Flags used to create a modal dialog (adapted from QMessageBox). </para>        </briefdescription>
        <detaileddescription>
<para>Using these flags for all modal dialogs throughout QGIS ensures that for platforms such as the Mac where modal and modeless dialogs have different looks, QGIS modal dialogs will look the same as Qt modal dialogs and all modal dialogs will look distinct from modeless dialogs. Although not the standard Mac modal look, it does lack the minimize control which makes sense only for modeless dislogs.</para><para>The Qt3 method of creating a true Mac modal dialog is deprecated in Qt4 and should not be used due to conflicts with QMessageBox style dialogs.</para><para>Qt::WindowMaximizeButtonHint is included but will be ignored if the dialog is a fixed size and does not have a size grip. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.h" line="54" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceQgsGuiUtils_1ad210eb962160783febf905a9b40663bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString GUI_EXPORT QgsGuiUtils::createFileFilter_</definition>
        <argsstring>(QString const &amp;longName, QString const &amp;glob)</argsstring>
        <name>createFileFilter_</name>
        <param>
          <type>QString const &amp;</type>
          <declname>longName</declname>
        </param>
        <param>
          <type>QString const &amp;</type>
          <declname>glob</declname>
        </param>
        <briefdescription>
<para>Convenience function for readily creating file filters. </para>        </briefdescription>
        <detaileddescription>
<para>Given a long name for a file filter and a regular expression, return a file filter string suitable for use in a QFileDialog::OpenFiles() call. The regular express, glob, will have both all lower and upper case versions added. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="181" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQgsGuiUtils_1ac8ba4c020f9de51e5caa0a5097a664d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString GUI_EXPORT QgsGuiUtils::createFileFilter_</definition>
        <argsstring>(QString const &amp;format)</argsstring>
        <name>createFileFilter_</name>
        <param>
          <type>QString const &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Create file filters suitable for use with QFileDialog. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>extension e.g. &quot;png&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>QString e.g. &quot;PNG format (*.png, *.PNG)&quot; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="186" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" bodystart="186" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQgsGuiUtils_1a3cd41b2c0ba0a36e73792c3f277d9e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString QgsGuiUtils::createWidgetKey</definition>
        <argsstring>(QWidget *widget, const QString &amp;keyName=QString())</argsstring>
        <name>createWidgetKey</name>
        <param>
          <type>QWidget *</type>
          <declname>widget</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>keyName</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
<para>Creates a key for the given widget that can be used to store related data in settings. </para>        </briefdescription>
        <detaileddescription>
<para>Will use objectName() or class name if objectName() is not set. Can be overridden using <emphasis>keyName</emphasis>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>widget</parametername>
</parameternamelist>
<parameterdescription>
<para>The widget to make the key from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Override for objectName() if needed. If not set will use objectName() </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A key name that can be used for the widget in settings. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="223" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" bodystart="223" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQgsGuiUtils_1aa393f1292f6186b6afbf946d259e579b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QFont</type>
        <definition>QFont GUI_EXPORT QgsGuiUtils::getFont</definition>
        <argsstring>(bool &amp;ok, const QFont &amp;initial, const QString &amp;title=QString())</argsstring>
        <name>getFont</name>
        <param>
          <type>bool &amp;</type>
          <declname>ok</declname>
        </param>
        <param>
          <type>const QFont &amp;</type>
          <declname>initial</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>title</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
<para>Show font selection dialog. </para>        </briefdescription>
        <detaileddescription>
<para>It is strongly recommended that you do not use this method, and instead use the standard <ref refid="classQgsFontButton" kindref="compound">QgsFontButton</ref> widget to allow users consistent font selection behavior.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>true on ok, false on cancel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial</parametername>
</parameternamelist>
<parameterdescription>
<para>initial font </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>optional dialog title </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>QFont the selected fon </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="193" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" bodystart="193" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQgsGuiUtils_1a536db9b54d6fabefc5c3960f3aded95d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPair&lt; QString, QString &gt; GUI_EXPORT</type>
        <definition>QPair&lt; QString, QString &gt; GUI_EXPORT QgsGuiUtils::getSaveAsImageName</definition>
        <argsstring>(QWidget *parent, const QString &amp;message, const QString &amp;defaultFilename=QString())</argsstring>
        <name>getSaveAsImageName</name>
        <param>
          <type>QWidget *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>defaultFilename</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
<para>A helper function to get an image name from the user. </para>        </briefdescription>
        <detaileddescription>
<para>It will nicely provide filters with all available writable image formats. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>widget that should act as the parent for the file dialog </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to display to the user </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>default file name (empty by default) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>QPair&lt;QString, QString&gt; where first is the file name and second is the file type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="88" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" bodystart="88" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQgsGuiUtils_1ac98d5b2e19a3cf901ad7e6234f6f2be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool GUI_EXPORT</type>
        <definition>bool GUI_EXPORT QgsGuiUtils::openFilesRememberingFilter</definition>
        <argsstring>(QString const &amp;filterName, QString const &amp;filters, QStringList &amp;selectedFiles, QString &amp;enc, QString &amp;title, bool cancelAll=false)</argsstring>
        <name>openFilesRememberingFilter</name>
        <param>
          <type>QString const &amp;</type>
          <declname>filterName</declname>
        </param>
        <param>
          <type>QString const &amp;</type>
          <declname>filters</declname>
        </param>
        <param>
          <type>QStringList &amp;</type>
          <declname>selectedFiles</declname>
        </param>
        <param>
          <type>QString &amp;</type>
          <declname>enc</declname>
        </param>
        <param>
          <type>QString &amp;</type>
          <declname>title</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cancelAll</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Open files, preferring to have the default file selector be the last one used, if any; also, prefer to start in the last directory associated with filterName. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filterName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the filter; used for persistent store key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filters</parametername>
</parameternamelist>
<parameterdescription>
<para>the file filters used for QFileDialog </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedFiles</parametername>
</parameternamelist>
<parameterdescription>
<para>string list of selected files; will be empty if none selected </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>encoding? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>the title for the dialog </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cancelAll</parametername>
</parameternamelist>
<parameterdescription>
<para>add button to cancel further requests </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para></para></simplesect>
Stores persistent settings under /UI/. The sub-keys will be filterName and filterName + &quot;Dir&quot;.</para><para>Opens dialog on last directory associated with the filter name, or the current working directory if this is the first time invoked with the current filter name.</para><para>This method returns true if cancel all was clicked, otherwise false </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="30" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" bodystart="30" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQgsGuiUtils_1a36d1cf4a76a92da14ea48927d5a08265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GUI_EXPORT QgsGuiUtils::restoreGeometry</definition>
        <argsstring>(QWidget *widget, const QString &amp;keyName=QString())</argsstring>
        <name>restoreGeometry</name>
        <param>
          <type>QWidget *</type>
          <declname>widget</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>keyName</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
<para>Restore the wigget geometry from settings. </para>        </briefdescription>
        <detaileddescription>
<para>Will use the objetName() of the widget and if empty, or keyName is set, will use keyName to save state into settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>widget</parametername>
</parameternamelist>
<parameterdescription>
<para>The widget to restore. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Override for objectName() if needed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the geometry was restored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="216" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQgsGuiUtils_1aa34887010cc27c452cdb58ced9e45dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GUI_EXPORT QgsGuiUtils::saveGeometry</definition>
        <argsstring>(QWidget *widget, const QString &amp;keyName=QString())</argsstring>
        <name>saveGeometry</name>
        <param>
          <type>QWidget *</type>
          <declname>widget</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>keyName</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
<para>Save the wigget geometry into settings. </para>        </briefdescription>
        <detaileddescription>
<para>Will use the objectName() of the widget and if empty, or keyName is set, will use keyName to save state into settings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>widget</parametername>
</parameternamelist>
<parameterdescription>
<para>The widget to save. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyName</parametername>
</parameternamelist>
<parameterdescription>
<para>Override for objectName() if needed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="209" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceQgsGuiUtils_1a7a8d53d203349efd0808a0227964ce40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QgsGuiUtils::scaleIconSize</definition>
        <argsstring>(int standardSize)</argsstring>
        <name>scaleIconSize</name>
        <param>
          <type>int</type>
          <declname>standardSize</declname>
        </param>
        <briefdescription>
<para>Scales an icon size to compensate for display pixel density, making the icon size hi-dpi friendly, whilst still resulting in pixel-perfect sizes for low-dpi displays. </para>        </briefdescription>
        <detaileddescription>
<para><emphasis>standardSize</emphasis> should be set to a standard icon size, e.g. 16, 24, 48, etc.</para><para><simplesect kind="since"><para>QGIS 3.6 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="242" column="1" bodyfile="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" bodystart="242" bodyend="247"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="namespaceQgsGuiUtils" kindref="compound">QgsGuiUtils</ref> namespace contains constants and helper functions used throughout the QGIS GUI. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>not available in Python bindings </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/suricactus/work/qgis/QGIS/src/gui/qgsguiutils.cpp" line="28" column="1"/>
  </compounddef>
</doxygen>
